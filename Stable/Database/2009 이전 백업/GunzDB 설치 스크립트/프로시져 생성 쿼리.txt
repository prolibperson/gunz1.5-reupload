-- GunzDB Procedure생성 쿼리.
--------------------------------------------------------------------------

SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO



CREATE   PROC [spCheckRegisteredUser]
	@UserID VARCHAR(20)
AS
BEGIN
 SET NOCOUNT ON
	DECLARE @AID INT

	SELECT @AID = AID FROM Account WHERE UserID = @UserID

	IF @@ERROR <> 0
	BEGIN
		RETURN	-- 디비장애
	END

	IF @AID IS NULL
	BEGIN
		RETURN -1	-- 미가입자
	END
		select 1
	RETURN 1 -- 가입자 확인
END

GO
SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

--------------------------------------------------------------------------

USE GunzDB
GO

IF OBJECT_ID('spGetAccountInfo') IS NOT NULL 
 DROP PROC spGetAccountInfo
GO

CREATE  PROC [spGetAccountInfo]
 @AID  int      
, @ServerID int = 0
AS    
BEGIN  
 SET NOCOUNT ON    

 SELECT AID, UserID, UGradeID, Name, HackingType
 , DATEPART(yy, EndHackingBlockTime) AS HackBlockYear, DATEPART(mm, EndHackingBlockTime) AS HackBlockMonth    
 , DATEPART(dd, EndHackingBlockTime) AS HackBlockDay, DATEPART(hh, EndHackingBlockTime) AS HackBlockHour    
 , DATEPART(mi, EndHackingBlockTime) AS HackBlockMin
 FROM Account(NOLOCK) WHERE AID = @AID      

 update Account set LastLoginTime = getdate(), ServerID = @ServerID  where aid = @aid  
END
GO
--------------------------------------------------------------------------

SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO

/* 성별 정보 얻어옴 */
CREATE PROC [spGetSexInfo]
	@AID		int
AS
SET NOCOUNT ON
SELECT Sex, RegNum, Email FROM Account WHERE AID=@AID

GO
SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

--------------------------------------------------------------------------

SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO

/* 계정 추가 */
CREATE PROC [spInsertAccount] 
	@UserID		varchar(20)
,	@Password	varchar(20)
, @Cert		tinyint
,	@Name		varchar(128)
, @Age		smallint
,	@Sex		tinyint

AS
BEGIN TRAN
 	SET NOCOUNT ON
	DECLARE @AIDIdent 	int

	INSERT INTO Account (UserID, Cert, Name, Age, Sex, UGradeID, PGradeID, RegDate)
	Values (@UserID, @Cert, @Name, @Age, @Sex, 0, 0, GETDATE())
	IF 0 <> @@ERROR
	BEGIN
		ROLLBACK TRAN
		RETURN
	END

	SET @AIDIdent = @@IDENTITY

	INSERT INTO Login (UserID, AID, Password)
	Values (@UserID, @AIDIdent, @Password)
	IF 0 <> @@ERROR
	BEGIN
		ROLLBACK TRAN
		RETURN
	END
COMMIT TRAN

GO
SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

--------------------------------------------------------------------------

SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO

-- 정기적으로 해주는 패널티 업데이트
CREATE PROC [spRegularUpdateAccountPenaltyPeriod]
AS
SET NOCOUNT ON
UPDATE AccountPenaltyPeriod SET DayLeft=DayLeft-1

DECLARE curAccountPenaltyPeriod INSENSITIVE CURSOR
FOR
	SELECT AID FROM AccountPenaltyPeriod WHERE DayLeft <= 0
FOR READ ONLY

OPEN curAccountPenaltyPeriod

DECLARE @varAID int
DECLARE @sql varchar(100)

FETCH FROM curAccountPenaltyPeriod INTO @varAID

WHILE @@FETCH_STATUS = 0
BEGIN
	SELECT @sql = 'UPDATE Account SET UGradeID=100 WHERE AID=' + CONVERT(varchar(16), @varAID)
	EXEC(@sql)
	SELECT @sql = 'DELETE FROM AccountPenaltyPeriod WHERE AID=' + CONVERT(varchar(16), @varAID)
	EXEC(@sql)

	FETCH FROM curAccountPenaltyPeriod INTO @varAID
END

CLOSE curAccountPenaltyPeriod
DEALLOCATE curAccountPenaltyPeriod


GO
SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

--------------------------------------------------------------------------

SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO

-- 패널티 적용
CREATE PROC [spUpdateAccountUGrade]
	@AID		int
,	@UGrade		int
,	@Period		int
AS
BEGIN TRAN
	SET NOCOUNT ON
	UPDATE Account SET UGradeID=@UGrade WHERE AID=@AID
	IF 0 = @@ROWCOUNT BEGIN 
		ROLLBACK TRAN
		RETURN
	END


	IF (@UGrade >= 100) AND (@UGrade<=253) BEGIN
		INSERT INTO PenaltyLog(AID, UGradeID, Date) Values(@AID, @UGrade, GETDATE())
		IF 0 <> @@ERROR BEGIN
			ROLLBACK TRAN
			RETURN
		END
	END

	IF @UGrade = 104 OR @UGrade=105 BEGIN
		INSERT INTO AccountPenaltyPeriod(AID, DayLeft) VALUES(@AID, @Period)
		IF 0 <> @@ERROR	BEGIN
			ROLLBACK TRAN
			RETURN
		END
	END
	ELSE
	BEGIN
		-- 기간 패널티 해제
		DELETE FROM AccountPenaltyPeriod WHERE AID=@AID
		IF 0 <> @@ERROR BEGIN
			ROLLBACK TRAN
			RETURN
		END	
	END
COMMIT TRAN


GO
SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

--------------------------------------------------------------------------

SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO

CREATE PROC spWebGetAccountMaxLevel
	@UserID varchar(20)
AS
BEGIN
	SET NOCOUNT ON
	SELECT MAX(c.Level) FROM Account a(NOLOCK), Character c(NOLOCK)
	WHERE a.UserID=@UserID AND a.AID=c.AID AND c.DeleteFlag=0
END


GO
SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

--------------------------------------------------------------------------

SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO

-- sp 

-- 친구 추가
CREATE PROC [spAddFriend]
	@CID		int
,	@FriendCID	int
,	@Favorite	tinyint
AS
BEGIN TRAN
	SET NOCOUNT ON
	DECLARE @ID	int
	INSERT INTO Friend(CID, FriendCID, Favorite, DeleteFlag, Type) Values (@CID, @FriendCID, @Favorite, 0, 1)
	IF 0 <> @@ERROR BEGIN
		ROLLBACK TRAN
		RETURN
	END
	SET @ID = @@IDENTITY
	SELECT @ID as ID
COMMIT TRAN

GO
SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

--------------------------------------------------------------------------

SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO

-- 캐릭터 이름 변경
CREATE PROC [spChangeCharName]
	@AID		int,
	@CID		int,
	@NewName	varchar(24)
AS
SET NOCOUNT ON
IF (LEN(@NewName) <= 0) OR (LEN(@NewName) > 12)
BEGIN
	SELECT 0 AS Ret
END

IF EXISTS (SELECT TOP 1 CID FROM Character where (Name=@NewName) AND (DeleteFlag=0))
BEGIN
	SELECT 0 AS Ret
	return (-1)
END

UPDATE Character SET Name=@NewName WHERE AID=@AID AND CID=@CID
IF 0 = @@ROWCOUNT BEGIN
	SELECT 0 AS Ret
	RETURN (-1)
END

SELECT 1 AS Ret


GO
SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

--------------------------------------------------------------------------


/* 캐릭터 삭제 */
CREATE PROC [dbo].[spDeleteChar]    
 @AID  int,    
 @CharNum smallint,    
 @CharName varchar(24)    
AS    
BEGIN
SET NOCOUNT ON

DECLARE @CID  int    
    
SELECT @CID=CID FROM Character WITH (nolock) WHERE AID=@AID and CharNum=@CharNum    
IF (@CID IS NULL)    
BEGIN    
 return (-1)    
END    

IF EXISTS(SELECT * FROM CharacterItem(NOLOCK) WHERE CID = @CID AND ItemID >= 500000)
BEGIN
 RETURN (-1)
END

IF EXISTS(SELECT * FROM Clan(NOLOCK) WHERE MasterCID = @CID)
BEGIN
 RETURN (-1)
END

IF EXISTS(SELECT * FROM ClanMember(NOLOCK) WHERE CID = @CID)
BEGIN
 RETURN (-1)
END

BEGIN TRAN  
  
UPDATE Character SET CharNum = -1, DeleteFlag = 1, Name='', DeleteName=@CharName    
WHERE AID=@AID AND CharNum=@CharNum AND Name=@CharName    
IF (0 <> @@ERROR) OR (0 = @@ROWCOUNT) BEGIN  
 ROLLBACK TRAN  
 RETURN (-1)  
END  
  
INSERT INTO CharacterMakingLog(AID, CharName, Type, Date)  
VALUES(@AID, @CharName, 'delete', GETDATE())  
IF (0 <> @@ERROR) OR (0 = @@ROWCOUNT) BEGIN  
 ROLLBACK TRAN  
 RETURN (-1)   
END  

UPDATE Friend
SET DeleteFlag = 1
WHERE CID = @CID OR FriendCID = @CID
IF (0 <> @@ERROR)
BEGIN
 ROLLBACK TRAN
 RETURN (-1)
END
    
COMMIT TRAN  
SELECT 1 AS Ret    
END


--------------------------------------------------------------------------

SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO

-- 캐릭터 정보 가져오기
CREATE  PROC [spGetCharInfoByCharNum]
	@AID		int
,	@CharNum	smallint
AS
SET NOCOUNT ON

DECLARE @CID		int
DECLARE @CLID		int
DECLARE @ClanName	varchar(24)
DECLARE @ClanGrade	int
DECLARE @ClanContPoint	int
BEGIN
SELECT @CID=CID FROM Character WITH (nolock) WHERE AID=@AID and CharNum=@CharNum
SELECT @CLID=cl.CLID, @ClanName=cl.Name, @ClanGrade=cm.Grade, @ClanContPoint=cm.ContPoint FROM ClanMember cm(nolock), Clan cl(nolock) WHERE cm.cid=@CID AND cm.CLID=cl.CLID

SELECT CID, AID, Name, Level, Sex, CharNum, Hair, Face, XP, BP, HP, AP, FR, CR, ER, WR, GameCount, KillCount, DeathCount, PlayTime,
       head_slot, chest_slot, hands_slot, legs_slot, feet_slot, fingerl_slot, fingerr_slot, melee_slot, primary_slot,
       secondary_slot, custom1_slot, custom2_slot,
       @CLID AS CLID, @ClanName AS ClanName, @ClanGrade AS ClanGrade, @ClanContPoint AS ClanContPoint 
FROM Character WITH (nolock) where cid=@CID
END

GO
SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

--------------------------------------------------------------------------

SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO

-- 캐릭터선택시 캐릭터 정보 가져오기
CREATE PROC [spGetAccountCharInfo]
	@AID		int
,	@CharNum	smallint
AS
SET NOCOUNT ON
DECLARE @CID		int
DECLARE @CLID		int
DECLARE @ClanName	varchar(24)
DECLARE @ClanGrade	int
DECLARE @ClanContPoint	int

SELECT @CID=CID FROM Character WITH (nolock) WHERE AID=@AID and CharNum=@CharNum

SELECT @CID AS CID, c.Name AS Name, c.CharNum AS CharNum, c.Level AS Level, c.Sex AS Sex, c.Hair AS Hair, c.Face AS Face,
       c.XP AS XP, c.BP AS BP,
       (SELECT cl.Name FROM Clan cl(nolock), ClanMember cm(nolock) WHERE cm.cid=@CID AND cm.CLID=cl.CLID) AS ClanName,
	head_itemid, chest_itemid, hands_itemid, legs_itemid, feet_itemid, fingerl_itemid, 
	fingerr_itemid, melee_itemid, primary_itemid, secondary_itemid, custom1_itemid, custom2_itemid
FROM Character AS c WITH (nolock)
WHERE c.CID = @CID


GO
SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

--------------------------------------------------------------------------

SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO

/* 계정의 캐릭터 리스트 가져오기  */
CREATE PROC [spGetCharList]
	@AID		int
AS
SET NOCOUNT ON
SELECT c.CID AS CID, c.Name AS Name, c.CharNum AS CharNum, c.Level AS Level
FROM Character AS c WITH (nolock)
WHERE c.AID=@AID AND c.DeleteFlag = 0

GO
SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

--------------------------------------------------------------------------

SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO

-- 친구 목록 가져오기
CREATE PROC spGetFriendList
 @CID INT    
AS      
BEGIN    
 SET NOCOUNT ON    
    
 SELECT  f.FriendCID, 0 AS 'Favorite',  c.Name       
 FROM Friend f(NOLOCK), Character c(NOLOCK)       
 WHERE f.CID = @CID     
  AND f.DeleteFlag = 0     
  -- AND f.Type = 1    
  AND f.FriendCID = c.CID      
  AND c.DeleteFlag = 0    
END 

--------------------------------------------------------------------------

SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO

/* 캐릭터 추가 */
CREATE PROC [spInsertChar]
	@AID		int,
	@CharNum	smallint,
	@Name		varchar(24),
	@Sex		tinyint,
	@Hair		int,  
	@Face		int,
	@Costume	int
AS
SET NOCOUNT ON
BEGIN TRAN
IF EXISTS (SELECT CID FROM Character where (AID=@AID AND CharNum=@CharNum) OR (Name=@Name))
BEGIN	
	ROLLBACK TRAN
	return(-1)
END

DECLARE @CharIdent 	int
DECLARE @ChestCIID	int
DECLARE @LegsCIID	int
DECLARE @MeleeCIID	int
DECLARE @PrimaryCIID	int
DECLARE @SecondaryCIID  int
DECLARE @Custom1CIID	int
DECLARE @Custom2CIID	int

DECLARE @ChestItemID	int
DECLARE @LegsItemID	int
DECLARE @MeleeItemID	int
DECLARE @PrimaryItemID	int
DECLARE @SecondaryItemID  int
DECLARE @Custom1ItemID	int
DECLARE @Custom2ItemID	int

SET @SecondaryCIID = NULL
SET @SecondaryItemID = NULL

SET @Custom1CIID = NULL
SET @Custom1ItemID = NULL

SET @Custom2CIID = NULL
SET @Custom2ItemID = NULL

INSERT INTO Character (AID, Name, CharNum, Level, Sex, Hair, Face, XP, BP, FR, CR, ER, WR, 
         		           GameCount, KillCount, DeathCount, RegDate, PlayTime, DeleteFlag)
Values (@AID, @Name, @CharNum, 1, @Sex, @Hair, @Face, 0, 0, 0, 0, 0, 0, 0, 0, 0, GETDATE(), 0, 0)
IF 0 <> @@ERROR BEGIN
	ROLLBACK TRAN
	RETURN (-1)
END


SET @CharIdent = @@IDENTITY

  /* Melee */
  SET @MeleeItemID = 
    CASE @Costume
    WHEN 0 THEN 1
    WHEN 1 THEN 2
    WHEN 2 THEN 1
    WHEN 3 THEN 2
    WHEN 4 THEN 2
    WHEN 5 THEN 1
    END

  INSERT INTO CharacterItem (CID, ItemID) Values (@CharIdent, @MeleeItemID)
  IF 0 <> @@ERROR BEGIN
	ROLLBACK TRAN
	RETURN (-1)
  END

  SET @MeleeCIID = @@IDENTITY

  /* Primary */
  SET @PrimaryItemID = 
    CASE @Costume
    WHEN 0 THEN 5001
    WHEN 1 THEN 5002
    WHEN 2 THEN 4005
    WHEN 3 THEN 4001
    WHEN 4 THEN 4002
    WHEN 5 THEN 4006
    END

  INSERT INTO CharacterItem (CID, ItemID) Values (@CharIdent, @PrimaryItemID)
  IF 0 <> @@ERROR BEGIN
	ROLLBACK TRAN
	RETURN (-1)
  END

  SET @PrimaryCIID = @@IDENTITY

  /* Secondary */
IF @Costume = 0 OR @Costume = 2 BEGIN
  SET @SecondaryItemID =
    CASE @Costume
    WHEN 0 THEN 4001
    WHEN 1 THEN 0
    WHEN 2 THEN 5001
    WHEN 3 THEN 4006
    WHEN 4 THEN 0
    WHEN 5 THEN 4006
    END

  IF @SecondaryItemID <> 0 BEGIN
    INSERT INTO CharacterItem (CID, ItemID) Values (@CharIdent, @SecondaryItemID)
    IF 0 <> @@ERROR BEGIN
	ROLLBACK TRAN
	RETURN (-1)
    END

    SET @SecondaryCIID = @@IDENTITY
  END
END
  SET @Custom1ItemID = 
    CASE @Costume
    WHEN 0 THEN 30301
    WHEN 1 THEN 30301
    WHEN 2 THEN 30401
    WHEN 3 THEN 30401
    WHEN 4 THEN 30401
    WHEN 5 THEN 30101
    END

  /* Custom1 */
  INSERT INTO CharacterItem (CID, ItemID) Values (@CharIdent, @Custom1ItemID)
  IF 0 <> @@ERROR BEGIN
	ROLLBACK TRAN
	RETURN (-1)
  END

  SET @Custom1CIID = @@IDENTITY

  /* Custom2 */
IF @Costume = 4 OR @Costume = 5
BEGIN
  SET @Custom2ItemID =
    CASE @Costume
    WHEN 0 THEN 0
    WHEN 1 THEN 0
    WHEN 2 THEN 0
    WHEN 3 THEN 0
    WHEN 4 THEN 30001
    WHEN 5 THEN 30001
    END

  IF @Custom2ItemID <> 0
  BEGIN
    INSERT INTO CharacterItem (CID, ItemID) Values (@CharIdent, @Custom2ItemID)
    IF 0 <> @@ERROR BEGIN
	ROLLBACK TRAN
	RETURN (-1)
    END

    SET @Custom2CIID = @@IDENTITY
  END
END


IF @Sex = 0		/* 남자일 경우 */
BEGIN

  /* Chest */
  SET @ChestItemID =
    CASE @Costume
    WHEN 0 THEN 21001
    WHEN 1 THEN 21001
    WHEN 2 THEN 21001
    WHEN 3 THEN 21001
    WHEN 4 THEN 21001
    WHEN 5 THEN 21001
    END


  INSERT INTO CharacterItem (CID, ItemID) Values (@CharIdent, @ChestItemID)
  IF 0 <> @@ERROR BEGIN
	ROLLBACK TRAN
	RETURN (-1)
  END

  SET @ChestCIID = @@IDENTITY

  /* Legs */
  SET @LegsItemID =
    CASE @Costume
    WHEN 0 THEN 23001
    WHEN 1 THEN 23001
    WHEN 2 THEN 23001
    WHEN 3 THEN 23001
    WHEN 4 THEN 23001
    WHEN 5 THEN 23001
    END


  INSERT INTO CharacterItem (CID, ItemID) Values (@CharIdent, @LegsItemID)
  IF 0 <> @@ERROR BEGIN 
	ROLLBACK TRAN
	RETURN (-1)
  END

  SET @LegsCIID = @@IDENTITY

END
ELSE
BEGIN			/* 여자일 경우 */

  /* Chest */
  SET @ChestItemID =
    CASE @Costume
    WHEN 0 THEN 21501
    WHEN 1 THEN 21501
    WHEN 2 THEN 21501
    WHEN 3 THEN 21501
    WHEN 4 THEN 21501
    WHEN 5 THEN 21501
    END


  INSERT INTO CharacterItem (CID, ItemID) Values (@CharIdent, @ChestItemID)
  IF 0 <> @@ERROR BEGIN
	ROLLBACK TRAN
	RETURN (-1)
  END
  SET @ChestCIID = @@IDENTITY

  /* Legs */
  SET @LegsItemID =
    CASE @Costume
    WHEN 0 THEN 23501
    WHEN 1 THEN 23501
    WHEN 2 THEN 23501
    WHEN 3 THEN 23501
    WHEN 4 THEN 23501
    WHEN 5 THEN 23501
    END


  INSERT INTO CharacterItem (CID, ItemID) Values (@CharIdent, @LegsItemID)
  IF 0 <> @@ERROR BEGIN
	ROLLBACK TRAN
	RETURN (-1)
  END
  SET @LegsCIID = @@IDENTITY

END  

UPDATE Character
SET chest_slot = @ChestCIID, legs_slot = @LegsCIID, melee_slot = @MeleeCIID,
    primary_slot = @PrimaryCIID, secondary_slot = @SecondaryCIID, custom1_slot = @Custom1CIID,
    custom2_slot = @Custom2CIID,
    chest_itemid = @ChestItemID, legs_itemid = @LegsItemID, melee_itemid = @MeleeItemID,
    primary_itemid = @PrimaryItemID, secondary_itemid = @SecondaryItemID, custom1_itemid = @Custom1ItemID,
    custom2_itemid = @Custom2ItemID
WHERE CID=@CharIdent
IF 0 = @@ROWCOUNT BEGIN
	ROLLBACK TRAN
	RETURN (-1)
END
COMMIT TRAN


GO
SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

--------------------------------------------------------------------------

SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO


/* 캐릭터 생성 로그 */
CREATE PROC [spInsertCharMakingLog]
	@AID		int,
	@CharName	varchar(32),
	@Type		varchar(20)
AS
SET NOCOUNT ON
BEGIN TRAN
INSERT INTO CharacterMakingLog (AID, CharName, Type, Date)
VALUES (@AID, @CharName, @Type, GETDATE())
IF 0 <> @@ERROR BEGIN
	ROLLBACK TRAN
	RETURN
END
COMMIT TRAN

GO
SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

--------------------------------------------------------------------------

SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO



-- 레벨업 로그 추가
CREATE PROC [spInsertLevelUpLog]
	@CID			int,
	@Level			smallint,
	@BP				int,
	@KillCount		int,
	@DeathCount		int,
	@PlayTime		int
AS
SET NOCOUNT ON
BEGIN TRAN
	INSERT INTO LevelUpLog(CID, Level, BP, KillCount, DeathCount, PlayTime, Date)
	VALUES (@CID, @Level, @BP, @KillCount, @DeathCount, @PlayTime, GETDATE())
	IF 0 <> @@ERROR BEGIN
		ROLLBACK TRAN
		RETURN
	END
COMMIT TRAN

GO
SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

--------------------------------------------------------------------------

SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO

/* 플레이어 로그 */
CREATE PROC [spInsertPlayerLog]
	@CID          int,
	@PlayTime     int,
	@Kills        int,
	@Deaths       int,
	@XP           int,
	@TotalXP      int
AS
SET NOCOUNT ON
BEGIN TRAN
INSERT INTO PlayerLog (CID, DisTime, PlayTime, Kills, Deaths, XP, TotalXP)
VALUES	(@CID, GETDATE(), @PlayTime, @Kills, @Deaths, @XP, @TotalXP)
IF 0 <> @@ERROR BEGIN 
	ROLLBACK TRAN
	RETURN
END
COMMIT TRAN

GO
SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

--------------------------------------------------------------------------

SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO

-- 캐릭터 이름 중복 검사
CREATE PROC [spIsExistCharName]
	@CharName	varchar(24)
AS
SET NOCOUNT ON
IF EXISTS (SELECT TOP 1 CID FROM Character(nolock) where (Name=@CharName) AND (DeleteFlag=0))
BEGIN
	SELECT 1 AS Ret
END
ELSE
BEGIN
	SELECT 0 AS Ret
END

GO
SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

--------------------------------------------------------------------------

SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO

-- 친구 삭제
CREATE PROC [spRemoveFriend]
	@CID		int
,	@FriendCID	int
AS
SET NOCOUNT ON
UPDATE Friend 
SET DeleteFlag=1
WHERE CID=@CID AND FriendCID=@FriendCID

GO
SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

--------------------------------------------------------------------------

SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO


/* 캐릭터 정보 업데이트 - 한사람 죽일때마다 업데이트한다. */
CREATE PROC [spSimpleUpdateChar]
	@CID		int,
	@Name		varchar(24),
	@Level		smallint,
	@XP		int,
	@BP		int
AS
SET NOCOUNT ON
UPDATE Character WITH (rowlock)
SET Level=@Level, XP=@XP, BP=@BP
WHERE CID=@CID AND Name=@Name

GO
SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

--------------------------------------------------------------------------

SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO

/* 캐릭터 정보 업데이트 - 아이템 정보는 업데이트 하지 않는다. */
CREATE PROC [spUpdateChar]
	@Name		varchar(24),
	@CharNum	smallint,
	@Level		smallint,
	@Sex		tinyint,
	@Hair		tinyint,
	@Face		tinyint,
	@XP		int,
	@BP		int,
	@HP		smallint,
	@AP		smallint,
	@FR		smallint,
	@CR		smallint,
	@ER		smallint,
	@WR		smallint
AS
SET NOCOUNT ON
UPDATE Character WITH (rowlock)
SET Name=@Name, Level=@Level, Sex=@Sex, Hair=@Hair, Face=@Face, XP=@XP, BP=@BP, 
  HP=@HP, AP=@AP, FR=@FR, CR=@CR, ER=@ER, WR=@WR
WHERE Name=@Name and CharNum=@CharNum


GO
SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

--------------------------------------------------------------------------

SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO



/* BP 업데이트 */
CREATE PROC [spUpdateCharBP]
  @BPInc        int,
  @CID          int
AS
SET NOCOUNT ON
UPDATE Character 
SET BP=BP+(@BPInc) 
WHERE CID=@CID


GO
SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

--------------------------------------------------------------------------

SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO



/* 캐릭터 정보(XP, BP, KillCount, DeathCount) 업데이트 */
CREATE PROC [spUpdateCharInfoData]
  @XPInc        int,
  @BPInc        int,
  @KillInc      int,
  @DeathInc     int,
  @CID          int
AS
SET NOCOUNT ON
  
UPDATE Character 
SET XP=XP+(@XPInc), BP=BP+(@BPInc), KillCount=KillCount+(@KillInc), DeathCount=DeathCount+(@DeathInc)
WHERE CID=@CID


GO
SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

--------------------------------------------------------------------------

SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO


/* 레벨 업데이트 */
CREATE PROC [spUpdateCharLevel]
  @Level        smallint,
  @CID          int
AS
SET NOCOUNT ON
UPDATE Character 
Set Level=@Level 
WHERE CID=@CID


GO
SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

--------------------------------------------------------------------------

SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO




/* 캐릭터 플레이 시간 업데이트 */
CREATE PROC [spUpdateCharPlayTime]
  @PlayTimeInc    int,
  @CID            int
AS
SET NOCOUNT ON

UPDATE Character 
SET PlayTime=PlayTime+(@PlayTimeInc), LastTime=GETDATE() 
WHERE CID=@CID


GO
SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

--------------------------------------------------------------------------

SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO

-- 캐릭터 초기화
CREATE   PROC [spWebResetChar]
	@CID		INT
AS
SET NOCOUNT ON

BEGIN
	-- 스탯 초기화
	UPDATE Character SET Level=1, XP=0, BP=0, 

	head_slot=NULL, chest_slot=NULL, hands_slot=NULL, legs_slot=NULL, feet_slot=NULL,
	fingerl_slot=NULL, fingerr_slot=NULL, melee_slot=NULL, primary_slot=NULL, secondary_slot=NULL,
	custom1_slot=NULL, custom2_slot=NULL,
	GameCount=0, KillCount=0, DeathCount=0, 
	head_itemid=NULL, chest_itemid=NULL, hands_itemid=NULL, legs_itemid=NULL, feet_itemid=NULL,
	fingerl_itemid=NULL, fingerr_itemid=NULL, melee_itemid=NULL, primary_itemid=NULL, secondary_itemid=NULL,
	custom1_itemid=NULL, custom2_itemid=NULL, QuestItemInfo=NULL

	WHERE CID=@CID

	-- 아이템 삭제(상용 아이템은 제외)
	UPDATE CharacterItem SET CID=NULL WHERE CID=@CID AND ItemID < 500000

END

GO
SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

--------------------------------------------------------------------------

SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO


CREATE  PROC spWebUndeleteChar
	@CID INT
AS
SET NOCOUNT ON
BEGIN
	DECLARE @AID INT
	DECLARE @Name VARCHAR(64)
	SELECT @Name = DeleteName, @AID=AID FROM Character(NOLOCK) WHERE CID=@CID
	
	IF @AID IS NULL
	BEGIN
		SELECT 'It is not exist character.' AS ERROR, @CID AS CID
		GOTO label_finish
	END
	
	--SELECT @Name AS Name
	IF @Name IS NULL
	BEGIN
		SELECT 'already exist character' AS ERROR, @CID AS CID
		GOTO label_finish
	END
	
	-- find empty slot.
	DECLARE @CharNum INT
	SELECT @CharNum=a.CharNum FROM
	(
		SELECT 0 AS CharNum UNION 
		SELECT 1 AS CharNum UNION 
		SELECT 2 AS CharNum UNION 
		SELECT 3 AS CharNum
	) a WHERE NOT EXISTS
	(
		SELECT CharNum FROM Character(NOLOCK) 
		WHERE AID=@AID AND DeleteFlag=0 AND CharNum=a.CharNum
	)
	IF @CharNum IS NULL
	BEGIN
		SELECT 'no more empty slot' AS ERROR, @CID AS CID
		GOTO label_finish
	END
	
	DECLARE @ExistName VARCHAR(64)
	SELECT @ExistName = Name FROM Character(NOLOCK) WHERE AID=@AID AND CharNum=@CharNum
	IF @ExistName IS NOT NULL
	BEGIN
		SELECT 'already exist slot.' AS ERROR, @CID AS CID
		GOTO label_finish
	END
	
	DECLARE @Count int
	SELECT @Count=COUNT(*) FROM Character(NOLOCK) WHERE Name=@Name
	
	--SELECT @Name AS UndeleteTarget
	
	IF ( @Count <= 0 )
	BEGIN
		Update Character Set Name=@Name WHERE CID=@CID
		Update Character Set CharNum=@CharNum WHERE CID=@CID
		Update Character Set DeleteFlag=0 WHERE CID=@CID
		Update Character Set DeleteName=NULL WHERE CID=@CID
	
		SELECT 'completed restore' AS ERROR, @Name AS 'Name'
	END
	ELSE
	BEGIN
		SELECT 'already exist name' AS ERROR, @Name AS 'Name', @Count AS 'Count'
	END
		
label_finish:
END


GO
SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO
--------------------------------------------------------------------------

SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO

-- 창고 아이템 내 캐릭터로 가져오기 ----------
CREATE PROC [spBringAccountItem]
	@AID		int,
	@CID		int,
	@AIID		int
AS
SET NoCount On

DECLARE @ItemID int
DECLARE @CAID int
DECLARE @OrderCIID int

DECLARE @RentDate			DATETIME
DECLARE @RentHourPeriod		SMALLINT
DECLARE @Cnt				SMALLINT

SELECT @ItemID=ItemID, @RentDate=RentDate, @RentHourPeriod=RentHourPeriod, @Cnt=Cnt
FROM AccountItem WHERE AIID = @AIID


SELECT @CAID = AID FROM Character WHERE CID=@CID

IF @ItemID IS NOT NULL AND @CAID = @AID
BEGIN
	BEGIN TRAN ----------------
	DELETE FROM AccountItem WHERE AIID = @AIID
	IF 0 <> @@ERROR BEGIN
		ROLLBACK TRAN 
		RETURN
	END

	INSERT INTO CharacterItem (CID, ItemID, RegDate, RentDate, RentHourPeriod, Cnt)
	VALUES (@CID, @ItemID, GETDATE(), @RentDate, @RentHourPeriod, @Cnt)
	IF 0 <> @@ERROR BEGIN 
		ROLLBACK TRAN
		RETURN 
	END

	SET @OrderCIID = @@IDENTITY

	INSERT INTO BringAccountItemLog	(ItemID, AID, CID, Date)
	VALUES (@ItemID, @AID, @CID, GETDATE())
	IF 0 <> @@ERROR BEGIN
		ROLLBACK TRAN
		RETURN
	END

	COMMIT TRAN ---------------

	SELECT @OrderCIID AS ORDERCIID, @ItemID AS ItemID, (@RentHourPeriod*60) - (DateDiff(n, @RentDate, GETDATE())) AS RentPeriodRemainder
END


GO
SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

--------------------------------------------------------------------------

SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO

-- 내 캐릭터 캐쉬아이템을 창고에 넣기 ---------
CREATE PROC [spBringBackAccountItem]
	@AID		int,
	@CID		int,
	@CIID		int
AS
SET NOCOUNT ON

DECLARE @ItemID int
DECLARE @RentDate		DATETIME
DECLARE @RentHourPeriod	SMALLINT
DECLARE @Cnt			SMALLINT

DECLARE @HeadCIID 	int
DECLARE @ChestCIID	int
DECLARE @HandsCIID	int
DECLARE @LegsCIID	int
DECLARE @FeetCIID	int
DECLARE @FingerLCIID	int
DECLARE @FingerRCIID	int
DECLARE @MeleeCIID	int
DECLARE @PrimaryCIID	int
DECLARE @SecondaryCIID	int
DECLARE @Custom1CIID	int
DECLARE @Custom2CIID	int

SELECT 
@HeadCIID=head_slot, @ChestCIID=chest_slot, @HandsCIID=hands_slot, 
@LegsCIID=legs_slot, @FeetCIID=feet_slot, @FingerLCIID=fingerl_slot, @FingerRCIID=fingerr_slot, 
@MeleeCIID=melee_slot, @PrimaryCIID=primary_slot, @SecondaryCIID=secondary_slot, 
@Custom1CIID=custom1_slot, @Custom2CIID=custom2_slot
FROM Character(nolock) WHERE cid=@CID AND aid=@AID

SELECT @ItemID=ItemID, @RentDate=RentDate, @RentHourPeriod=RentHourPeriod, @Cnt=Cnt
FROM CharacterItem WHERE CIID=@CIID AND CID=@CID

IF ((@ItemID IS NOT NULL) AND (@ItemID >= 400000) AND
   (@HeadCIID IS NULL OR @HeadCIID != @CIID) AND
   (@ChestCIID IS NULL OR @ChestCIID != @CIID) AND 
   (@HandsCIID IS NULL OR @HandsCIID != @CIID) AND
   (@LegsCIID IS NULL OR @LegsCIID != @CIID) AND 
   (@FeetCIID IS NULL OR @FeetCIID != @CIID) AND
   (@FingerLCIID IS NULL OR @FingerLCIID != @CIID) AND 
   (@FingerRCIID IS NULL OR @FingerRCIID != @CIID) AND
   (@MeleeCIID IS NULL OR @MeleeCIID != @CIID) AND 
   (@PrimaryCIID IS NULL OR @PrimaryCIID != @CIID) AND
   (@SecondaryCIID IS NULL OR @SecondaryCIID != @CIID) AND 
   (@Custom1CIID IS NULL OR @Custom1CIID != @CIID) AND
   (@Custom2CIID IS NULL OR @Custom2CIID != @CIID))
BEGIN
	BEGIN TRAN -------------
	UPDATE CharacterItem SET CID=NULL WHERE CIID=@CIID AND CID=@CID
	IF 0 = @@ROWCOUNT BEGIN
		ROLLBACK TRAN
		RETURN
	END

	INSERT INTO AccountItem (AID, ItemID, RentDate, RentHourPeriod, Cnt) 
	VALUES (@AID, @ItemID, @RentDate, @RentHourPeriod, @Cnt)
	IF 0 <> @@ERROR BEGIN
		ROLLBACK TRAN
		RETURN
	END
	COMMIT TRAN -----------
END


GO
SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

--------------------------------------------------------------------------

SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO

/* 캐릭터 모든 장비 해제  */
CREATE PROC [spClearAllEquipedItem]
	@CID		int
AS
SET NOCOUNT ON

UPDATE Character WITH (rowlock)
SET head_slot=NULL, chest_slot=NULL, hands_slot=NULL, legs_slot=NULL, feet_slot=NULL,
  fingerl_slot=NULL, fingerr_slot=NULL, melee_slot=NULL, primary_slot=NULL, secondary_slot=NULL, custom1_slot=NULL, custom2_slot=NULL,
  head_itemid=NULL, chest_itemid=NULL, hands_itemid=NULL, legs_itemid=NULL, feet_itemid=NULL,
  fingerl_itemid=NULL, fingerr_itemid=NULL, melee_itemid=NULL, primary_itemid=NULL, secondary_itemid=NULL, custom1_itemid=NULL, custom2_itemid=NULL

WHERE CID=@CID



GO
SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

--------------------------------------------------------------------------

SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO


/* 캐릭터 아이템 삭제 */
CREATE PROC [spDeleteCharItem]
	@CID		int,
	@CIID		int
AS
SET NOCOUNT ON

UPDATE CharacterItem SET CID=NULL
WHERE CID=@CID AND CIID=@CIID

/* 예전꺼
DELETE FROM CharacterItem 
WHERE CID=@CID AND CIID=@CIID
*/

GO
SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

--------------------------------------------------------------------------

SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO

/* 중앙은행의 기간만료 아이템 삭제 */
CREATE PROC [spDeleteExpiredAccountItem]
	@AIID		int
AS
SET NOCOUNT ON

DELETE FROM AccountItem WHERE AIID=@AIID AND RentDate IS NOT NULL


GO
SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

--------------------------------------------------------------------------

SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO


-- 캐쉬 일반아이템 이미지파일 알아오기
CREATE PROC [spGetCashItemImageFile]
	@CSID			int
,	@RetImageFileName	varchar(64) OUTPUT
AS
SET NOCOUNT ON

SELECT @RetImageFileName = WebImgName
FROM CashShop cs(nolock)
WHERE cs.csid=@CSID

RETURN 1


GO
SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

--------------------------------------------------------------------------

SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO

/* 아이템의 상세 정보 보기 */
CREATE  PROC [spGetCashItemInfo]
	@CSID		int
AS
	SET NOCOUNT ON

	SELECT cs.csid AS CSID, i.name AS Name, i.Slot AS Slot, 
		cs.CashPrice AS Cash, cs.WebImgName As WebImgName,
		i.ResSex AS ResSex, i.ResLevel AS ResLevel, i.Weight AS Weight,
		i.Damage AS Damage, i.Delay AS Delay, i.Controllability AS Controllability,
		i.Magazine AS Magazine, i.MaxBullet AS MaxBullet, i.ReloadTime AS ReloadTime, 
		i.HP AS HP, i.AP AS AP,	i.MAXWT AS MaxWeight, i.LimitSpeed AS LimitSpeed,
		i.FR AS FR, i.CR AS CR, i.PR AS PR, i.LR AS LR,
		i.Description AS Description, cs.NewItemOrder AS IsNewItem,
		cs.RentType AS RentType
	FROM CashShop cs(nolock), Item i(nolock)
	WHERE i.ItemID = cs.ItemID AND cs.csid = @CSID


GO
SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

--------------------------------------------------------------------------

SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO

/* 아이템 리스트 가져오기 */
CREATE PROC [spGetCashItemList]
	@ItemType	int,
	@Page		int,		
	@PageCount	int OUTPUT
AS
SET NoCount On

DECLARE @Rows int
DECLARE @ViewCount int

SELECT @Rows = @Page * 8	/* 한페이지에 8개씩 보여준다 */

DECLARE @PageSize INT
SELECT @PageSize = 8

DECLARE @PageHead INT
DECLARE @RowCount INT


IF @ItemType = 1 /* 근접무기 */
BEGIN

	SELECT @PageCount = (COUNT(*) + (@PageSize-1)) / @PageSize
	FROM CashShop cs(nolock), Item i(nolock)
	WHERE i.ItemID = cs.ItemID AND i.Slot = 1 AND cs.Opened=1

	SELECT @RowCount = ((@Page -1) * @PageSize + 1)

	SET ROWCOUNT @RowCount
	SELECT @PageHead = cs.csid FROM CashShop cs(NOLOCK), Item i(nolock) 
	WHERE cs.ItemID=i.ItemID AND i.Slot=1 AND cs.Opened=1
	ORDER BY cs.csid DESC

	SET ROWCOUNT @PageSize
	SELECT cs.csid AS CSID, i.name AS Name, i.Slot AS Slot,
		cs.CashPrice AS Cash, cs.WebImgName As WebImgName,
		i.ResSex AS ResSex, i.ResLevel AS ResLevel, i.Weight AS Weight,
		i.Description AS Description, cs.RegDate As RegDate, cs.NewItemOrder AS IsNewItem,
		cs.RentType AS RentType
	FROM CashShop cs(nolock), Item i(nolock)
	WHERE csid <= @PageHead AND i.ItemID = cs.ItemID AND i.Slot = 1 AND cs.Opened=1
	ORDER BY cs.csid DESC

END
ELSE
IF @ItemType=2 		/* 원거리무기 */
BEGIN

	SELECT @PageCount = (COUNT(*) + (@PageSize-1)) / @PageSize
	FROM CashShop cs(nolock), Item i(nolock)
	WHERE i.ItemID = cs.ItemID AND i.Slot = 2 AND cs.Opened=1

	SELECT @RowCount = ((@Page -1) * @PageSize + 1)

	SET ROWCOUNT @RowCount
	SELECT @PageHead = cs.csid FROM CashShop cs(NOLOCK), Item i(nolock) 
	WHERE cs.ItemID=i.ItemID AND i.Slot=2 AND cs.Opened=1
	ORDER BY cs.csid DESC

	SET ROWCOUNT @PageSize
	SELECT cs.csid AS CSID, i.name AS Name, i.Slot AS Slot,
		cs.CashPrice AS Cash, cs.WebImgName As WebImgName,
		i.ResSex AS ResSex, i.ResLevel AS ResLevel, i.Weight AS Weight,
		i.Description AS Description, cs.RegDate As RegDate, cs.NewItemOrder AS IsNewItem,
		cs.RentType AS RentType
	FROM CashShop cs(nolock), Item i(nolock)
	WHERE csid <= @PageHead AND i.ItemID = cs.ItemID AND i.Slot = 2 AND cs.Opened=1
	ORDER BY cs.csid DESC

END
ELSE
IF @ItemType=3 		/* 방어구 */
BEGIN

	SELECT @PageCount = (COUNT(*) + (@PageSize-1)) / @PageSize
	FROM CashShop cs(nolock), Item i(nolock)
	WHERE i.ItemID = cs.ItemID AND i.Slot BETWEEN 4 AND 8 AND cs.Opened=1

	SELECT @RowCount = ((@Page -1) * @PageSize + 1)

	SET ROWCOUNT @RowCount
	SELECT @PageHead = cs.csid FROM CashShop cs(NOLOCK), Item i(nolock) 
	WHERE cs.ItemID=i.ItemID AND i.Slot BETWEEN 4 AND 8 AND cs.Opened=1
	ORDER BY cs.csid DESC

	SET ROWCOUNT @PageSize
	SELECT cs.csid AS CSID, i.name AS Name, i.Slot AS Slot,
		cs.CashPrice AS Cash, cs.WebImgName As WebImgName,
		i.ResSex AS ResSex, i.ResLevel AS ResLevel, i.Weight AS Weight,
		i.Description AS Description, cs.RegDate As RegDate, cs.NewItemOrder AS IsNewItem,
		cs.RentType AS RentType
	FROM CashShop cs(nolock), Item i(nolock)
	WHERE csid <= @PageHead AND i.ItemID = cs.ItemID AND i.Slot BETWEEN 4 AND 8 AND cs.Opened=1
	ORDER BY cs.csid DESC

END
ELSE
IF @ItemType=4 		/* 특수아이템 */
BEGIN

	SELECT @PageCount = (COUNT(*) + (@PageSize-1)) / @PageSize
	FROM CashShop cs(nolock), Item i(nolock)
	WHERE i.ItemID = cs.ItemID AND (i.Slot = 3 OR i.Slot=9) AND cs.Opened=1

	SELECT @RowCount = ((@Page -1) * @PageSize + 1)

	SET ROWCOUNT @RowCount
	SELECT @PageHead = cs.csid FROM CashShop cs(NOLOCK), Item i(nolock) 
	WHERE cs.ItemID=i.ItemID AND (i.Slot = 3 OR i.Slot=9) AND cs.Opened=1
	ORDER BY cs.csid DESC

	SET ROWCOUNT @PageSize
	SELECT cs.csid AS CSID, i.name AS Name, i.Slot AS Slot,
		cs.CashPrice AS Cash, cs.WebImgName As WebImgName,
		i.ResSex AS ResSex, i.ResLevel AS ResLevel, i.Weight AS Weight,
		i.Description AS Description, cs.RegDate As RegDate, cs.NewItemOrder AS IsNewItem,
		cs.RentType AS RentType
	FROM CashShop cs(nolock), Item i(nolock)
	WHERE csid <= @PageHead AND i.ItemID = cs.ItemID AND (i.Slot = 3 OR i.Slot=9) AND cs.Opened=1
	ORDER BY cs.csid DESC

END

SET ROWCOUNT 0






GO
SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

--------------------------------------------------------------------------

SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO

/* 세트 아이템의 세부아이템 목록 보기 */
CREATE PROC [spGetCashSetItemComposition]
	@CSSID		int,
	@OutRowCount	int OUTPUT
AS
SET NOCOUNT ON

SELECT @OutRowCount = COUNT(*)
FROM CashSetItem csi(nolock), CashShop cs(nolock), Item i(nolock)
WHERE @CSSID = csi.CSSID AND csi.csid = cs.csid	AND cs.ItemID = i.ItemID

SELECT cs.csid AS CSID, i.name AS Name, i.Slot AS Slot, 
	cs.CashPrice AS Cash, cs.WebImgName As WebImgName,
	i.ResSex AS ResSex, i.ResLevel AS ResLevel, i.Weight AS Weight,
	i.Description AS Description, cs.RegDate As RegDate,
	cs.NewItemOrder AS IsNewItem

FROM CashSetItem csi(nolock), CashShop cs(nolock), Item i(nolock)
WHERE @CSSID = csi.CSSID AND csi.csid = cs.csid	AND cs.ItemID = i.ItemID



GO
SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

--------------------------------------------------------------------------

SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO


-- 캐쉬 세트아이템 이미지파일 알아오기
CREATE PROC [spGetCashSetItemImageFile]
	@CSSID			int
,	@RetImageFileName	varchar(64) OUTPUT
AS
SET NOCOUNT ON

SELECT @RetImageFileName=WebImgName FROM CashSetShop css(nolock) WHERE CSSID=@CSSID

RETURN 1

GO
SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

--------------------------------------------------------------------------

SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO

/* 세트아이템의 상세 정보 보기 */
CREATE  PROC [spGetCashSetItemInfo]
	@CSSID	int
AS
	SET NOCOUNT ON

	SELECT CSSID AS CSSID, Name AS Name, CashPrice AS Cash, WebImgName AS WebImgName, 
	ResSex AS ResSex, ResLevel AS ResLevel, Weight AS Weight,
	Description AS Description, NewItemOrder As IsNewItem, RentType AS RentType

	FROM CashSetShop css(nolock)
	WHERE CSSID = @CSSID


GO
SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

--------------------------------------------------------------------------

SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO

/* 세트아이템 목록 보기 */
CREATE PROC [spGetCashSetItemList]
	@Page		int,
	@PageCount	int OUTPUT
AS
SET NoCount On
DECLARE @Rows int
DECLARE @ViewCount int

DECLARE @PageSize INT
SELECT @PageSize = 8		/* 한페이지에 8개씩 보여준다 */

DECLARE @PageHead INT
DECLARE @RowCount INT

SELECT @PageCount = (COUNT(*) + (@PageSize-1)) / @PageSize FROM CashSetShop css(nolock) WHERE css.Opened=1
SELECT @RowCount = ((@Page -1) * @PageSize + 1)

SET ROWCOUNT @RowCount
SELECT @PageHead = css.CSSID FROM CashSetShop css(nolock)
WHERE css.Opened=1
ORDER BY css.cssid DESC


SET ROWCOUNT @PageSize
SELECT CSSID AS CSSID, Name AS Name, CashPrice AS Cash, WebImgName AS WebImgName, 
	ResSex AS ResSex, ResLevel AS ResLevel, Weight AS Weight,
	Description AS Description, RegDate AS RegDate, NewItemOrder AS IsNewItem,
	RentType AS RentType
FROM CashSetShop css(nolock)
WHERE cssid <= @PageHead AND css.Opened=1
ORDER BY css.cssid DESC


SET ROWCOUNT 0


GO
SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

--------------------------------------------------------------------------

SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO

CREATE  PROC [spGetNewCashItem]
	@ItemCount	int 	= 0
AS
SET NoCount On

IF @ItemCount != 0
BEGIN
	SET ROWCOUNT @ItemCount
END

	SELECT cs.csid AS CSID, i.name AS Name, i.Slot AS Slot, 
		cs.CashPrice AS Cash, cs.WebImgName As WebImgName,
		i.ResSex AS ResSex, i.ResLevel AS ResLevel, i.Weight AS Weight,
		i.Description AS Description, cs.RentType AS RentType
	FROM CashShop cs (nolock) , Item i (nolock)
	WHERE i.ItemID = cs.ItemID AND cs.NewItemOrder > 0 AND Opened=1 
	order by cs.NewItemOrder asc


GO
SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

--------------------------------------------------------------------------

CREATE PROC [spInsertCharItem]
	@CID			int,
	@ItemID			int,
	@RentHourPeriod 	smallint = NULL
AS
DECLARE @OrderCIID	int
DECLARE @RentDate 	datetime

-- @RentHourPeriod값을 가지고 기간제인지 검사.
IF @RentHourPeriod = 0 OR @RentHourPeriod IS NULL
BEGIN
	SET @RentDate = NULL
	SET @RentHourPeriod = NULL
END
ELSE
BEGIN
	SET @RentDate = GETDATE()
END

INSERT INTO CharacterItem (CID, ItemID, RegDate, RentDate, RentHourPeriod) Values (@CID, @ItemID, GETDATE(), @RentDate, @RentHourPeriod)

SET @OrderCIID = @@IDENTITY
SELECT @OrderCIID as ORDERCIID


GO

--------------------------------------------------------------------------

SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO

-- 퀘스트 유니크 아이템 저장 프로시져.
CREATE PROC spInsertQUniqueItemLog
	@QGLID int
,	@CID int
,	@QIID int
AS
BEGIN
	SET NOCOUNT ON
	INSERT INTO QUniqueItemLog(QGLID, CID, QIID) VALUES (@QGLID, @CID, @QIID)
END


GO
SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

--------------------------------------------------------------------------

SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO

/* 아이템 검색 */
CREATE  PROC [spSearchCashItem]
	@Slot		tinyint,
	@ResSex		tinyint,
	@ResMinLevel	int = NULL,
	@ResMaxLevel	int = NULL,
	@ItemName	varchar(256) = '',
	@Page		int = 1,
	@PageCount	int OUTPUT
AS
SET NOCOUNT ON

SELECT @PageCount = 1

SELECT cs.csid AS CSID, i.name AS Name, i.Slot AS Slot, cs.CashPrice AS Cash, 
cs.WebImgName AS WebImgName, i.ResSex AS ResSex, i.ResLevel AS ResLevel, i.Weight AS Weight, 
i.Description AS Description, cs.NewItemOrder AS IsNewItem, cs.RentType AS RentType FROM CashShop cs(nolock), Item i(nolock) 
WHERE i.ItemID = cs.ItemID AND i.Name=@ItemName AND cs.Opened=1
ORDER BY cs.csid DESC


GO
SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

--------------------------------------------------------------------------

SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO

/* 아이템 검색 */
CREATE  PROC [spSearchCashItem2]
	@Slot		tinyint,
	@ResSex		tinyint,
	@ResMinLevel	int = NULL,
	@ResMaxLevel	int = NULL,
	@ItemName	varchar(256) = '',
	@Page		int = 1,
	@PageCount	int OUTPUT
AS
SET NOCOUNT ON

SELECT @PageCount = 1

SELECT cs.csid AS CSID, i.name AS Name, i.Slot AS Slot, cs.CashPrice AS Cash, 
cs.WebImgName AS WebImgName, i.ResSex AS ResSex, i.ResLevel AS ResLevel, i.Weight AS Weight, 
i.Description AS Description, cs.NewItemOrder AS IsNewItem, cs.RentType AS RentType FROM CashShop cs(nolock), Item i(nolock) 
WHERE i.ItemID = cs.ItemID AND i.Name=@ItemName AND cs.Opened=1
ORDER BY cs.csid DESC


GO
SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

--------------------------------------------------------------------------

SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO

/* 중앙은행 아이템 보기 */
CREATE PROC [spSelectAccountItem]
	@AID			int
AS
SET NOCOUNT ON

DECLARE @NowTime DATETIME
SELECT @NowTime = GETDATE()

SELECT AIID, ItemID, (RentHourPeriod*60) - (DateDiff(n, RentDate, @NowTime)) AS RentPeriodRemainder
FROM AccountItem(NOLOCK)
WHERE AID=@AID ORDER BY AIID



GO
SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

--------------------------------------------------------------------------

SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO

/* 캐릭터 아이템 보기 */
CREATE PROC [spSelectCharItem]
	@CID		int
AS
SET NOCOUNT ON

DECLARE @NowTime DATETIME
SELECT @NowTime = GETDATE()

SELECT CIID, ItemID, (RentHourPeriod*60) - (DateDiff(n, RentDate, @NowTime)) AS RentPeriodRemainder
FROM CharacterItem (nolock)
WHERE CID=@CID ORDER BY CIID



GO
SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

--------------------------------------------------------------------------

SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO

CREATE  PROC spSelectCharQuestItemInfoByCID
	@CID	int
AS
BEGIN
	SET NOCOUNT ON
	SELECT QuestItemInfo FROM Character (NOLOCK) WHERE CID = @CID
END

GO
SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

--------------------------------------------------------------------------

SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO

/* 아이템 장비 */
CREATE PROC [spUpdateEquipItem]
	@CID			int,
	@ItemParts		int,
	@CIID			int,
	@ItemID			int
AS

SET NoCount ON

DECLARE @Ret int
DECLARE @IF_CIID	int

SELECT @Ret = 1

-- Head
IF @ItemParts = 0
BEGIN
	IF @CIID = 0
	BEGIN
		UPDATE Character SET head_slot=NULL, head_itemid=NULL WHERE CID=@CID
	END
	ELSE
	BEGIN
		UPDATE Character SET head_slot=@CIID, head_itemid=@ItemID WHERE CID=@CID
	END
END
-- Chest
ELSE IF @ItemParts = 1
BEGIN
	IF @CIID = 0
	BEGIN
		UPDATE Character SET chest_slot=NULL, chest_itemid=NULL WHERE CID=@CID
	END
	ELSE
	BEGIN
		UPDATE Character SET chest_slot=@CIID, chest_itemid=@ItemID WHERE CID=@CID
	END
END
-- Hands
ELSE IF @ItemParts = 2
BEGIN
	IF @CIID = 0
	BEGIN
		UPDATE Character SET hands_slot=NULL, hands_itemid=NULL WHERE CID=@CID
	END
	ELSE
	BEGIN
		UPDATE Character SET hands_slot=@CIID, hands_itemid=@ItemID WHERE CID=@CID
	END
END
-- Legs
ELSE IF @ItemParts = 3
BEGIN
	IF @CIID = 0
	BEGIN
		UPDATE Character SET legs_slot=NULL, legs_itemid=NULL WHERE CID=@CID
	END
	ELSE
	BEGIN
		UPDATE Character SET legs_slot=@CIID, legs_itemid=@ItemID WHERE CID=@CID
	END
END
-- Feet
ELSE IF @ItemParts = 4
BEGIN
	IF @CIID = 0
	BEGIN
		UPDATE Character SET feet_slot=NULL, feet_itemid=NULL WHERE CID=@CID
	END
	ELSE
	BEGIN
		UPDATE Character SET feet_slot=@CIID, feet_itemid=@ItemID WHERE CID=@CID
	END
END
-- FingerL
ELSE IF @ItemParts = 5
BEGIN
	IF @CIID = 0
	BEGIN
		UPDATE Character SET fingerl_slot=NULL, fingerl_itemid=NULL WHERE CID=@CID
	END
	ELSE
	BEGIN
		SELECT @IF_CIID = fingerr_slot FROM Character(nolock) WHERE CID=@CID
		IF (@IF_CIID IS NOT NULL) AND (@IF_CIID = @CIID)
		BEGIN
			SELECT @Ret = 0
		END
		ELSE
		BEGIN
			UPDATE Character SET fingerl_slot=@CIID, fingerl_itemid=@ItemID WHERE CID=@CID
		END
	END
END
-- FingerR
ELSE IF @ItemParts = 6
BEGIN
	IF @CIID = 0
	BEGIN
		UPDATE Character SET fingerr_slot=NULL, fingerr_itemid=NULL WHERE CID=@CID
	END
	ELSE
	BEGIN
		SELECT @IF_CIID = fingerl_slot FROM Character(nolock) WHERE CID=@CID
		IF (@IF_CIID IS NOT NULL) AND (@IF_CIID = @CIID)
		BEGIN
			SELECT @Ret = 0
		END
		ELSE
		BEGIN
			UPDATE Character SET fingerr_slot=@CIID, fingerr_itemid=@ItemID WHERE CID=@CID
		END
	END
END
-- Melee
ELSE IF @ItemParts = 7
BEGIN
	IF @CIID = 0
	BEGIN
		UPDATE Character SET melee_slot=NULL, melee_itemid=NULL WHERE CID=@CID
	END
	ELSE
	BEGIN
		UPDATE Character SET melee_slot=@CIID, melee_itemid=@ItemID WHERE CID=@CID
	END
END
-- Primary
ELSE IF @ItemParts = 8
BEGIN
	IF @CIID = 0
	BEGIN
		UPDATE Character SET primary_slot=NULL, primary_itemid=NULL WHERE CID=@CID
	END
	ELSE
	BEGIN
		SELECT @IF_CIID = secondary_slot FROM Character(nolock) WHERE CID=@CID
		IF (@IF_CIID IS NOT NULL) AND (@IF_CIID = @CIID)
		BEGIN
			SELECT @Ret = 0
		END
		ELSE
		BEGIN
			UPDATE Character SET primary_slot=@CIID, primary_itemid=@ItemID WHERE CID=@CID
		END
	END
END
-- Secondary
ELSE IF @ItemParts = 9
BEGIN
	IF @CIID = 0
	BEGIN
		UPDATE Character SET secondary_slot=NULL, secondary_itemid=NULL WHERE CID=@CID
	END
	ELSE
	BEGIN
		SELECT @IF_CIID = primary_slot FROM Character(nolock) WHERE CID=@CID
		IF (@IF_CIID IS NOT NULL) AND (@IF_CIID = @CIID)
		BEGIN
			SELECT @Ret = 0
		END
		ELSE
		BEGIN
			UPDATE Character SET secondary_slot=@CIID, secondary_itemid=@ItemID WHERE CID=@CID
		END
	END
END
-- Custom1
ELSE IF @ItemParts = 10
BEGIN
	IF @CIID = 0
	BEGIN
		UPDATE Character SET custom1_slot=NULL, custom1_itemid=NULL WHERE CID=@CID
	END
	ELSE
	BEGIN
		SELECT @IF_CIID = custom2_slot FROM Character(nolock) WHERE CID=@CID
		IF (@IF_CIID IS NOT NULL) AND (@IF_CIID = @CIID)
		BEGIN
			SELECT @Ret = 0
		END
		ELSE
		BEGIN
			UPDATE Character SET custom1_slot=@CIID, custom1_itemid=@ItemID WHERE CID=@CID
		END
	END
END
-- Custom2
ELSE IF @ItemParts = 11
BEGIN
	IF @CIID = 0
	BEGIN
		UPDATE Character SET custom2_slot=NULL, custom2_itemid=NULL WHERE CID=@CID
	END
	ELSE
	BEGIN
		SELECT @IF_CIID = custom1_slot FROM Character(nolock) WHERE CID=@CID
		IF (@IF_CIID IS NOT NULL) AND (@IF_CIID = @CIID)
		BEGIN
			SELECT @Ret = 0
		END
		ELSE
		BEGIN
			UPDATE Character SET custom2_slot=@CIID, custom2_itemid=@ItemID WHERE CID=@CID
		END
	END
END



SELECT @Ret AS Ret


GO
SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

--------------------------------------------------------------------------

SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO


-- 이미지 파일 이름과 아이템 이름을 가져옴.
CREATE PROC spWebGetCashItemImageFile
	@CSID int
,	@RetImageFileName varchar(64) OUT
,	@RetItemName varchar(256) OUT
AS
BEGIN
	SET NOCOUNT ON
	SELECT @RetImageFileName = cs.WebImgName, @RetItemName = i.Name
	FROM CashShop cs(NOLOCK), Item i(NOLOCK)
	WHERE cs.CSID = @CSID AND i.ItemID = cs.ItemID

	RETURN 1
END

GO
SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

--------------------------------------------------------------------------

SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO


-- 캐쉬 세트아이템 이미지파일과 아이템 이름 알아오기.
CREATE PROC [spWebGetCashSetItemImageFile]
 	@CSSID   int  
, 	@RetImageFileName varchar(64) OUTPUT  
,	@RetSetItemName varchar(64) OUTPUT
AS  
SET NOCOUNT ON
BEGIN
	SELECT @RetImageFileName = css.WebImgName, @RetSetItemName = css.Name
	FROM CashSetShop css(NOLOCK)
	WHERE css.CSSID=@CSSID  
  
	RETURN 1  
END

GO
SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

--------------------------------------------------------------------------

SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO


-- 캐쉬아이템 사용기록
CREATE     PROC [spWebItemUseLog]
	@UserID		VARCHAR(32)
AS
SET NOCOUNT ON
BEGIN

	DECLARE @TargetAID INT
	SELECT @TargetAID = AID FROM Account(NOLOCK) WHERE UserID=@UserID

	SELECT l.AID, l.CID, c.Name AS CharName, i.ItemID, i.Name AS ItemName, l.Date, c.DeleteName 
	FROM BringAccountItemLog l(NOLOCK), Item i(NOLOCK), Character c(NOLOCK)
	WHERE l.AID=@TargetAID AND l.CID=c.CID AND l.ItemID=i.ItemID
	ORDER BY  Date DESC
END



GO
SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

--------------------------------------------------------------------------

SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO

CREATE   PROC [spBuyBountyItem]
	@CID		INT,
	@ItemID		INT,
	@Price		INT
AS
SET NOCOUNT ON
BEGIN
	DECLARE @OrderCIID	int
	DECLARE @Bounty	INT

	BEGIN TRAN
		-- 잔액검사
		SELECT @Bounty=BP FROM Character(NOLOCK) WHERE CID=@CID
		IF @Bounty IS NULL OR @Bounty < @Price
		BEGIN
			ROLLBACK TRAN
			RETURN 0
		END

		-- Bounty 감소
		UPDATE Character SET BP=BP-@Price WHERE CID=@CID
		IF 0 = @@ROWCOUNT
		BEGIN
			ROLLBACK TRAN
			RETURN (-1)
		END

		-- Item 추가
		INSERT INTO CharacterItem (CID, ItemID, RegDate) Values (@CID, @ItemID, GETDATE())
		IF 0 <> @@ERROR
		BEGIN
			ROLLBACK TRAN
			RETURN (-1)
		END

		SELECT @OrderCIID = @@IDENTITY
		
		-- Item 구매로그 추가
		INSERT INTO ItemPurchaseLogByBounty (ItemID, CID, Date, Bounty, CharBounty, Type)
		VALUES (@ItemID, @CID, GETDATE(), @Price, @Bounty, '구입')
		IF 0 <> @@ERROR BEGIN
			ROLLBACK TRAN
			RETURN (-1)
		END

		SELECT @OrderCIID as ORDERCIID
	COMMIT TRAN

	RETURN 1
END



GO
SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

--------------------------------------------------------------------------

SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO

-- cash shop에서 거래된 아이템을 accountitme에 추가.
CREATE   PROC [spBuyCashItem]
	@UserID		varchar(20),
	@CSID		int,
	@Cash		int,
	@RentHourPeriod smallint = NULL,
	@MobileCode char(16) = NULL
AS
	SET NoCount On

	DECLARE @AID		int
	DECLARE @ItemID		int

	-- Account 검사
	SELECT @AID = AID FROM Account WHERE UserID = @UserID
	IF @AID IS NULL
	BEGIN
		RETURN 0
	END
	ELSE
	BEGIN
		SELECT @ItemID = ItemID FROM CashShop cs (NOLOCK) WHERE cs.CSID = @CSID

		IF @ItemID IS NOT NULL
		BEGIN 
			DECLARE @RentDate	datetime

			-- @RentHourPeriod값을 가지고 기간제인지 검사.
			IF @RentHourPeriod = 0 OR @RentHourPeriod IS NULL
			BEGIN
				-- 기간제 아이템일 경우 영구 아이템 판매 여부 검사
				DECLARE @RentType 	TINYINT
				DECLARE @RCSPID		INT

				SELECT @RentType = RentType FROM CashShop WHERE CSID=@CSID
				IF @RentType = 1
				BEGIN
					SELECT @RCSPID = RCSPID FROM RentCashShopPrice WHERE CSID=@CSID AND RentHourPeriod is NULL
					IF @RCSPID IS NULL
					BEGIN
						RETURN 0
					END
				END

				-- 일반 아이템인 경우
				SET @RentDate = NULL
			END
			ELSE
			BEGIN
				SET @RentDate = GETDATE()
			END


			BEGIN TRAN
			
				-- 아이템 생성.
				INSERT INTO accountitem(AID, ItemID, RentDate, RentHourPeriod) 
				VALUES (@AID, @ItemID, @RentDate, @RentHourPeriod)

				IF @@ERROR <> 0
				BEGIN
					ROLLBACK
					RETURN 0
				END
	
				-- 아이템 거래 log생성.
				INSERT INTO ItemPurchaseLogByCash(AID, ItemID, Date, RentHourPeriod, Cash, MobileCode) 
				VALUES (@AID, @ItemID, GETDATE(), @RentHourPeriod, @Cash, @MobileCode)
				
				IF @@ERROR <> 0
				BEGIN
					ROLLBACK
					RETURN 0
				END
				
			COMMIT TRAN

			RETURN 1

		END	
		ELSE
		BEGIN
			RETURN 0
		END
	END

	RETURN 1


GO

SET QUOTED_IDENTIFIER OFF 
GO

SET ANSI_NULLS ON 
GO

--------------------------------------------------------------------------

SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO

-- cash set shop에서 거래된 아이템을 accountitme에 추가.
CREATE    PROC [spBuyCashSetItem]
	@UserID		varchar(20),
	@CSSID		int,
	@Cash		int,
	@RentHourPeriod smallint = NULL,
	@MobileCode char(16) = NULL
AS
	SET NoCount On

	DECLARE @AID		int
	
	SELECT @AID = AID FROM Account WHERE UserID = @UserID

	-- 존제하는 유저인지 검사.
	IF @AID IS NULL
	BEGIN
		RETURN 0
	END
	ELSE
	BEGIN
		DECLARE @RentDate		datetime			

		-- @RentHourPeriod값을 가지고 기간제인지 검사.
		IF @RentHourPeriod = 0 OR @RentHourPeriod IS NULL
		BEGIN
			-- 기간제 아이템일 경우 영구 아이템 판매 여부 검사
			DECLARE @RentType 	TINYINT
			DECLARE @RCSSPID		INT

			SELECT @RentType = RentType FROM CashSetShop WHERE CSSID=@CSSID
			IF @RentType = 1
			BEGIN
				SELECT @RCSSPID=RCSSPID FROM RentCashSetShopPrice WHERE CSSID=@CSSID AND RentHourPeriod is NULL
				IF @RCSSPID IS NULL
				BEGIN
					RETURN 0
				END
			END

			-- 일반 아이템일 경우
			SET @RentDate = NULL
		END
		ELSE
		BEGIN
			SET @RentDate = GETDATE()
		END



		BEGIN TRAN

			DECLARE curBuyCashSetItem 	INSENSITIVE CURSOR
			FOR
				SELECT CSID FROM CashSetItem (NOLOCK) WHERE CSSID = @CSSID
			FOR READ ONLY
	
			OPEN curBuyCashSetItem 
	
			DECLARE @varCSID		int
			DECLARE @ItemID			int
	
			FETCH FROM curBuyCashSetItem INTO @varCSID
	
			WHILE @@FETCH_STATUS = 0
			BEGIN
				SELECT @ItemID = cs.ItemID
				FROM CashShop cs (NOLOCK) 
				WHERE cs.CSID = @varCSID 
	
				IF @ItemID IS NOT NULL
				BEGIN
					-- 아이템 생성.
					INSERT INTO AccountItem(AID, ItemID, RentDate, RentHourPeriod)
					VALUES (@AID, @ItemID, @RentDate, @RentHourPeriod)
					
					IF @@ERROR <> 0
					BEGIN
						ROLLBACK
						CLOSE curBuyCashSetItem 
						DEALLOCATE curBuyCashSetItem 
						RETURN 0
					END					
				END
	
				FETCH curBuyCashSetItem  INTO @varCSID
			END
	
			CLOSE curBuyCashSetItem 
			DEALLOCATE curBuyCashSetItem 
	
			-- 셋트 아이템 구입 로그.
			INSERT INTO SetItemPurchaseLogByCash (AID, CSSID, Date, RentHourPeriod, Cash, MobileCode)
			VALUES (@AID, @CSSID, GETDATE(), @RentHourPeriod, @Cash, @MobileCode)

			IF @@ERROR <> 0
			BEGIN
				ROLLBACK
				RETURN 0
			END
							
		COMMIT TRAN
		RETURN 1
	END
GO
SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

--------------------------------------------------------------------------

SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO

/* 일반 아이템 구매가능인지 확인하기 */
CREATE PROC [spConfirmBuyCashItem]
	@UserID								varchar(20),
	@CSID									int,
	@RetEnableBuyItem			int OUTPUT,
	@RetRepeatBuySameItem	int OUTPUT
AS
SET NoCount On
	
DECLARE @AID		int
DECLARE @ItemID	int
DECLARE @AIID		int


SELECT @AID = AID FROM Account(nolock) where UserID = @UserID
SELECT @ItemID = ItemID FROM CashShop(nolock) WHERE CSID=@CSID

IF @AID IS NULL
BEGIN
	SELECT @RetEnableBuyItem = 0
	SELECT @RetRepeatBuySameItem = 0
END
ELSE
BEGIN
	SELECT @RetEnableBuyItem = 1


	IF (@ItemID IS NOT NULL)
	BEGIN
		SELECT TOP 1 @AIID = AIID FROM AccountItem(nolock) WHERE AID=@AID AND ItemID=@ItemID
		IF (@AIID IS NOT NULL)
		BEGIN
			SELECT @RetRepeatBuySameItem = 1
		END
		ELSE
		BEGIN
			SELECT @RetRepeatBuySameItem = 0
		END
	END
	ELSE
	BEGIN
		SELECT @RetRepeatBuySameItem = 0
	END


END


GO
SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

--------------------------------------------------------------------------

SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO



/* 세트 아이템 구매가능인지 확인하기 */
CREATE PROC [spConfirmBuyCashSetItem]
	@UserID								varchar(20),
	@CSSID								int,
	@RetEnableBuyItem			int OUTPUT,
	@RetRepeatBuySameItem	int OUTPUT
AS
SET NoCount On
	
DECLARE @AID		int
DECLARE @SIL_ID	int
DECLARE @LAST_ID int

SELECT @AID = AID FROM Account(nolock) where UserID = @UserID


IF @AID IS NULL
BEGIN
	SELECT @RetEnableBuyItem = 0
	SELECT @RetRepeatBuySameItem = 0
END
ELSE
BEGIN
	SELECT @RetEnableBuyItem = 1

	SELECT TOP 1 @LAST_ID = id FROM SetItemPurchaseLogByCash spl(nolock) order by id desc

	SELECT TOP 1 @SIL_ID = id FROM SetItemPurchaseLogByCash spl(nolock) 
	WHERE id > (@LAST_ID-10000) AND AID=@AID AND CSSID=@CSSID

	IF (@SIL_ID IS NOT NULL)
	BEGIN
		SELECT @RetRepeatBuySameItem = 1
	END
	ELSE
	BEGIN
		SELECT @RetRepeatBuySameItem = 0
	END

END


GO
SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

--------------------------------------------------------------------------

SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO


/* 아이템 구매(바운티) 로그 */
CREATE PROC [spInsertItemPurchaseLogByBounty]
	@ItemID		int,
	@CID		int,
	@Bounty		int,
	@CharBounty	int,
	@Type		varchar(20)
AS
SET NOCOUNT ON
INSERT INTO ItemPurchaseLogByBounty
	(ItemID, CID, Date, Bounty, CharBounty, Type)
VALUES
	(@ItemID, @CID, GETDATE(), @Bounty, @CharBounty, @Type)

GO
SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

--------------------------------------------------------------------------

SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO

-- 단일 아이템 선물하기
CREATE  PROC [spPresentCashItem]
	@SenderUserID	varchar(20)
,	@ReceiverUserID	varchar(20)
,	@CSID		int
,	@Cash		int
,	@RentHourPeriod	smallint = NULL
,	@MobileCode char(16) = NULL
AS
	SET NoCount On

	DECLARE	@ItemID		int
	DECLARE @ReceiverAID	int

	SELECT @ReceiverAID = AID FROM Account (NOLOCK) WHERE UserID = @ReceiverUserID
	
	IF @ReceiverAID IS NULL
	BEGIN
		RETURN 0
	END
	ELSE
	BEGIN
		DECLARE @RentDate	datetime
		-- @RentHourPeriod값을 가지고 기간제인지 검사.
		IF @RentHourPeriod = 0 OR @RentHourPeriod IS NULL
		BEGIN
			-- 기간제 아이템일 경우 영구 아이템 판매 여부 검사
			DECLARE @RentType 	TINYINT
			DECLARE @RCSPID		INT

				SELECT @RentType = RentType FROM CashShop WHERE CSID=@CSID
			IF @RentType = 1
			BEGIN
				SELECT @RCSPID = RCSPID FROM RentCashShopPrice WHERE CSID=@CSID AND RentHourPeriod is NULL
				IF @RCSPID IS NULL
				BEGIN
					RETURN 0
				END
			END

			-- 일반 아이템인 경우
			SET @RentDate = NULL
		END
		ELSE
		BEGIN
			SET @RentDate = GETDATE()
		END


		SELECT @ItemID = ItemID FROM CashShop (NOLOCK) WHERE CSID = @CSID

		IF @ItemID IS NOT NULL
		BEGIN
			BEGIN TRAN
			
				-- 아이템 생성.
				INSERT INTO AccountItem (AID, ItemID, RentDate, RentHourPeriod)
				VALUES (@ReceiverAID, @ItemID, @RentDate, @RentHourPeriod)
				
				IF @@ERROR <> 0
				BEGIN
					ROLLBACK
					RETURN 0
				END
									
				-- 선물 로그 생성.
				INSERT INTO CashItemPresentLog (SenderUserID, ReceiverAID, CSID, Date, Cash, RentHourPeriod, MobileCode)
				VALUES (@SenderUserID, @ReceiverAID, @CSID, GETDATE(), @Cash, @RentHourPeriod, @MobileCode)
				
				IF @@ERROR <> 0
				BEGIN
					ROLLBACK
					RETURN 0
				END
					
			COMMIT TRAN
		END
		ELSE
		BEGIN
			RETURN 0
		END

		
		RETURN 1
	END


GO
SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

--------------------------------------------------------------------------

SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO

CREATE  PROC [spPresentCashSetItem]
	@SenderUserID	varchar(20)
,	@ReceiverUserID	varchar(20)
,	@CSSID		int
,	@Cash		int
,	@RentHourPeriod	smallint = NULL
, 	@MobileCode char(16) = NULL
AS
	SET NoCount On

	DECLARE @ReceiverAID	int

	SELECT @ReceiverAID = AID FROM Account WHERE UserID = @ReceiverUserID

	IF @ReceiverAID IS NOT NULL
	BEGIN
		DECLARE @RentDate		datetime			

		-- @RentHourPeriod값을 가지고 기간제인지 검사.
		IF @RentHourPeriod = 0 OR @RentHourPeriod IS NULL
		BEGIN
			-- 기간제 아이템일 경우 영구 아이템 판매 여부 검사
			DECLARE @RentType 	TINYINT
			DECLARE @RCSSPID	INT

			SELECT @RentType = RentType FROM CashSetShop WHERE CSSID=@CSSID
			IF @RentType = 1
			BEGIN
				SELECT @RCSSPID = RCSSPID FROM RentCashSetShopPrice WHERE CSSID=@CSSID AND RentHourPeriod is NULL
				IF @RCSSPID IS NULL
				BEGIN
					RETURN 0
				END
			END

			-- 일반 아이템일 경우
			SET @RentDate = NULL
		END
		ELSE
		BEGIN
			SET @RentDate = GETDATE()
		END


		BEGIN TRAN
			DECLARE curBuyCashSetItem 	INSENSITIVE CURSOR

			FOR
				SELECT CSID FROM CashSetItem WHERE CSSID = @CSSID
			FOR READ ONLY

			OPEN curBuyCashSetItem

			DECLARE @varCSID	int
			DECLARE @ItemID		int

			FETCH FROM curBuyCashSetItem INTO @varCSID

			WHILE @@FETCH_STATUS = 0
			BEGIN
				SELECT @ItemID = ItemID FROM CashShop WHERE CSID = @varCSID

				IF @ItemID IS NOT NULL
				BEGIN	
					-- 아이템 생성.
					INSERT INTO AccountItem (AID, ItemID, RentDate, RentHourPeriod)
					VALUES (@ReceiverAID, @ItemID, @RentDate, @RentHourPeriod)
					
					IF @@ERROR <> 0
					BEGIN
						ROLLBACK
						CLOSE curBuyCashSetItem
						DEALLOCATE curBuyCashSetItem
						RETURN 0
					END					
				END
				
				FETCH FROM curBuyCashSetItem INTO @varCSID
			END

		CLOSE curBuyCashSetItem
		DEALLOCATE curBuyCashSetItem

		-- 셋트아이템 선물 로그 생성.
		INSERT INTO CashItemPresentLog (SenderUserID, ReceiverAID, CSSID, Date, RentHourPeriod, Cash, MobileCode)
		VALUES (@SenderUserID, @ReceiverAID, @CSSID, GETDATE(), @RentHourPeriod, @Cash, @MobileCode)

		IF @@ERROR <> 0
		BEGIN
			ROLLBACK
			RETURN 0
		END
				
		COMMIT TRAN
		RETURN 1

	END
	ELSE
	BEGIN
		RETURN 0
	END


GO
SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

--------------------------------------------------------------------------

SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO

-- 게임내 상점에서 아이템 판매
CREATE   PROC [spSellBountyItem]
	@CID		INT,
	@ItemID		INT,
	@CIID		INT,
	@Price		INT,
	@CharBP		INT
AS
SET NOCOUNT ON
BEGIN
	BEGIN TRAN
		-- Item 삭제
		UPDATE CharacterItem SET CID=NULL WHERE CID=@CID AND CIID=@CIID
		IF (@@ERROR <> 0) OR (@@ROWCOUNT = 0)
		BEGIN
			ROLLBACK
			RETURN (-1)
		END

		-- Bounty 증가
		UPDATE Character SET BP=BP+@Price WHERE CID=@CID
		IF (@@ERROR <> 0) OR (@@ROWCOUNT = 0)
		BEGIN
			ROLLBACK
			RETURN (-1)
		END

		-- Item 판매 로그 추가
		INSERT INTO ItemPurchaseLogByBounty (ItemID, CID, Date, Bounty, CharBounty, Type)
		VALUES (@ItemID, @CID, GETDATE(), @Price, @CharBP, '판매')
		IF 0 <> @@ERROR BEGIN
			ROLLBACK TRAN
			RETURN (-1)
		END

		SELECT 1 as Ret
	COMMIT TRAN

	RETURN 1
END

GO
SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

--------------------------------------------------------------------------

SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO

CREATE PROC spCashShopGetRankedList
	@Category	varchar(32)
	-- @Category : 원거리무기, 근접무기, 특수아이템, 방어구, 세트
AS
SET NOCOUNT ON
BEGIN
	IF (@Category = '세트')
	BEGIN
		SELECT TOP 5 r.Category, r.Rank, r.Name, r.CSID, r.CSSID, r.Slot, r.ResSex, r.ResLevel, r.CashPrice, r.RegDate, s.WebImgName
		FROM CashShopRank r(NOLOCK), CashSetShop s(NOLOCK)
		WHERE r.CSSID=s.CSSID AND Category=@Category AND s.Opened=1
	END
	ELSE
	BEGIN
		SELECT TOP 5 r.Category, r.Rank, r.Name, r.CSID, r.CSSID, r.Slot, r.ResSex, r.ResLevel, r.CashPrice, r.RegDate, s.WebImgName
		FROM CashShopRank r(NOLOCK), CashShop s(NOLOCK)
		WHERE r.CSID=s.CSID AND Category=@Category AND s.Opened=1
	END
END



GO
SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

--------------------------------------------------------------------------


CREATE PROC spCashShopNewItemList
	@IsSetItem		INT
AS
BEGIN
	IF @IsSetItem=0
	BEGIN
		SELECT TOP 4 n.* FROM CashShopNewItem n(NOLOCK), CashShop c(NOLOCK)
		WHERE n.CSID=c.CSID AND c.Opened=1 AND IsSetItem=0 ORDER BY NewOrder
	END
	ELSE
	BEGIN
		SELECT TOP 4 n.* FROM CashShopNewItem n(NOLOCK), CashSetShop c(NOLOCK)
		WHERE n.CSSID=c.CSSID AND c.Opened=1 AND  IsSetItem=1 ORDER BY NewOrder
	END
END
GO

--------------------------------------------------------------------------

SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO

CREATE PROC spCashShopNewItemUpdate
	@NewOrder		INT,
	@IsSetItem		INT,
	@CSID			INT,
	@CSSID			INT
AS
SET NOCOUNT ON
BEGIN

	IF EXISTS(SELECT id FROM CashShopNewItem(NOLOCK) WHERE NewOrder=@NewOrder)
	BEGIN
		DELETE CashShopNewItem WHERE NewOrder=@NewOrder
	END

	IF @IsSetItem = 0
	BEGIN
		INSERT INTO CashShopNewItem (NewOrder, Category, IsSetItem, CSID, CSSID, Slot, Name, ResSex, ResLevel, CashPrice, WebImgName)
		SELECT @NewOrder AS NewOrder, 
			CASE i.Slot 
				WHEN 0 THEN 'no limit'
				WHEN 1 THEN 'melee'
				WHEN 2 THEN 'range'
				WHEN 3 THEN 'special item'
				WHEN 4 THEN 'defence'
				WHEN 5 THEN 'defence'
				WHEN 6 THEN 'defence'
				WHEN 7 THEN 'defence'
				WHEN 8 THEN 'defence'
				WHEN 9 THEN 'defence'
			END AS Category, 
			@IsSetItem, s.CSID, NULL AS CSSID,
			CASE i.Slot 
				WHEN 0 THEN 'no limit'
				WHEN 1 THEN 'melee'
				WHEN 2 THEN 'range'
				WHEN 3 THEN 'item'
				WHEN 4 THEN 'head'
				WHEN 5 THEN 'chest'
				WHEN 6 THEN 'hands'
				WHEN 7 THEN 'legs'
				WHEN 8 THEN 'feet'
				WHEN 9 THEN 'finger'
			END AS Slot, 
			i.Name, i.ResSex, i.ResLevel, CashPrice, s.WebImgName
		FROM CashShop s(NOLOCK), Item i(NOLOCK) 
		WHERE s.ItemID=i.ItemID AND CSID=@CSID
	END
	ELSE
	BEGIN
		INSERT INTO CashShopNewItem (NewOrder, Category, IsSetItem, CSID, CSSID, Slot, Name, ResSex, ResLevel, CashPrice, WebImgName)
		SELECT @NewOrder AS NewOrder, 'set', @IsSetItem, NULL AS CSID, CSSID, 'set' AS Slot, Name, ResSex, ResLevel, CashPrice, WebImgName
		FROM CashSetShop(NOLOCK)
		WHERE CSSID=@CSSID
	END
END

GO
SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

--------------------------------------------------------------------------

SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO

-- 기간제 세트 아이템 상품 가격 보기
CREATE  PROC [spGetRentCashSetShopPrice]
	@CSSID		int
AS
	SET NOCOUNT ON
	SELECT RentHourPeriod, CashPrice 
	FROM RentCashSetShopPrice(nolock) WHERE CSSID = @CSSID
	ORDER BY CashPrice


GO
SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

--------------------------------------------------------------------------

SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO

CREATE PROC [spGetRentCashSetShopPriceByHour]
	@CSSID		int
,	@RentHourPeriod	smallint
AS
	SET NOCOUNT ON
	IF @RentHourPeriod IS NOT NULL
	BEGIN
		-- 기간제 아이템
		SELECT CashPrice
		FROM RentCashSetShopPrice(nolock)
		WHERE CSSID = @CSSID AND RentHourPeriod = @RentHourPeriod
	END
	ELSE IF @RentHourPeriod IS NULL
	BEGIN
		-- 영구 아이템.
		SELECT CashPrice
		FROM RentCashSetShopPrice(nolock)
		WHERE CSSID = @CSSID AND RentHourPeriod IS NULL
	END


GO
SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

--------------------------------------------------------------------------

SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO

-- 기간제 아이템 상품 가격 보기
CREATE PROC [spGetRentCashShopPrice]
	@CSID		int
AS
	SET NOCOUNT ON
	SELECT RentHourPeriod, CashPrice 
	FROM RentCashShopPrice(nolock) WHERE CSID = @CSID
	ORDER BY CashPrice


GO
SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

--------------------------------------------------------------------------

SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO

CREATE   PROC [spGetRentCashShopPriceByHour]
	@CSID		int
,	@RentHourPeriod	smallint
AS
	SET NOCOUNT ON
	IF @RentHourPeriod IS NOT NULL
	BEGIN
		-- 기간제 아이템
		SELECT CashPrice 
		FROM RentCashShopPrice (nolock)
		WHERE CSID = @CSID AND RentHourPeriod = @RentHourPeriod
	END
	ELSE IF @RentHourPeriod IS NULL
	BEGIN
		-- 영구 아이템
		SELECT CashPrice
		FROM RentCashShopPrice (nolock)
		WHERE CSID = @CSID AND RentHourPeriod IS NULL
	END




GO
SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

--------------------------------------------------------------------------

SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO

-- 기간제 세트 아이템 상품 가격 입력
CREATE PROC [spInsertRentCashSetShopPrice]
	@CSSID		int,
	@RentHourPeriod	smallint,
	@CashPrice	int
AS
	SET NOCOUNT ON
	INSERT INTO RentCashSetShopPrice(CSSID, RentHourPeriod, CashPrice) 
	VALUES (@CSSID, @RentHourPeriod, @CashPrice)

GO
SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

--------------------------------------------------------------------------

SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO

-- 기간제 아이템 상품 가격 입력
CREATE PROC [spInsertRentCashShopPrice]
	@CSID			int
,	@RentHourPeriod		smallint
,	@CashPrice		int
AS
	SET NOCOUNT ON
	INSERT INTO RentCashShopPrice (CSID, RentHourPeriod, CashPrice)
	VALUES (@CSID, @RentHourPeriod, @CashPrice)

GO
SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

--------------------------------------------------------------------------

SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO

-- 멤버 추가
CREATE PROC [spAddClanMember]
	@CLID		int,
	@CID		int,
	@Grade		tinyint
AS
	SET NOCOUNT ON
	-- 클랜이 존재하는지 체크
	DECLARE @varClanCount		int

	SELECT @varClanCount=COUNT(*) FROM Clan(nolock) WHERE CLID=@CLID AND ((DeleteFlag IS NULL) OR (DeleteFlag=0))
	IF (@varClanCount = 0)
	BEGIN
		SELECT 0 AS Ret
		return (-1)
	END

	-- 클랜원수 체크
	DECLARE @MemberCount		int

	SELECT @MemberCount=COUNT(*) FROM ClanMember(nolock) WHERE CLID=@CLID
	IF @MemberCount >= 64	-- 최대 64명까지 가능
	BEGIN
		SELECT 0 AS Ret
		return (-1)
	END

	BEGIN TRAN
	INSERT INTO ClanMember (CLID, CID, Grade, RegDate) VALUES (@CLID, @CID, @Grade, GETDATE())
	IF 0 <> @@ERROR BEGIN
		ROLLBACK TRAN
		SELECT 0 AS Ret
		RETURN (-1)
	END
	COMMIT TRAN
	SELECT 1 AS Ret

GO
SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

--------------------------------------------------------------------------

SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO

-- 클랜이 존재하는지 확인하기
CREATE PROC [spConfirmExistClan]
	@ClanName		varchar(24)
AS
	SET NOCOUNT ON
	SELECT COUNT(*) FROM Clan(NOLOCK) WHERE Name=@ClanName

GO
SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

--------------------------------------------------------------------------

SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO

-- 클랜 생성하기
CREATE PROC [spCreateClan]
	@ClanName		varchar(24),
	@MasterCID		int,
	@Member1CID		int,
	@Member2CID		int,
	@Member3CID		int,
	@Member4CID		int
AS
	DECLARE @NewCLID	int

	-- 클랜이름이 중복인지 검사해야한다.
	SELECT @NewCLID=CLID FROM Clan(NOLOCK) WHERE Name=@ClanName

	IF @NewCLID IS NOT NULL
	BEGIN
		SELECT 0 AS Ret, 0 AS NewCLID
		RETURN
	END


	DECLARE @CNT		int

	-- 클랜원이 모두 가입 가능한지 검사해야한다.
	SELECT @CNT = COUNT(*) FROM ClanMember cm(NOLOCK), Character c(NOLOCK) WHERE ((cm.CID=@MasterCID) OR (cm.CID=@Member1CID) OR (cm.CID=@Member2CID) OR (cm.CID=@Member3CID) OR
(cm.CID=@Member4CID) ) AND cm.CID=c.CID AND c.DeleteFlag=0

	IF @CNT != 0
	BEGIN
		SELECT 0 AS Ret, 0 AS NewCLID
		RETURN
	END


	BEGIN TRAN
	-- 클랜 생성
	INSERT INTO Clan (Name, MasterCID, RegDate) VALUES (@ClanName, @MasterCID, GETDATE())
	IF 0 <> @@ERROR BEGIN
		ROLLBACK TRAN
		SELECT 0 AS Ret, 0 AS NewCLID
		RETURN
	END

	SELECT @NewCLID = @@IDENTITY
	IF (@NewCLID IS not NULL)
	BEGIN
		DECLARE @Err1 int
		DECLARE @Err2 int
		DECLARE @Err3 int
		DECLARE @Err4 int
		DECLARE @Err5 int

		-- 클랜원 가입
		INSERT INTO ClanMember (CLID, CID, Grade, RegDate) VALUES (@NewCLID, @MasterCID, 1, GETDATE())
		SET @Err1 = @@ERROR		
		INSERT INTO ClanMember (CLID, CID, Grade, RegDate) VALUES (@NewCLID, @Member1CID, 9, GETDATE())
		SET @Err2 = @@ERROR
		INSERT INTO ClanMember (CLID, CID, Grade, RegDate) VALUES (@NewCLID, @Member2CID, 9, GETDATE())
		SET @Err3 = @@ERROR
		INSERT INTO ClanMember (CLID, CID, Grade, RegDate) VALUES (@NewCLID, @Member3CID, 9, GETDATE())
		SET @Err4 = @@ERROR
		INSERT INTO ClanMember (CLID, CID, Grade, RegDate) VALUES (@NewCLID, @Member4CID, 9, GETDATE())
		SET @Err5 = @@ERROR

		IF (0 <> @Err1) OR (0 <> @Err2) OR (0 <> @Err3) OR (0 <> @Err4) OR (0 <> @Err5) BEGIN
			ROLLBACK TRAN
			SELECT 0 AS Ret, 0 AS NewCLID
			RETURN
		END
	END
	COMMIT TRAN

	-- 마스터 바운티 삭제
	--UPDATE Character SET BP=BP-1000 WHERE CID=@MasterCID


	SELECT 1 AS Ret, @NewCLID AS NewCLID

GO
SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS OFF 
GO

-----------------------------------------------------------------------

SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO


-- 클랜 삭제하기
CREATE PROC [spDeleteClan]
	@CLID		int,
	@ClanName	varchar(24)

AS
	SET NOCOUNT ON
	-- 클랜원 모두 삭제
	DELETE FROM ClanMember WHERE CLID=@CLID

	-- 클랜 삭제
	UPDATE Clan SET Name=NULL, DeleteFlag=1, DeleteName=@ClanName WHERE CLID=@CLID


GO
SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

--------------------------------------------------------------------------

-- 클랜마크 변경
CREATE PROC spClanUpdateEmblem
	@CLID			int,
	@EmblemURL	varchar(256)
AS
BEGIN
	UPDATE Clan 
	SET EmblemURL=@EmblemURL, EmblemChecksum=EmblemChecksum+1
	WHERE CLID=@CLID
	RETURN 1
END
GO
--------------------------------------------------------------------------

SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO


-- 클랜이름 알아오기
CREATE PROC [spGetCharClan]
	@CID			int
AS
	SET NOCOUNT ON
	SELECT cl.CLID AS CLID, cl.Name AS ClanName FROM ClanMember cm(nolock), Clan cl(nolock) WHERE cm.cid=@CID AND cm.CLID=cl.CLID

GO
SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

--------------------------------------------------------------------------

SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO

-- 클랜 정보 얻기
CREATE PROC [spGetClanInfo]
	@CLID			int
AS
SET NOCOUNT ON

SELECT cl.CLID AS CLID, cl.Name AS Name, cl.TotalPoint AS TotalPoint, cl.Level AS Level, cl.Ranking AS Ranking,
cl.Point AS Point, cl.Wins AS Wins, cl.Losses AS Losses, cl.Draws AS Draws,
c.Name AS ClanMaster,
(SELECT COUNT(*) FROM ClanMember WHERE CLID=@CLID) AS MemberCount,
cl.EmblemUrl AS EmblemUrl, cl.EmblemChecksum AS EmblemChecksum

FROM Clan cl(nolock), Character c(nolock)
WHERE cl.CLID=@CLID and cl.MasterCID=c.CID



GO
SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

--------------------------------------------------------------------------

SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO

/* 클랜 목록 보기 
    한페이지 15개씩 고정, 최대 페이지 수를 위해 COUNT(*) 알아내지 말것.(이전,다음 페이지로 해결) 
    Arg1 : @Page (페이지넘버)
    Arg2 : @Backward (생략하면 정상순서, 1일경우 역순 					*/
CREATE PROC [spGetClanList]
	@Page INT,
	@Backward INT  = 0
AS
SET NOCOUNT ON
BEGIN
	DECLARE @PageHead INT
	DECLARE @RowCount INT

	IF @Backward = 0
	BEGIN
		SELECT @RowCount = ((@Page -1) * 15 + 1)
		
		SET ROWCOUNT @RowCount
		SELECT @PageHead = CLID FROM Clan(NOLOCK) WHERE DeleteFlag=0 ORDER BY CLID DESC
		
		SET ROWCOUNT 15
		SELECT cl.CLID AS CLID, cl.Name as ClanName, c.Name AS Master, cl.RegDate AS RegDate, cl.EmblemUrl AS EmblemUrl, cl.Point AS Point
		FROM Clan cl(NOLOCK), Character c(nolock)
		WHERE cl.MasterCID=c.CID AND cl.DeleteFlag=0 AND cl.CLID<@PageHead 
		ORDER BY cl.CLID DESC
	END
	ELSE
	BEGIN	-- 역순
		SELECT @RowCount = ((@Page -1) * 15 + 1)
		
		SET ROWCOUNT @RowCount
		SELECT @PageHead = CLID FROM Clan(NOLOCK) WHERE DeleteFlag=0 ORDER BY CLID
		
		SET ROWCOUNT 15
		SELECT CLID, ClanName, Master, RegDate, EmblemUrl, Point
		FROM
		(
			SELECT TOP 15 cl.CLID AS CLID, cl.Name as ClanName, c.Name AS Master, cl.RegDate AS RegDate, cl.EmblemUrl AS EmblemUrl, cl.Point AS Point
			FROM Clan cl(NOLOCK), Character c(nolock)
			WHERE cl.MasterCID=c.CID AND cl.DeleteFlag=0 AND cl.CLID>=@PageHead ORDER BY cl.CLID
		) AS t
		ORDER BY CLID DESC
	END
END

GO
SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

--------------------------------------------------------------------------

SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO

/* 클랜 목록찾기 (마스터이름으로)
    Arg1 : @CharName (클랜이름) */
CREATE PROC [spGetClanListSearchByMaster]
	@CharName VARCHAR(24)
AS
SET NOCOUNT ON
BEGIN

SELECT TOP 20 cl.CLID, cl.Name as ClanName, c.Name AS Master, cl.RegDate, cl.EmblemUrl, cl.Point
FROM Clan cl(NOLOCK), Character c(nolock)

WHERE cl.DeleteFlag=0 AND cl.MasterCID=c.CID and c.Name=@CharName
ORDER BY cl.CLID

END

GO
SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

--------------------------------------------------------------------------

SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO

/* 클랜 목록찾기 (이름으로)
    Arg1 : @Name (클랜이름) */
CREATE PROC [spGetClanListSearchByName]
	@Name VARCHAR(24)
AS
SET NOCOUNT ON
BEGIN
	SELECT TOP 20 cl.CLID AS CLID, cl.Name as ClanName, c.Name AS Master, cl.RegDate AS RegDate, cl.EmblemUrl AS EmblemUrl, cl.Point AS Point
	FROM Clan cl(NOLOCK), Character c(NOLOCK)
	WHERE cl.MasterCID=c.CID AND c.DeleteFlag=0 AND cl.Name=@Name 
	ORDER BY cl.CLID
END

GO
SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

--------------------------------------------------------------------------

SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO

-- 클랜원 알아오기
CREATE PROC [spGetClanMember]
	@CLID		int
AS
	SET NOCOUNT ON
	SELECT cm.clid AS CLID, cm.Grade AS ClanGrade, c.cid AS CID, c.name AS CharName
	FROM ClanMember cm(nolock), Character c(nolock)
	WHERE CLID=@CLID AND cm.cid=c.cid

GO
SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

--------------------------------------------------------------------------

SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO


-- 클랜이름으로 CLID알아오기
CREATE PROC [spGetCLIDFromClanName]
	@ClanName		varchar(24)
AS
	SET NOCOUNT ON
	SELECT CLID FROM Clan(NOLOCK) WHERE Name=@ClanName

GO
SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

--------------------------------------------------------------------------

SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO

-- 멤버 삭제
CREATE PROC [spRemoveClanMember]
	@CLID		int,
	@CID		int
AS
	SET NOCOUNT ON
	DELETE FROM ClanMember WHERE (CLID=@CLID) AND (CID=@CID) AND (Grade != 1)

GO
SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

--------------------------------------------------------------------------

SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO


-- 멤버 이름으로 멤버 삭제
CREATE PROC [spRemoveClanMemberFromCharName]
	@CLID				int,
	@AdminGrade			int,		-- 탈퇴시키려고 하는 사람의 권한
	@MemberCharName		varchar(36)
AS
	SET NOCOUNT ON
	DECLARE @CID				int
	DECLARE @MemberGrade		int


	SELECT @CID=c.cid, @MemberGrade=cm.Grade FROM Character c(nolock), ClanMember cm(nolock)
	WHERE cm.clid=@CLID AND c.cid=cm.cid AND c.Name=@MemberCharName AND (DeleteFlag=0)

	IF (@CID IS NULL)
	BEGIN
		SELECT 0 As Ret
		return (-1)
	END

	IF @AdminGrade >= @MemberGrade
	BEGIN
		SELECT 2 As Ret
		return (-1)
	END


	IF @CID IS NOT NULL
	BEGIN
		BEGIN TRAN
		DELETE FROM ClanMember WHERE (CLID=@CLID) AND (CID=@CID) AND (Grade != 1)
		IF 0 <> @@ERROR BEGIN 
			ROLLBACK TRAN
			SELECT 3 AS Ret -- 수정된 부분. By SungE
			RETURN
		END
		COMMIT TRAN
		SELECT 1 As Ret
	END

/* Ret값 설명 : 1 - 성공, 0 - 해당클랜원이 없다. , 2 - 권한이 맞지 않다. */

GO
SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

--------------------------------------------------------------------------

SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO


-- 클랜 폐쇄 예약하기
CREATE PROC [spReserveCloseClan]
	@CLID		int,
	@ClanName	varchar(24),
	@MasterCID	int
AS
	SET NOCOUNT ON
	UPDATE Clan SET DeleteFlag=2 WHERE CLID=@CLID AND Name=@ClanName AND MasterCID=@MasterCID


GO
SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

--------------------------------------------------------------------------

SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO

-- 클랜기여도 업데이트
CREATE PROC [spUpdateCharClanContPoint]
	@CID		int,
	@CLID		int,
	@AddedContPoint	int
AS
	SET NOCOUNT ON
	Update ClanMember SET ContPoint=ContPoint+@AddedContPoint WHERE CID=@CID AND CLID=@CLID

GO
SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

--------------------------------------------------------------------------

SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO



-- 권한 변경
CREATE PROC [spUpdateClanGrade]
	@CLID		int,
	@CID		int,
	@NewGrade	tinyint
AS
	SET NOCOUNT ON
	UPDATE ClanMember SET Grade=@NewGrade WHERE CLID=@CLID AND CID=@CID

GO
SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

--------------------------------------------------------------------------

SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO


-- 웹에서 클랜 폐쇄.
CREATE PROC spWebDeleteClan
	@MasterName varchar(24)	/* 마스터 이름 */
,	@ClanName varchar(24)	/* 방출할 클랜원 이름 */
AS
SET NOCOUNT ON
BEGIN TRAN
	SET NOCOUNT ON

	DECLARE @MasterCID int
	DECLARE @CLID int

	SELECT @MasterCID = c.MasterCID, @CLID = c.CLID
	FROM Clan c (NOLOCK), Character ch(NOLOCK)
	WHERE ch.Name = @MasterName AND c.MasterCID = ch.CID

	-- 요청 조건 검사.
	IF (@MasterCID IS NULL) OR (@CLID IS NULL)
	BEGIN
		SELECT 0 AS Ret
		ROLLBACK TRAN
		SET NOCOUNT OFF
		RETURN
	END

	-- Clan Member 삭제.
	DELETE ClanMember WHERE CLID = @CLID
	IF 0  <> @@ERROR
	BEGIN
		SELECT 0 AS Ret
		ROLLBACK TRAN
		SET NOCOUNT OFF
		RETURN
	END

	-- Clan을 유효하지 않은 상태로 설정.
	UPDATE Clan SET DeleteFlag = 1, MasterCID = NULL, DeleteName = Name WHERE CLID = @CLID
	IF 0 = @@ROWCOUNT BEGIN 
		SELECT 0 AS Ret
		ROLLBACK TRAN
		SET NOCOUNT OFF
		RETURN
	END

	UPDATE Clan SET Name = NULL WHERE CLID = @CLID
	IF 0 = @@ROWCOUNT BEGIN 
		SELECT 0 AS Ret
		ROLLBACK TRAN
		SET NOCOUNT OFF
		RETURN
	END

	SELECT 1 AS Ret

	SET NOCOUNT OFF
COMMIT TRAN

GO
SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

--------------------------------------------------------------------------

SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO


-- CID로 클랜 폐쇄.
CREATE  PROC spWebDeleteClanByCID
	@MasterCID int /* 마스터 CID */
AS
SET NOCOUNT ON
BEGIN TRAN

	DECLARE @CLID int

	SELECT @CLID = c.CLID
	FROM Clan c(NOLOCK)
	WHERE c.MasterCID = @MasterCID

	-- 요청 조건 검사.
	IF (@MasterCID IS NULL) OR (@CLID IS NULL)
	BEGIN
		SELECT 0 AS Ret
		ROLLBACK TRAN
--		SET NOCOUNT OFF
		Select 0
		RETURN
	END

	-- Clan Member 삭제.
	DELETE ClanMember WHERE CLID = @CLID
	IF 0  <> @@ERROR
	BEGIN
		SELECT 0 AS Ret
		ROLLBACK TRAN
--		SET NOCOUNT OFF
		Select 0
		RETURN
	END

	-- Clan을 유효하지 않은 상태로 설정.
	UPDATE Clan SET DeleteFlag = 1, MasterCID = NULL, DeleteName = Name WHERE CLID = @CLID
	-- UPDATE Clan SET DeleteName = Name WHERE CLID = @CLID
	IF (0 <> @@ERROR) OR (0 = @@ROWCOUNT) BEGIN -- 여기 추가.
		SELECT 0 AS Ret
		ROLLBACK TRAN
		Select 0
		RETURN
	END
	UPDATE Clan SET Name = NULL WHERE CLID = @CLID
	IF (0 <> @@ERROR) OR (0 = @@ROWCOUNT) BEGIN -- 여기 추가.
		SELECT 0 AS Ret
		ROLLBACK TRAN
		Select 0
		RETURN
	END

	SELECT 1

	
COMMIT TRAN
SET NOCOUNT OFF

GO
SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

--------------------------------------------------------------------------

SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO


-- 마스터가 클랜원 방출.
CREATE PROC spWebFireClanMember
	@Master varchar(24) 	/* 클랜 마스터 CID */
,	@ClanMem varchar(24) 	/* 방출할 클랜원 캐릭터 CID */
AS
SET NOCOUNT ON
BEGIN TRAN
	DECLARE @MasterCID int
	DECLARE @CLID int
	DECLARE @ClanMemCID int

	-- 자격 검사를 위해 클랜아이디와 마스터 아이티를 구함.
	SELECT @CLID = cl.CLID, @MasterCID = cl.MasterCID
	FROM Character ch(NOLOCK), Clan cl(NOLOCK)
	WHERE ch.Name = @Master AND cl.MasterCID = ch.CID

	-- 방충하려는 클랜 맴버.
	SELECT @ClanMemCID = ch.CID
	FROM Character ch(NOLOCK)
	WHERE ch.Name = @ClanMem

	-- 클랜이 존재하고 클랜맴버가 존재해야 하고 방출되는 맴버가 마스터가 아니어야 함.
	IF (@CLID IS NULL) OR (@ClanMemCID IS NULL) OR (@MasterCID = @ClanMemCID)
	BEGIN
		ROLLBACK TRAN
		SELECT 0
		RETURN
	END

	DELETE ClanMember 
	WHERE CLID = @CLID AND 	CID = @ClanMemCID
	IF 0 <> @@ERROR
	BEGIN
		ROLLBACK TRAN
		SELECT 0
		RETURN
	END

	SELECT 1
COMMIT TRAN
SET NOCOUNT OFF

GO
SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

--------------------------------------------------------------------------

SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO



/* 클랜 목록찾기 (마스터이름으로)  
    Arg1 : @CharName (클랜 마스터 이름) */  
CREATE PROC [spWebGetClanListSearchByMaster]  
 	@CharName VARCHAR(24)  
AS  
SET NOCOUNT ON
BEGIN  
  	SELECT TOP 1 cl.Ranking, cl.RankIncrease, cl.Name as ClanName, cl.Point, cl.Wins, cl.Losses, cl.CLID, cl.EmblemUrl, c.Name AS Master, cl.RegDate
	FROM Clan cl(NOLOCK), Character c(nolock)  
  	WHERE c.Name = @CharName AND cl.DeleteFlag = 0 AND cl.MasterCID = c.CID
END  

GO
SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

--------------------------------------------------------------------------

SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO


-- 클랜 랭킹을 마스터 이름을 사용해서 검색.
CREATE PROC spWebGetClanRankByMaster
	@MasterName varchar(24)
AS
SET NOCOUNT ON
BEGIN
	SELECT cl.CLID, cl.Name AS ClanName, cl.Point, cl.Wins, cl.Losses, cl.EmblemUrl, cl.Ranking, cl.RankIncrease, c.Name AS Master, cl.RegDate
	FROM Clan cl(NOLOCK) JOIN Character c(NOLOCK) 
	ON c.Name = @MasterName AND cl.MasterCID = c.CID AND cl.Ranking > 0
END

GO
SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

--------------------------------------------------------------------------

SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO


-- My랭킹정보.
CREATE PROC spWebGetMyClanInfo
	@CharName varchar(24) /* 캐릭터 이름 */
AS
SET NOCOUNT ON
BEGIN
	DECLARE @CLID int

	SELECT @CLID = cm.CLID 
	FROM Account a (NOLOCK), Character c (NOLOCK), ClanMember cm (NOLOCK)
	WHERE c.Name = @CharName AND a.AID = c.AID AND cm.CID = c.CID

	IF @CLID IS NOT NULL
	BEGIN
		SELECT cl.Name, ch.Name AS Master, cl.IntroDuction, cl.RegDate, cl.Homepage, cl.EmblemUrl, cl.Ranking
		FROM Clan cl(NOLOCK), Character ch(NOLOCK)
		WHERE cl.CLID = @CLID AND cl.DeleteFlag = 0 AND ch.CID = cl.MasterCID
	END
END

GO
SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

--------------------------------------------------------------------------

SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO


-- My랭킹정보를 CID로 가져옴.  
CREATE PROC spWebGetMyClanInfoByCID  
 	@CID int /* 캐릭터 CID */  
AS  
SET NOCOUNT ON
BEGIN  
	SELECT t.Name, t.Name AS Master, t.IntroDuction, t.RegDate, t.Homepage, t.EmblemUrl, t.Ranking
	FROM 
	(
	 	SELECT cl.Name, cl.MasterCID, cl.IntroDuction, cl.RegDate, cl.Homepage, cl.EmblemUrl, cl.Ranking
	 	FROM ClanMember cm(NOLOCK), Clan cl(NOLOCK), Character ch(NOLOCK)  
	 	WHERE cm.CID = @CID AND cl.CLID = cm.CLID AND ch.CID = @CID  
	) AS t, Character ch(NOLOCK)
	WHERE t.MasterCID = ch.CID
END  

GO
SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

--------------------------------------------------------------------------

SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO


CREATE PROC spWebGetMyClanInfoByCLID
	@CLID int
AS
SET NOCOUNT ON
BEGIN
	SELECT cl.Name, ch.Name AS Master, cl.IntroDuction, cl.RegDate, cl.Homepage, cl.EmblemUrl, cl.Ranking
	FROM Clan cl(NOLOCK), Character ch(NOLOCK)
	WHERE cl.CLID = @CLID AND cl.DeleteFlag = 0 AND ch.CID = cl.MasterCID
END

GO
SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

--------------------------------------------------------------------------

SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO



-- 가입한 클랜 리스트를 Ranking으로 정렬해서 보여줌. 클랜이 중복으로 보일수 있음.
CREATE PROC spWebGetMyClanList
	@UserID varchar(20) /* 넷마블 아이디 */
AS
SET NOCOUNT ON
BEGIN
	SELECT t.Ranking, t.RankIncrease, t.ClanName, t.Point, t.Wins, t.Losses, t.CLID, t.EmblemUrl, ch.Name AS Master, t.RegDate
	FROM 
	(
		SELECT cl.CLID, cl.Name AS ClanName, cl.Point, cl.Wins, cl.Losses, cl.EmblemUrl, cl.Ranking, cl.RankIncrease, cl.MasterCID, cl.RegDate
		FROM Account ac (NOLOCK), Character ch(NOLOCK), ClanMember cm(NOLOCK), Clan cl(NOLOCK)
		WHERE ac.UserID = @UserID AND ac.AID = ch.AID AND cm.CID = ch.CID AND cl.CLID = cm.CLID
	) AS t, Character ch(NOLOCK)
	WHERE t.MasterCID = ch.CID ORDER BY t.Ranking DESC
END

GO
SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

--------------------------------------------------------------------------

SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO


-- 자신의 클랜 탈퇴.
CREATE PROC spWebLeaveClan
	@CharName varchar(24) /* 캐릭터 이름 */
AS
BEGIN TRAN
	SET NOCOUNT ON

	DECLARE @CLID int
	DECLARE @CID int
	DECLARE @MasterCID int

	-- 존재하는 아이디인가?
	SELECT @CLID = cm.CLID, @CID = c.CID, @MasterCID = cl.MasterCID
	FROM Account a (NOLOCK), Character c (NOLOCK), Clan cl(NOLOCK), ClanMember cm (NOLOCK)
	WHERE c.Name = @CharName AND a.AID = c.AID AND cm.CID = c.CID AND cl.CLID = cm.CLID

	-- 클랜마스터가 아니고 클랜에 가입되 있을 경우만.
	IF (@CID IS NULL) OR (@MasterCID = @CID) OR (@CLID IS NULL)
	BEGIN
		ROLLBACK TRAN
		SET NOCOUNT OFF 
		RETURN
	END
		
	DELETE ClanMember WHERE CID = @CID
	IF 0 <> @@ERROR
	BEGIN
		ROLLBACK TRAN
		SET NOCOUNT OFF 
		RETURN
	END

	SET NOCOUNT OFF 
COMMIT TRAN

GO
SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

--------------------------------------------------------------------------

SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO



-- CID로 클랜 탈퇴.
CREATE  PROC spWebLeaveClanByCID
	@CID int /* 탈퇴요청 캐릭터 CID */
AS
SET NOCOUNT ON
BEGIN TRAN
	

	DECLARE @CLID int
	DECLARE @MasterCID int

	-- 존재하는 아이디인가?
	SELECT @CLID = cm.CLID, @MasterCID = cl.MasterCID
	FROM Clan cl(NOLOCK), ClanMember cm (NOLOCK)
	WHERE cm.CID = @CID AND cl.CLID = cm.CLID

	-- 클랜마스터가 아니고 클랜에 가입되 있을 경우만.
	IF (@CID IS NULL) OR (@MasterCID = @CID) OR (@CLID IS NULL)
	BEGIN
		ROLLBACK TRAN
		SELECT 0
		RETURN
	END
		
	DELETE ClanMember WHERE CID = @CID
	IF 0 <> @@ERROR
	BEGIN
		ROLLBACK TRAN
		SELECT 0
		RETURN
	END

	SELECT 1	
COMMIT TRAN
SET NOCOUNT OFF

GO
SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

--------------------------------------------------------------------------

SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO

/* 전체 랭킹을 산출한다. - 디비 에이전트에서 실행시키는 프로시져 */
CREATE PROC [spFetchTotalRanking]
AS
SET NOCOUNT ON
TRUNCATE TABLE TotalRanking

INSERT into TotalRanking(UserID, Name, Level, XP, KillCount, DeathCount)

SELECT Account.UserID, c.name, c.Level, c.XP, c.KillCount, c.DeathCount
FROM Character c(nolock), Account(nolock)
WHERE Account.AID=c.aid AND c.DeleteFlag=0 AND c.XP >= 500
ORDER BY c.xp DESC, c.KillCount DESC, c.DeathCount ASC, c.PlayTime DESC

GO
SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO



SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO

/* 클랜 명예의 전당 보기 월별 10위까지 
	2004년 9월 ~ 현재저번달까지(이달 제외) */
CREATE PROC [spGetClanHonorRanking]
	@Year INT,
	@Month INT
AS
SET NOCOUNT ON
BEGIN
	SELECT TOP 10 r.Ranking, r.ClanName, r.Point, r.Wins, r.Losses, r.CLID, c.EmblemUrl 
	FROM ClanHonorRanking r(NOLOCK), Clan c(NOLOCK)
	WHERE r.CLID=c.CLID AND Year = @Year AND Month = @Month
	ORDER BY r.Ranking
END

GO
SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

--------------------------------------------------------------------------

SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO


-- Master이름과 RegDate추가.
/* 클랜 랭킹보기 : 한페이지 20개씩 고정  
    Arg1 : @Page (페이지넘버)  
    Arg2 : @Backward (생략하면 정상순서, 1일경우 역순 */  
CREATE PROC [spGetClanRanking]  
 @Page INT,  
 @Backward INT  = 0  
AS  
SET NOCOUNT ON
BEGIN  
 /* 한페이지에 20개씩 보여준다 (속도를위해 갯수 고정) */  
 DECLARE @RowCount INT  
 DECLARE @PageHead INT  
  
 IF @Backward = 0  
 BEGIN  
  SELECT @RowCount = ((@Page -1) * 20 + 1)  
  SELECT TOP 20 cl.Ranking, cl.RankIncrease, cl.Name as ClanName, cl.Point, cl.Wins, cl.Losses, cl.CLID, cl.EmblemUrl, ch.Name AS Master, cl.RegDate
  FROM Clan cl(NOLOCK), Character ch(NOLOCK)
  WHERE cl.DeleteFlag=0 AND cl.Ranking>0 AND cl.Ranking >= @RowCount  AND ch.CID = cl.MasterCID
  ORDER BY cl.Ranking  
 END  
 ELSE  
 BEGIN  
  SELECT @RowCount = ((@Page -1) * 20 + 1)  
   
  SET ROWCOUNT @RowCount  
  SELECT @PageHead = Ranking FROM Clan(NOLOCK) WHERE DeleteFlag=0 ORDER BY Ranking DESC  
   
  SET ROWCOUNT 20  
  SELECT Ranking, RankIncrease, ClanName, Point, Wins, Losses, CLID, EmblemUrl, Master, RegDate FROM  
  (  
   SELECT TOP 20 cl.Ranking, cl.RankIncrease, cl.Name as ClanName, cl.Point, cl.Wins, cl.Losses, cl.CLID, cl.EmblemUrl, ch.Name AS Master, cl.RegDate
   FROM Clan cl(NOLOCK), Character ch(NOLOCK)
   WHERE cl.DeleteFlag=0 AND cl.Ranking>0 AND cl.Ranking <= @PageHead AND ch.CID = cl.MasterCID
   ORDER BY cl.Ranking DESC  
  ) AS t ORDER BY Ranking  
 END  
END  

GO
SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

--------------------------------------------------------------------------

SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO

/* 클랜 역대 랭킹찾기
    Arg1 : @Year (년도) 
    Arg2 : @Month (월) 
    Arg3 : @Page (페이지) 
    Arg4 : @Backward (역순) */
CREATE  PROC [spGetClanRankingHistory]
	@Year INT,
	@Month INT,
	@Page INT,
	@Backward INT = 0
AS
SET NOCOUNT ON
BEGIN
	/* 한페이지에 20개씩 보여준다 (속도를위해 갯수 고정) */
	DECLARE @RowCount INT
	DECLARE @PageHead INT

	IF @Backward = 0
	BEGIN
		SELECT @RowCount = ((@Page -1) * 20 + 1)
		SELECT TOP 20 Ranking, ClanName as ClanName, Point, Wins, Losses, CLID FROM ClanHonorRanking(NOLOCK) 
		WHERE Year=@Year AND Month=@Month AND Ranking>0 AND Ranking >= @RowCount ORDER BY Ranking
	END
	ELSE
	BEGIN
		SELECT @RowCount = ((@Page -1) * 20 + 1)
	
		SET ROWCOUNT @RowCount
		SELECT @PageHead = Ranking FROM Clan(NOLOCK) WHERE DeleteFlag=0 ORDER BY Ranking DESC
	
		SET ROWCOUNT 20
		SELECT  Ranking, RankIncrease=0, ClanName, Point, Wins, Losses, CLID, EmblemUrl=NULL FROM
		(
			SELECT TOP 20 Ranking, ClanName, Point, Wins, Losses, CLID FROM ClanHonorRanking(NOLOCK) 
			WHERE Year=@Year AND Month=@Month AND Ranking>0 AND Ranking <= @PageHead ORDER BY Ranking DESC
		) AS t ORDER BY Ranking
	END
END


GO
SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

--------------------------------------------------------------------------

SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO

CREATE PROC [spGetClanRankingMaxPage]
AS
SET NOCOUNT ON
BEGIN
	DECLARE @MaxPage INT
	SELECT TOP 1 @MaxPage = Ranking / 20 + 1 FROM Clan(NOLOCK) WHERE DeleteFlag=0 AND Ranking>0 ORDER BY Ranking DESC
--	SELECT @MaxPage
	RETURN @MaxPage
END


GO
SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

--------------------------------------------------------------------------

SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO

CREATE PROC [spGetClanRankingSearchByName]
	@Name VARCHAR(24)
AS
SET NOCOUNT ON
BEGIN
	SELECT TOP 20 Ranking, RankIncrease, Name as ClanName, Point, Wins, Losses, CLID, EmblemUrl FROM Clan(NOLOCK) 
	WHERE DeleteFlag=0 AND Ranking>0 AND Name=@Name ORDER BY Ranking
END


GO
SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

--------------------------------------------------------------------------

SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO

/* 클랜 랭킹찾기 (순위로)
    Arg1 : @Ranking (순위) */
CREATE PROC [spGetClanRankingSearchByRanking]
	@Ranking INT
AS
SET NOCOUNT ON
BEGIN
	SELECT TOP 20 Ranking, RankIncrease, Name as ClanName, Point, Wins, Losses, CLID, EmblemUrl FROM Clan(NOLOCK) 
	WHERE DeleteFlag=0 AND Ranking>0 AND Ranking=@Ranking ORDER BY Ranking
END


GO
SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

--------------------------------------------------------------------------

SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO


/* 전체 랭킹 보기 */
CREATE PROC [spGetTotalRanking]
	@MinRank		int,
	@MaxRank		int
AS
SET NOCOUNT ON

SELECT Rank, Level, UserID, Name, XP, KillCount, DeathCount FROM TotalRanking(nolock)
WHERE Rank BETWEEN @MinRank AND @MaxRank
ORDER BY Rank


GO
SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

--------------------------------------------------------------------------


SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO

-- 클랜 랭킹 증가분 업데이트 - 매일 새벽 12시에 업데이트
CREATE PROC [spRegularUpdateClanRankIncrease]
AS
	SET NOCOUNT ON

	-- 꼴등랭킹을 구한다.
	DECLARE @LowestRank int
	SELECT TOP 1 @LowestRank=Ranking FROM Clan 
	WHERE DeleteFlag=0 AND Ranking>0 
	order by ranking desc

	IF @LowestRank is NULL SELECT @LowestRank = 0

	UPDATE Clan
	SET RankIncrease=(LastDayRanking-Ranking)
	WHERE DeleteFlag=0 AND Ranking>0 AND LastDayRanking != 0

	-- 처음 랭킹에 진입했을 경우
	UPDATE Clan
	SET RankIncrease=@LowestRank-Ranking
	WHERE DeleteFlag=0 AND Ranking>0 AND LastDayRanking = 0

	-- LastDayRanking 업데이트
	UPDATE Clan 
	SET LastDayRanking=Ranking 
	where DeleteFlag=0 and Ranking>0

GO
SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

--------------------------------------------------------------------------

SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO

-- 한달에 한번씩 명예의 전당 업데이트, 꼭 그 다음달의 1일에 해야한다.
CREATE PROC [spRegularUpdateHonorRanking]
AS
SET NOCOUNT ON
BEGIN TRAN -------------

EXEC [spRegularUpdateClanRanking]

DECLARE @Year		int
DECLARE @Month		int

SELECT @Year = YEAR(GETDATE())
SELECT @Month = MONTH(GETDATE())

IF (@Month = 1) 
BEGIN
	SELECT @Year = @Year-1
END

SELECT @Month = @Month - 1

IF (@Month = 0)
BEGIN
	SELECT @Month = 12
END

INSERT INTO ClanHonorRanking(CLID, ClanName, Point, Wins, Losses, Ranking, Year, Month)
SELECT CLID, Name AS ClanName, Point, Wins, Losses, Ranking, @Year, @Month
FROM Clan 
WHERE DeleteFlag=0 AND Ranking>0
ORDER BY Ranking
IF 0 <> @@ERROR BEGIN -- 여기 추가.
	ROLLBACK TRAN
	RETURN
END

-- 클랜 리셋
UPDATE Clan SET Ranking=0, Wins=0, Losses=0, Point=1000, RankIncrease=0, LastDayRanking=0
IF 0 = @@ROWCOUNT BEGIN -- 여기 추가.
	ROLLBACK TRAN
	RETURN
END

COMMIT TRAN -----------

GO
SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

--------------------------------------------------------------------------

SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO

CREATE PROC spRegularUpdateShopRanking
AS
SET NOCOUNT ON
BEGIN
	BEGIN TRAN
		/* 원거리 무기 인기순위 */
		IF EXISTS (SELECT name FROM tempdb.dbo.sysobjects WHERE name LIKE '#TempShopRankRange%')
		DROP TABLE #TempShopRankRange
		
	
		SELECT TOP 5 IDENTITY(INT,1,1) Rank, 'range weapon' AS Category, i.Name, COUNT(l.ItemID) AS Count, c.CSID, NULL AS CSSID, i.Slot,
			i.ResSex, i.ResLevel, c.CashPrice
		INTO #TempShopRankRange
		FROM ItemPurchaseLogByCash l(NOLOCK), Item i(NOLOCK), CashShop c(NOLOCK)
		WHERE Date > DATEADD(day, -7, GetDate()) AND i.Slot=2 AND l.ItemID=i.ItemID AND l.ItemID=c.ItemID
		GROUP BY l.ItemID, i.Slot, i.Name, c.CSID, i.ResSex, i.ResLevel, c.CashPrice
		ORDER BY Count DESC
		IF @@ERROR <> 0
		BEGIN
			ROLLBACK
			RETURN (-1)
		END
		
		/* 근접 무기 인기순위 */
		IF EXISTS (SELECT name FROM tempdb.dbo.sysobjects WHERE name LIKE '#TempShopRankMelee%')
		DROP TABLE #TempShopRankMelee
		
		SELECT TOP 5 IDENTITY(INT,1,1) Rank, 'melee weapon' AS Category, i.Name, COUNT(l.ItemID) AS Count, c.CSID, NULL AS CSSID, i.Slot,
			i.ResSex, i.ResLevel, c.CashPrice
		INTO #TempShopRankMelee
		FROM ItemPurchaseLogByCash l(NOLOCK), Item i(NOLOCK), CashShop c(NOLOCK)
		WHERE Date > DATEADD(day, -7, GetDate()) AND i.Slot=1 AND l.ItemID=i.ItemID AND l.ItemID=c.ItemID
		GROUP BY l.ItemID, i.Slot, i.Name, c.CSID, i.ResSex, i.ResLevel, c.CashPrice
		ORDER BY Count DESC
		IF @@ERROR <> 0
		BEGIN
			ROLLBACK
			RETURN (-1)
		END
		
		/* 특수아이템 인기순위 */
		IF EXISTS (SELECT name FROM tempdb.dbo.sysobjects WHERE name LIKE '#TempShopRankSpecial%')
		DROP TABLE #TempShopRankSpecial
		
		SELECT TOP 5 IDENTITY(INT,1,1) Rank, 'specail item' AS Category, i.Name, COUNT(l.ItemID) AS Count, c.CSID, NULL AS CSSID, i.Slot,
			i.ResSex, i.ResLevel, c.CashPrice
		INTO #TempShopRankSpecial
		FROM ItemPurchaseLogByCash l(NOLOCK), Item i(NOLOCK), CashShop c(NOLOCK)
		WHERE Date > DATEADD(day, -7, GetDate()) AND i.Slot=3 AND l.ItemID=i.ItemID AND l.ItemID=c.ItemID
		GROUP BY l.ItemID, i.Slot, i.Name, c.CSID, i.ResSex, i.ResLevel, c.CashPrice
		ORDER BY Count DESC
		IF @@ERROR <> 0
		BEGIN
			ROLLBACK
			RETURN (-1)
		END
		
		/* 방어구 인기순위 */
		IF EXISTS (SELECT name FROM tempdb.dbo.sysobjects WHERE name LIKE '#TempShopRankArmor%')
		DROP TABLE #TempShopRankArmor
		
		SELECT TOP 5 IDENTITY(INT,1,1) Rank, 'defence' AS Category, i.Name, COUNT(l.ItemID) AS Count, c.CSID, NULL AS CSSID, 
			CASE i.Slot 
				WHEN 0 THEN 'no limit'
				WHEN 1 THEN 'melee weapon'
				WHEN 2 THEN 'range weapon'
				WHEN 3 THEN 'item'
				WHEN 4 THEN 'haed'
				WHEN 5 THEN 'chest'
				WHEN 6 THEN 'hands'
				WHEN 7 THEN 'legs'
				WHEN 8 THEN 'feet'
				WHEN 9 THEN 'finger'
			END AS Slot, i.ResSex, i.ResLevel, c.CashPrice
		INTO #TempShopRankArmor
		FROM ItemPurchaseLogByCash l(NOLOCK), Item i(NOLOCK), CashShop c(NOLOCK)
		WHERE Date > DATEADD(day, -7, GetDate()) AND 4<=i.Slot AND i.Slot<=9 AND l.ItemID=i.ItemID AND l.ItemID=c.ItemID
		GROUP BY l.ItemID, i.Slot, i.Name, c.CSID, i.ResSex, i.ResLevel, c.CashPrice
		ORDER BY COUNT(l.ItemID) DESC
		IF @@ERROR <> 0
		BEGIN
			ROLLBACK
			RETURN (-1)
		END
		
		/* 세트 인기순위 */
		IF EXISTS (SELECT name FROM tempdb.dbo.sysobjects WHERE name LIKE '#TempShopRankSet%')
		DROP TABLE #TempShopRankSet
		
		SELECT TOP 5 IDENTITY(INT,1,1) Rank, 'set' AS Category, s.Name, COUNT(l.CSSID) AS Count, NULL AS CSID, l.CSSID, 
			'set' AS Slot, s.ResSex, s.ResLevel, s.CashPrice
		INTO #TempShopRankSet
		FROM SetItemPurchaseLogByCash l(NOLOCK), CashSetShop s(NOLOCK)
		WHERE Date > DATEADD(day, -7, GetDate()) AND l.CSSID=s.CSSID
		GROUP BY l.CSSID, s.Name, s.ResSex, s.ResLevel, s.CashPrice
		ORDER BY Count DESC
		IF @@ERROR <> 0
		BEGIN
			ROLLBACK
			RETURN (-1)
		END
		
		/* 샵랭킹 리셋 */
		DELETE FROM CashShopRank
		
		INSERT INTO CashShopRank (Rank, Category, Name, Count, CSID, CSSID, Slot, ResSex, ResLevel, CashPrice)
			 SELECT * FROM #TempShopRankRange
		IF @@ERROR <> 0
		BEGIN
			ROLLBACK
			RETURN (-1)
		END

		INSERT INTO CashShopRank (Rank, Category, Name, Count, CSID, CSSID, Slot, ResSex, ResLevel, CashPrice)
			SELECT * FROM #TempShopRankMelee
		IF @@ERROR <> 0
		BEGIN
			ROLLBACK
			RETURN (-1)
		END

		INSERT INTO CashShopRank (Rank, Category, Name, Count, CSID, CSSID, Slot, ResSex, ResLevel, CashPrice)
			SELECT * FROM #TempShopRankSpecial
		IF @@ERROR <> 0
		BEGIN
			ROLLBACK
			RETURN (-1)
		END

		INSERT INTO CashShopRank (Rank, Category, Name, Count, CSID, CSSID, Slot, ResSex, ResLevel, CashPrice)
			SELECT * FROM #TempShopRankArmor
		IF @@ERROR <> 0
		BEGIN
			ROLLBACK
			RETURN (-1)
		END

		INSERT INTO CashShopRank (Rank, Category, Name, Count, CSID, CSSID, Slot, ResSex, ResLevel, CashPrice)
			SELECT * FROM #TempShopRankSet
		IF @@ERROR <> 0
		BEGIN
			ROLLBACK
			RETURN (-1)
		END
		
		DROP TABLE #TempShopRankRange
		DROP TABLE #TempShopRankMelee
		DROP TABLE #TempShopRankSpecial
		DROP TABLE #TempShopRankArmor
		DROP TABLE #TempShopRankSet
	COMMIT TRAN
	RETURN (1)
END

GO
SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

--------------------------------------------------------------------------

SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO

/* 순위 검색 */
CREATE PROC [spSearchTotalRankingByName]
	@Name				varchar(24)
AS
SET NOCOUNT ON
-- 와일드카드 문자 처리
--SELECT @Name = REPLACE(@Name, '[', '[[]')
--SELECT @Name = REPLACE(@Name, '%', '[%]')
--SELECT @Name = REPLACE(@Name, '_', '[_]')

SELECT Rank, Level, UserID, Name, XP, KillCount, DeathCount 
FROM TotalRanking(nolock)
WHERE Name=@Name



GO
SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

--------------------------------------------------------------------------

SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO


-- 자신의 랭킹 정보.
CREATE PROC spSearchTotalRankingByNetmarbleID
	@UserID varchar(20)
AS
SET NOCOUNT ON
BEGIN
	SELECT Rank, Level, Name, XP, KillCount, DeathCount, UserID 
	FROM TotalRanking (NOLOCK)
	WHERE Name = @UserID
END

GO
SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

--------------------------------------------------------------------------

SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO


-- Master이름과 RegDate추가.
/* 클랜 랭킹보기 : 한페이지 20개씩 고정  
    Arg1 : @Page (페이지넘버)  
    Arg2 : @Backward (생략하면 정상순서, 1일경우 역순 */  
CREATE PROC [spWebGetClanRanking]  
 @Page INT,  
 @Backward INT  = 0  
AS  
SET NOCOUNT ON
BEGIN  
 /* 한페이지에 20개씩 보여준다 (속도를위해 갯수 고정) */  
 DECLARE @RowCount INT  
 DECLARE @PageHead INT  
  
 IF @Backward = 0  
 BEGIN  
  SELECT @RowCount = ((@Page -1) * 20 + 1)  
  SELECT TOP 20 cl.Ranking, cl.RankIncrease, cl.Name as ClanName, cl.Point, cl.Wins, cl.Losses, cl.CLID, cl.EmblemUrl, ch.Name AS Master, cl.RegDate
  FROM Clan cl(NOLOCK), Character ch(NOLOCK)
  WHERE cl.DeleteFlag=0 AND cl.Ranking>0 AND cl.Ranking >= @RowCount  AND ch.CID = cl.MasterCID
  ORDER BY cl.Ranking  
 END  
 ELSE  
 BEGIN  
  SELECT @RowCount = ((@Page -1) * 20 + 1)  
   
  SET ROWCOUNT @RowCount  
  SELECT @PageHead = Ranking FROM Clan(NOLOCK) WHERE DeleteFlag=0 ORDER BY Ranking DESC  
   
  SET ROWCOUNT 20  
  SELECT Ranking, RankIncrease, ClanName, Point, Wins, Losses, CLID, EmblemUrl, Master, RegDate FROM  
  (  
   SELECT TOP 20 cl.Ranking, cl.RankIncrease, cl.Name as ClanName, cl.Point, cl.Wins, cl.Losses, cl.CLID, cl.EmblemUrl, ch.Name AS Master, cl.RegDate
   FROM Clan cl(NOLOCK), Character ch(NOLOCK)
   WHERE cl.DeleteFlag=0 AND cl.Ranking>0 AND cl.Ranking <= @PageHead AND ch.CID = cl.MasterCID
   ORDER BY cl.Ranking DESC  
  ) AS t ORDER BY Ranking  
 END  
END  

GO
SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

--------------------------------------------------------------------------

SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO


-- 클랜 이름으로 검색.
CREATE PROC [spWebGetClanRankingSearchByName]  
 	@Name VARCHAR(24)  /* 클랜 이름 */
AS  
SET NOCOUNT ON
BEGIN  
 	SELECT TOP 1 cl.Ranking, cl.RankIncrease, cl.Name as ClanName, cl.Point, cl.Wins, cl.Losses, cl.CLID, cl.EmblemUrl, ch.Name AS Master, cl.RegDate
	FROM Clan cl(NOLOCK), Character ch(NOLOCK)
 	WHERE ch.CID = cl.MasterCID AND cl.Ranking>0 AND cl.DeleteFlag=0 AND cl.Name=@Name
END  

GO
SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

--------------------------------------------------------------------------

SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO

/* 캐릭터 이름으로 순위 검색 */    
CREATE PROC [spWebSearchTotalRankingByName]    
  @Name    varchar(24)    
AS  
SET NOCOUNT ON
BEGIN    
 SELECT Rank, Level, Name, XP, KillCount, DeathCount, UserID  
 FROM TotalRanking(NOLOCK)    
 WHERE Name = @Name    
END  


GO
SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

--------------------------------------------------------------------------

SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO


-- 자신의 랭킹 정보.
CREATE PROC spWebSearchTotalRankingByNetmarbleID
	@UserID varchar(20)
AS
SET NOCOUNT ON
BEGIN
	SELECT Rank, Level, Name, XP, KillCount, DeathCount, UserID 
	FROM TotalRanking (NOLOCK)
	WHERE UserID = @UserID
END

GO
SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

--------------------------------------------------------------------------

SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO


/* 게임 로그 추가 */
CREATE PROC [spInsertGameLog]
	@GameName	varchar(64),
	@Map		varchar(32),
	@GameType	varchar(24),
	@Round		int,
	@MasterCID	int,
	@PlayerCount	tinyint,
	@Players	varchar(1000)

AS
SET NOCOUNT ON
BEGIN TRAN
INSERT INTO GameLog (GameName, Map, GameType, Round, MasterCID, StartTime, PlayerCount, Players)
VALUES (@GameName, @Map, @GameType, @Round, @MasterCID, GETDATE(), @PlayerCount, @Players)
IF 0 <> @@ERROR BEGIN 
	ROLLBACK TRAN
	RETURN
END
COMMIT TRAN

GO
SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

--------------------------------------------------------------------------

SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO

-- 퀘스트 게임 로그 정보 저장 프로시져.
CREATE PROC spInsertQuestGameLog
	@GameName varchar(64)
,	@Master int 
,	@Player1 int 
,	@Player2 int
,	@Player3 int
,	@TotalQItemCount smallint 
,	@ScenarioID smallint 
,	@GamePlayTime tinyint 
AS
SET NOCOUNT ON

BEGIN TRAN
	INSERT INTO QuestGameLog(GameName, Master, Player1, Player2, Player3, TotalQItemCount, ScenarioID, StartTime, EndTime)
	VALUES (@GameName, @Master, @Player1, @Player2, @Player3, @TotalQItemCount, @ScenarioID, DATEADD(n, -(@GamePlayTime), GETDATE()), GETDATE() )
	IF 0 <> @@ERROR BEGIN -- 여기 추가.
		ROLLBACK TRAN
		RETURN
	END

	SELECT @@IDENTITY AS 'ORDERQGLID'
COMMIT TRAN


GO
SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

--------------------------------------------------------------------------

SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO

/* LoginInfo 얻어옴 */
CREATE PROC [spGetLoginInfo]
	@UserID		varchar(20)
AS
SET NOCOUNT ON
SELECT AID, UserID, Password FROM Login(nolock) WHERE UserID = @UserID



GO
SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

--------------------------------------------------------------------------


USE LogDB
GO

CREATE PROC spRegularUpdateConnLog
AS
 SET NOCOUNT ON

 DECLARE @Year char(4)
 DECLARE @Mon char(2)
 DECLARE @OldDate smalldatetime
 DECLARE @OldTableName varchar(128)

 SET @OldDate = DATEADD( mm, -1, GETDATE() )
 SET @Year = DATEPART(yy, @OldDate)
 SET @Mon = DATEPART(mm, @OldDate)

 SET @OldTableName = 'ConnLog_' + @Year + 
  CASE WHEN @Mon < 10 THEN '0' + CAST(@Mon AS char(1))
  ELSE CAST(@Mon AS char(2)) END

 EXEC sp_rename 'ConnLog', @OldTableName

 CREATE TABLE ConnLog(
  id int IDENTITY
 , AID int NOT NULL
 , Time smalldatetime
 , IPPart1 tinyint NOT NULL
 , IPPart2 tinyint NOT NULL
 , IPPart3 tinyint NOT NULL
 , IPPart4 tinyint NOT NULL
 , CountryCode3 char(3) )

 CREATE NONCLUSTERED INDEX IX_ConnLog_AID
 ON ConnLog( AID )

 CREATE NONCLUSTERED INDEX IX_ConnLog_Time
 ON ConnLog( Time )
GO

USE GunzDB
GO

--------------------------------------------------------------------------

SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO

/* LastConn, IP를 저장한다. */
CREATE PROC [spUpdateLastConnDate]
	@IP		varchar(20),
	@UserID		varchar(20)
AS
SET NOCOUNT ON
UPDATE Login SET LastConnDate=GETDATE(), LastIP=@IP WHERE UserID = @UserID


GO
SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

--------------------------------------------------------------------------

CREATE PROC [spInsertServerLog]
 @ServerID smallint
, @PlayerCount smallint
, @GameCount smallint
, @BlockCount int
, @NonBlockCount int
AS
 SET NOCOUNT ON
 INSERT INTO ServerLog(ServerID, PlayerCount, 
  GameCount, Time, BlockCount, NonBlockCount)
 VALUES (@ServerID, @PlayerCount, @GameCount, 
  GETDATE(), @BlockCount, @NonBlockCount )
GO

--------------------------------------------------------------------------

SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO


/* 서버 동접자 상태 */
CREATE PROC [spUpdateServerStatus]
  @CurrPlayer   smallint,
  @ServerID     int
AS
SET NOCOUNT ON
UPDATE ServerStatus 
Set CurrPlayer=@CurrPlayer, Time=GETDATE() 
WHERE ServerID=@ServerID


GO
SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

--------------------------------------------------------------------------

SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO

-- 팀멤버 얻어오기
CREATE PROC [spGetLadderTeamMemberByCID]
	@CID		int
AS
RETURN

GO
SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

--------------------------------------------------------------------------

SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO


/* 킬 로그 추가 */
CREATE PROC [spInsertKillLog]
	@AttackerCID	int,
	@VictimCID	int
AS
SET NOCOUNT ON
BEGIN TRAN
INSERT INTO KillLog (AttackerCID, VictimCID, Time)
VALUES (@AttackerCID, @VictimCID, GETDATE())
IF 0 <> @@ERROR BEGIN
	ROLLBACK TRAN
	RETURN
END
COMMIT TRAN

GO
SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

--------------------------------------------------------------------------

SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO

CREATE PROC [spLeague_FetchLeagueInfo]
AS
	RETURN
GO
SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

--------------------------------------------------------------------------
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO

CREATE PROC [spLeague_GetCID]
AS
	RETURN

GO
SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

--------------------------------------------------------------------------

SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO

create proc USP_sjr_TableSizeIncr

as
begin 
	SET NOCOUNT ON

	select identity(int,1,1) idx ,' insert sjr_TableSizeIncr (name,rows,reserved,date,index_size,unused) ' +char(10)+
	'exec sp_spaceused '+name  as sql  into #spaceusedTb
	from Gunzdb.dbo.sysobjects where xtype = 'U'
	 
	
	DECLARE @sql varchar(400) 
	DECLARE SQL_cursor CURSOR FOR 
	SELECT  sql
	FROM #spaceusedTb
	ORDER BY idx
	OPEN SQL_cursor
	FETCH NEXT FROM SQL_cursor 
	INTO @sql
	WHILE @@FETCH_STATUS = 0
	BEGIN
	   exec (@sql)
	   FETCH NEXT FROM SQL_cursor 
	   INTO @sql
	END
	CLOSE SQL_cursor
	DEALLOCATE SQL_cursor

end 
 

 

GO
SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

--------------------------------------------------------------------------

CREATE PROC spIPFltGetCustomIPList
AS
 SET NOCOUNT ON
 SELECT IPFrom, IPTo, IsBlock, CountryCode3, Comment FROM CustomIP(NOLOCK)
 ORDER BY IPFrom
GO

---------------------------------------------------------------------

CREATE PROC spIPFltCheckIsDuplicateRange
 @IPFrom bigint
, @IPTo bigint
, @Ret int OUTPUT
AS
 SET NOCOUNT ON
  IF EXISTS (SELECT CountryCode3 FROM CustomIP(NOLOCK) 
  WHERE (IPFrom <= @IPFrom AND IPTo >= @IPFrom) OR
   (IPFrom <= @IPTo AND IPTo >= @IPTo)) SET @Ret = 1
 ELSE SET @Ret = 0
GO

------------------------------------------------------------

CREATE PROC spIPFltGetBlockCountryCodeList
AS
 SET NOCOUNT ON
 SELECT CountryCode3, RoutingURL, IsBlock
 FROM BlockCountryCode(NOLOCK)
 ORDER BY CountryCode3
GO

------------------------------------------------------------------------------

CREATE PROC spIPFltGetIPtoCountryList
AS
 SET NOCOUNT ON
 SELECT IPFrom, IPTo, CountryCode3
 FROM IPtoCountry(NOLOCK)
 ORDER BY IPFrom
GO

INSERT INTO CountryCode
SELECT CountryCode3, CountryName
FROM IPtoCountry(NOLOCK)
GROUP BY CountryCode3, CountryName
ORDER BY CountryCode3 ASC

SELECT 'INSERT INTO CountryCode(CountryCode3, CountryName) VALUES (' +
 '''' + CountryCode3 + ''''  + ', ' + '''' + CountryName + '''' + ')'
FROM CountryCode(NOLOCK)
ORDER BY CountryCode2 ASC

--------------------------------------------------------------------------------

CREATE TABLE CountryCode(
 CountryCode3 char(3) PRIMARY KEY CLUSTERED
, CountryName varchar(50) )

INSERT INTO CountryCode
SELECT CountryCode3, CountryName
FROM IPtoCountry(NOLOCK)
GROUP BY CountryCode3, CountryName
ORDER BY CountryCode3 ASC

SELECT 'INSERT INTO CountryCode(CountryCode3, CountryName) VALUES (' +
 '''' + CountryCode3 + ''''  + ', ' + '''' + CountryName + '''' + ')'
FROM CountryCode(NOLOCK)
ORDER BY CountryCode2 ASC

GO

------------------------------------------------------------------------------------------------

CREATE PROC spIPFltGetCountryCode
AS
 SET NOCOUNT ON
 SELECT CountryCode3, CountryName
 FROM CountryCode(NOLOCK)
 ORDER BY CountryCode3 ASC
GO

--------------------------------------------------------------------

CREATE PROC spStartUpLocatorStatus
 @LocatorID int
, @IP varchar(15)
, @Port int
, @UpdateElapsedTime int
AS
 SET NOCOUNT ON 
 IF EXISTS (SELECT LocatorID FROM LocatorStatus(NOLOCK) 
	    WHERE LocatorID = @LocatorID) BEGIN
  UPDATE LocatorStatus 
  SET IP = @IP, Port = @Port, UpdateElapsedTime = @UpdateElapsedTime, 
   LastUpdatedTime = GETDATE()
  WHERE LocatorID = @LocatorID
 END
 ELSE BEGIN
  INSERT INTO LocatorStatus(LocatorID, IP, Port, UpdateElapsedTime, LastUpdatedTime)
  VALUES (@LocatorID, @IP, @Port, @UpdateElapsedTime, GETDATE())
 END
GO


------------------------------------------------------------------------------------------------

/* 클랜 목록 보기   
    한페이지 15개씩 고정, 최대 페이지 수를 위해 COUNT(*) 알아내지 말것.(이전,다음 페이지로 해결)   
    Arg1 : @Page (페이지넘버)  
    Arg2 : @Backward (생략하면 정상순서, 1일경우 역순      */  
CREATE PROC [spWebGetClanList]  
 @Page INT,  
 @Backward INT  = 0  
AS  
SET NOCOUNT ON
BEGIN  
 DECLARE @PageHead INT  
 DECLARE @RowCount INT  
  
 IF @Backward = 0  
 BEGIN  
  SELECT @RowCount = ((@Page -1) * 15 + 1)  
    
  SET ROWCOUNT @RowCount  
  SELECT @PageHead = CLID FROM Clan(NOLOCK) WHERE DeleteFlag=0 ORDER BY CLID DESC  
    
  SET ROWCOUNT 15  
  SELECT cl.CLID AS CLID, cl.Name as ClanName, c.Name AS Master, cl.RegDate AS RegDate, cl.EmblemUrl AS EmblemUrl, cl.Point AS Point  
  FROM Clan cl(NOLOCK), Character c(nolock)  
  WHERE cl.MasterCID=c.CID AND cl.DeleteFlag=0 AND cl.CLID<@PageHead   
  ORDER BY cl.CLID DESC  
 END  
 ELSE  
 BEGIN -- 역순  
  SELECT @RowCount = ((@Page -1) * 15 + 1)  
    
  SET ROWCOUNT @RowCount  
  SELECT @PageHead = CLID FROM Clan(NOLOCK) WHERE DeleteFlag=0 ORDER BY CLID  
    
  SET ROWCOUNT 15  
  SELECT CLID, ClanName, Master, RegDate, EmblemUrl, Point  
  FROM  
  (  
   SELECT TOP 15 cl.CLID AS CLID, cl.Name as ClanName, c.Name AS Master, cl.RegDate AS RegDate, cl.EmblemUrl AS EmblemUrl, cl.Point AS Point  
   FROM Clan cl(NOLOCK), Character c(nolock)  
   WHERE cl.MasterCID=c.CID AND cl.DeleteFlag=0 AND cl.CLID>=@PageHead ORDER BY cl.CLID  
  ) AS t  
  ORDER BY CLID DESC  
 END  
END  
 
GO
--------------------------------------------------------------------------------------

 -- 클랜이름 알아오기  
CREATE PROC [spWebGetCharClan]  -- 서버에서 spGetCharClan으로 사용.
 @CID   int  
AS  
 SET NOCOUNT ON
 SELECT cl.CLID AS CLID, cl.Name AS ClanName FROM ClanMember cm(nolock), Clan cl(nolock) WHERE cm.cid=@CID AND cm.CLID=cl.CLID  
GO

---------------------------------------------------------------------------------------

/* 클랜 목록찾기 (이름으로)  
    Arg1 : @Name (클랜이름) */  
CREATE PROC [spWebGetClanListSearchByName]
 @Name VARCHAR(24)  
AS  
SET NOCOUNT ON
BEGIN  
 SELECT TOP 20 cl.CLID AS CLID, cl.Name as ClanName, c.Name AS Master, cl.RegDate AS RegDate, cl.EmblemUrl AS EmblemUrl, cl.Point AS Point  
 FROM Clan cl(NOLOCK), Character c(NOLOCK)  
 WHERE cl.MasterCID=c.CID AND c.DeleteFlag=0 AND cl.Name=@Name   
 ORDER BY cl.CLID  
END  
GO

----------------------------------------------------------------------------------------

   -- 클랜원 알아오기  
CREATE PROC [spWebGetClanMember]  
 @CLID  int  
AS  
 SET NOCOUNT ON
 SELECT cm.clid AS CLID, cm.Grade AS ClanGrade, c.cid AS CID, c.name AS CharName  
 FROM ClanMember cm(nolock), Character c(nolock)  
 WHERE CLID=@CLID AND cm.cid=c.cid  
GO

----------------------------------------------------------------------------------------

/* 클랜 명예의 전당 보기 월별 10위까지   
 2004년 9월 ~ 현재저번달까지(이달 제외) */  
CREATE PROC [spWebGetClanHonorRanking]  
 @Year INT,  
 @Month INT  
AS  
SET NOCOUNT ON
BEGIN  
 SELECT TOP 10 r.Ranking, r.ClanName, r.Point, r.Wins, r.Losses, r.CLID, c.EmblemUrl   
 FROM ClanHonorRanking r(NOLOCK), Clan c(NOLOCK)  
 WHERE r.CLID=c.CLID AND Year = @Year AND Month = @Month  
 ORDER BY r.Ranking  
END  
GO

----------------------------------------------------------------------------------------

/* 클랜 역대 랭킹찾기  
    Arg1 : @Year (년도)   
    Arg2 : @Month (월)   
    Arg3 : @Page (페이지)   
    Arg4 : @Backward (역순) */  
CREATE  PROC [spWebGetClanRankingHistory]  
 @Year INT,  
 @Month INT,  
 @Page INT,  
 @Backward INT = 0  
AS  
SET NOCOUNT ON
BEGIN  
 /* 한페이지에 20개씩 보여준다 (속도를위해 갯수 고정) */  
 DECLARE @RowCount INT  
 DECLARE @PageHead INT  
  
 IF @Backward = 0  
 BEGIN  
  SELECT @RowCount = ((@Page -1) * 20 + 1)  
  SELECT TOP 20 Ranking, ClanName as ClanName, Point, Wins, Losses, CLID FROM ClanHonorRanking(NOLOCK)   
  WHERE Year=@Year AND Month=@Month AND Ranking>0 AND Ranking >= @RowCount ORDER BY Ranking  
 END  
 ELSE  
 BEGIN  
  SELECT @RowCount = ((@Page -1) * 20 + 1)  
   
  SET ROWCOUNT @RowCount  
  SELECT @PageHead = Ranking FROM Clan(NOLOCK) WHERE DeleteFlag=0 ORDER BY Ranking DESC  
   
  SET ROWCOUNT 20  
  SELECT  Ranking, RankIncrease=0, ClanName, Point, Wins, Losses, CLID, EmblemUrl=NULL FROM  
  (  
   SELECT TOP 20 Ranking, ClanName, Point, Wins, Losses, CLID FROM ClanHonorRanking(NOLOCK)   
   WHERE Year=@Year AND Month=@Month AND Ranking>0 AND Ranking <= @PageHead ORDER BY Ranking DESC  
  ) AS t ORDER BY Ranking  
 END  
END 
GO 
  
----------------------------------------------------------------------------------------

CREATE PROC [spWebGetClanRankingMaxPage]  
AS  
SET NOCOUNT ON
BEGIN  
 DECLARE @MaxPage INT  
 SELECT TOP 1 @MaxPage = Ranking / 20 + 1 FROM Clan(NOLOCK) WHERE DeleteFlag=0 AND Ranking>0 ORDER BY Ranking DESC  
-- SELECT @MaxPage  
 RETURN @MaxPage  
END
GO  
  
----------------------------------------------------------------------------------------

/* 클랜 랭킹찾기 (순위로)  
    Arg1 : @Ranking (순위) */  
CREATE PROC [spWebGetClanRankingSearchByRanking]  
 @Ranking INT  
AS  
SET NOCOUNT ON
BEGIN  
 SELECT TOP 20 Ranking, RankIncrease, Name as ClanName, Point, Wins, Losses, CLID, EmblemUrl FROM Clan(NOLOCK)   
 WHERE DeleteFlag=0 AND Ranking>0 AND Ranking=@Ranking ORDER BY Ranking  
END  
GO

-----------------------------------------------------------------------------------------------

CREATE PROC spInsertEvent 
 @AID int
, @CID int
, @EventName varchar(24)
AS
 SET NOCOUNT ON 
 INSERT INTO Event( AID, CID, RegDate, Checked, EventName )
 VALUES (@AID, @CID, GETDATE(), 0, @EventName)

GO

--------------------------------------------------------------------------------------------------

CREATE PROC spEventGetCharList  
 @UserID VARCHAR(20)  
AS  
BEGIN  
 SELECT c.CID, c.Level, c.Name FROM Account a(NOLOCK), Character c(NOLOCK)  
 WHERE UserID=@UserID AND a.AID = c.AID AND c.DeleteFlag=0  
 RETURN 1  
END 
GO 

--------------------------------------------------------------------------------------------

CREATE   PROC spEventGetPlayTime  
 @UserID VARCHAR(20)  
AS  
BEGIN  
 DECLARE @PlayTime INT  
 SELECT @PlayTime=SUM(l.PlayTime) FROM Account a(NOLOCK), Character c(NOLOCK), PlayerLog l(NOLOCK)  
 WHERE a.UserID=@UserID AND a.AID=c.AID AND c.DeleteFlag=0 AND c.CID=l.CID AND l.DisTime > '2005-08-18'  
   
 IF @PlayTime IS NULL  
 BEGIN  
  SELECT @PlayTime=0  
 END  
  
 SELECT @PlayTime=@PlayTime/60  
   
 SELECT @UserID, @PlayTime  
END
GO  
  
--------------------------------------------------------------------------------------------

CREATE    PROC spEventGetQuerifiedNewbie  
 @UserID VARCHAR(20)  
AS  
BEGIN  
 DECLARE @AID INT  
 DECLARE @RegDate DATETIME  
 SELECT @AID=AID, @RegDate=RegDate FROM Account(NOLOCK) WHERE UserID=@UserID  
   
 IF @RegDate < '2005-08-18' OR @RegDate IS NULL  
 BEGIN  
  SELECT @UserID, -1  
  RETURN -1  
 END  
   
 DECLARE @MaxLevel INT  
 SELECT @MaxLevel=MAX(Level) FROM Character(NOLOCK) WHERE AID=@AID AND DeleteFlag=0  
   
 IF @MaxLevel < 7 OR @MaxLevel IS NULL  
 BEGIN  
  SELECT @UserID, 0  
  RETURN 0  
 END  
   
 SELECT @UserID, 1  
 RETURN 1  
END 
GO
  
--------------------------------------------------------------------------------------------

CREATE   PROC spEventGetClanPointAcquire  
 @UserID VARCHAR(20)  
AS  
BEGIN  
 SELECT c.Name, m.CLID, r.Name, r.Point, r.Rank   
 FROM Account a(NOLOCK), Character c(NOLOCK), ClanMember m(NOLOCK), Event_ClanPointRanking r(NOLOCK)  
 WHERE a.UserID=@UserID AND a.AID=c.AID AND c.DeleteFlag=0 AND c.CID=m.CID AND m.CLID=r.CLID  
  
 RETURN 1  
END
GO  
  
--------------------------------------------------------------------------------------------------

CREATE PROC spAdmWebGetAccountInfoByUserID
	@UserID varchar( 20 )
AS
	SET NOCOUNT ON

	SELECT AID, UserID, Name, Age, Sex, UGradeID, RegDate
	FROM Account(NOLOCK)
	WHERE UserID = @UserID
GO

--------------------------------------------------------------------------

CREATE PROC spAdmWebGetAccountInfoByCharName
	@CharName varchar( 24 ) 
AS
	SET NOCOUNT ON

	SELECT a.UserID, a.AID, a.RegDate, a.UGradeID, a.Sex, a.Age, a.Name
	FROM Character c(NOLOCK) JOIN Account a(NOLOCK)
	ON c.Name = @CharName AND c.AID = a.AID
GO

--------------------------------------------------------------------------

CREATE PROC spAdmWebGetLiveCharListByUserID
	@UserID varchar( 20 )
AS 
	SET NOCOUNT ON

	SELECT c.Name, c.AID, c.CID, c.RegDate, c.PlayTime, c.LastTime, 
		c.Sex, c.CharNum, c.Level, c.XP, c.BP, c.KillCount, c.DeathCount
	FROM Account a(NOLOCK) JOIN Character c(NOLOCK)
	ON a.UserID = @UserID AND c.AID = a.AID
	WHERE c.DeleteFlag <> 1
	ORDER BY c.CharNum
GO

--------------------------------------------------------------------------

CREATE PROC spAdmWebGetLiveCharInfoByCharName
 @CharName varchar( 24 )
AS 
 SET NOCOUNT ON

 SELECT Name, AID, CID, RegDate, PlayTime, LastTime, Sex, 
  CharNum, Level, XP, BP, KillCount, DeathCount
 FROM Character(NOLOCK)
 WHERE Name = @CharName AND DeleteFlag <> 1
 ORDER BY CharNum 
GO

--------------------------------------------------------------------------

CREATE PROC spAdmWebGetAllCharInfoByUserID
 @UserID varchar( 20 )
AS
 SET NOCOUNT ON

 SELECT c.Name, c.AID, c.CID, c.RegDate, c.PlayTime, c.LastTime, 
  c.Sex, c.CharNum, c.Level, c.XP, c.BP, c.DeleteFlag, 
  c.DeleteName, c.KillCount, c.DeathCount
 FROM Account a(NOLOCK) JOIN Character c(NOLOCK)
 ON a.UserID = @UserID AND c.AID = a.AID
 ORDER BY c.DeleteFlag, c.CharNum
GO

--------------------------------------------------------------------------

CREATE PROC spAdmWebGetAllCharInfoByCharName
 @CharName varchar( 24 )
AS
 SET NOCOUNT ON
 
 SELECT Name, AID, CID, RegDate, PlayTime, LastTime, Sex,
  CharNum, Level, XP, BP, DeleteFlag, DeleteName, 
  KillCount, DeathCount
 FROM Character(NOLOCK)
 WHERE Name = @CharName
 ORDER BY DeleteFlag, CharNum
GO

--------------------------------------------------------------------------

CREATE PROC spAdmWebGetBountyItemPurchaseLogByCharName  
 @CharName varchar( 24 )  
AS  
 SET NOCOUNT ON  
  
 SELECT ipl.id AS ID, ipl.ItemID, i.Name, c.CID, 0 AS CIID, ipl.Bounty,    
  ipl.CharBounty, i.Slot, ipl.type, ipl.Date  
 FROM (Character c(NOLOCK) JOIN ItemPurchaseLogByBounty ipl(NOLOCK)  
 ON c.Name = @CharName AND ipl.CID = c.CID) JOIN Item i(NOLOCK)  
 ON i.ItemID = ipl.ItemID  
 ORDER BY ipl.Date DESC
GO

--------------------------------------------------------------------------

CREATE PROC spAdmWebGetBountyItemPurchaseLog
 @CID int
, @ItemID int
AS
 SET NOCOUNT ON

 SELECT ipl.id AS ID, c.Name AS CharName, ipl.ItemID, i.Name, c.CID, 
  0 AS CIID, ipl.Bounty, ipl.CharBounty, i.Slot, ipl.Type, ipl.Date
 FROM (Character c(NOLOCK) JOIN ItemPurchaseLogByBounty ipl(NOLOCK)
 ON c.CID = @CID AND ipl.CID = c.CID) JOIN Item i(NOLOCK)
 ON i.ItemID = ipl.ItemID
 WHERE ipl.ItemID = @ItemID
 ORDER BY ipl.id DESC
GO

--------------------------------------------------------------------------

CREATE PROC spAdmWebGetCharItemByCID
	@CID int
AS
BEGIN
	SET NOCOUNT ON

	SELECT ci.ItemID, i.Name, ci.CIID, ci.RegDate AS RegDate,  
		CASE 
		WHEN ci.RentHourPeriod IS NOT NULL THEN (RentHourPeriod) - (DateDiff(hh, RentDate, GETDATE()))
		WHEN ci.RentHourPeriod IS NULL THEN -1
		ELSE -2 -- error.
		END AS RentPeriodRemainderHour,
		CASE ci.CIID 
		WHEN c.head_slot THEN 'Head'
		WHEN c.chest_slot THEN 'Chest'
		WHEN c.hands_slot THEN 'Hands'
		WHEN c.legs_slot THEN 'Legs'
		WHEN c.feet_slot THEN 'Feet'
		WHEN c.fingerl_slot THEN 'Left finger'
		WHEN c.fingerr_slot THEN 'Right finger'
		WHEN c.melee_slot THEN 'Melee'
		WHEN c.primary_slot THEN 'Primary'
		WHEN c.secondary_slot THEN 'Secondary'
		WHEN c.custom1_slot THEN 'Custom1'
		WHEN c.custom2_slot THEN 'Custom2'
		ELSE 'Free item'
		END AS KeepOnPosition,
		CASE ci.CIID
		WHEN c.head_slot THEN 11
		WHEN c.chest_slot THEN 12
		WHEN c.hands_slot THEN 13
		WHEN c.legs_slot THEN 14
		WHEN c.feet_slot THEN 15
		WHEN c.fingerl_slot THEN 16
		WHEN c.fingerr_slot THEN 17
		WHEN c.melee_slot THEN 18
		WHEN c.primary_slot THEN 19
		WHEN c.secondary_slot THEN 20
		WHEN c.custom1_slot THEN 21
		WHEN c.custom2_slot THEN 22
		ELSE 23
		END AS Orders
	FROM (Character c(NOLOCK) JOIN CharacterItem ci(NOLOCK)
	ON c.CID = @CID AND ci.CID = c.CID) JOIN Item i(NOLOCK)
	ON i.ItemID = ci.ItemID
	ORDER BY Orders 
END
GO

--------------------------------------------------------------------------

CREATE PROC spAdmWebGetCharQuestItem
	@CharName varchar( 24 )
AS	
BEGIN
	SET NOCOUNT ON

	SELECT QuestItemInfo
	FROM Character( NOLOCK )
	WHERE Name = @CharName
END
GO

--------------------------------------------------------------------------

CREATE PROC spAdmWebGetCharLogByCharName
 @CharName varchar(24)
AS
 SET NOCOUNT ON

 SELECT a.UserID, cml.CharName, cml.Type, cml.Date
 FROM CharacterMakingLog cml(NOLOCK) JOIN Account a(NOLOCK)
 ON cml.CharName = @CharName AND a.AID = cml.AID
GO

--------------------------------------------------------------------------

CREATE PROC spAdmWebGetCharQuestItemInfoByCID
	@CID int
AS
	SET NOCOUNT ON

	SELECT QuestItemInfo FROM Character(NOLOCK) WHERE CID = @CID
GO

--------------------------------------------------------------------------

CREATE PROC spAdmWebGetAllSimpleCharInfoByOneCharName
 @CharName varchar( 24 )
AS
 SET NOCOUNT ON

 SELECT c2.Name, c2.CID
 FROM (Character c1(NOLOCK) JOIN Account a(NOLOCK)
 ON c1.Name = 'sunge_se' AND a.AID = c1.AID) JOIN Character c2(NOLOCK)
 ON c2.AID = a.AID
 ORDER BY c2.DeleteFlag, c2.CharNum
GO

------------------------------------------------------------------------------

CREATE PROC spAdmWebGetSimpleLiveCharInfoByOneCharName
	@CharName varchar( 24 )
AS
	SET NOCOUNT ON

	DECLARE @AID int
	
	SELECT @AID = a.AID
	FROM Character c(NOLOCK) JOIN Account a(NOLOCK)
	ON c.Name = @CharName AND a.AID = c.AID

	IF @AID IS NULL RETURN

	SELECT Name, CID FROM Character(NOLOCK) WHERE AID = @AID AND DeleteFlag <> 1
	ORDER BY CharNum
GO

------------------------------------------------------------------------------

CREATE PROC spAdmWebGetAccountInfoByCharName
	@CharName varchar( 24 )
AS
	SET NOCOUNT ON

	SELECT a.AID, a.UserID, a.UGradeID, a.RegDate, a.Name, a.Age, a.Sex
	FROM Character c(NOLOCK) JOIN Account a(NOLOCK)
	ON c.Name = @CharName AND a.AID = c.AID
GO

------------------------------------------------------------------------------

CREATE PROC spAdmWebGetAllCharNameCIDByUserID
	@UserID varchar(20)
AS
	SET NOCOUNT ON

	SELECT c.Name, c.CID, c.DeleteFlag
	FROM Account a(NOLOCK) JOIN Character c(NOLOCK)
	ON a.UserID = @UserID AND c.AID = a.AID
	ORDER BY c.DeleteFlag, c.CharNum
GO

------------------------------------------------------------------------------

CREATE PROC spAdmWebGetLiveCharNameCIDByUserID
	@UserID varchar(20)
AS
	SET NOCOUNT ON 

	SELECT c.Name, c.CID, c.DeleteFlag
	FROM Account a(NOLOCK) JOIN Character c(NOLOCK)
	ON a.UserID = @UserID AND c.AID = a.AID
	WHERE c.DeleteFlag <> 1
	ORDER BY c.DeleteFlag, c.CharNum
GO

------------------------------------------------------------------------------

CREATE PROC spAdmWebChangeCharName
 @CID int
, @CharName varchar(24)
, @GMID varchar(20)
, @Ret int OUTPUT
AS
 SET NOCOUNT ON
 IF NOT EXISTS( SELECT CID FROM Character(NOLOCK) 
  WHERE (DeleteFlag <> 1) AND (Name = @CharName)) BEGIN
  UPDATE Character SET Name = @CharName WHERE CID = @CID
  IF 0 = @@ROWCOUNT BEGIN
   SET @Ret = 0
   RETURN @Ret
  END
 END
 ELSE BEGIN
  SET @Ret = 0
  RETURN @Ret
 END

 SET @Ret = 1
 RETURN @Ret
GO

------------------------------------------------------------------------------

CREATE PROC spAdmWebChangeCharKillCount
 @CID int
, @KillCount int
, @GMID varchar(20)
, @Ret int OUTPUT
AS
 SET NOCOUNT ON
 IF (0 > @KillCount) BEGIN
  SET @Ret = 0
  RETURN @Ret
 END

 UPDATE Character SET KillCount = @KillCount 
 WHERE CID = @CID
 IF 0 = @@ROWCOUNT BEGIN 
  SET @Ret = 0
  RETURN @Ret
 END

 SET @Ret = 1
 RETURN @Ret
GO

------------------------------------------------------------------------------

CREATE PROC spAdmWebChangeCharDeathCount
 @CID int
, @DeathCount int
, @GMID varchar(20)
, @Ret int OUTPUT
AS
 SET NOCOUNT ON

 IF (0 > @DeathCount) BEGIN
  SET @Ret = 0
  RETURN @Ret
 END

 UPDATE Character SET DeathCount = @DeathCount
 WHERE CID = @CID
 IF 0 = @@ROWCOUNT BEGIN
  SET @Ret = 0
  RETURN @Ret
 END

 SET @Ret = 1
 RETURN @Ret
GO

------------------------------------------------------------------------------

CREATE PROC spAdmWebEditCharPlayTime
 @CID int
, @PlayTime int
, @GMID varchar(20)
, @Ret int OUTPUT
AS
 SET NOCOUNT ON 
 IF (0 > @PlayTime) BEGIN
  SET @Ret = 0
  RETURN @Ret
 END

 UPDATE Character SET PlayTime = @PlayTime WHERE CID = @CID
 IF 0 = @@ROWCOUNT BEGIN 
  SET @Ret = 0
  RETURN @Ret
 END
	
 SET @Ret = 1
 RETURN @Ret
GO
------------------------------------------------------------------------------

-- 캐릭터 Level 변경 프로시져	  
CREATE PROC spAdmWebEditCharLevel  
 @CID int  
, @Level smallint  
, @GMID varchar(20)  
, @Ret int OUTPUT  
AS  
 SET NOCOUNT ON  
  
 IF (1 > @Level) OR (99 < @Level)  BEGIN  
  SET @Ret = 0  
  RETURN @Ret  
 END  

 IF NOT EXISTS (SELECT CID FROM Character(NOLOCK) WHERE CID = @CID) BEGIN
  SET @Ret = 0
  RETURN @Ret
 END
  
 IF EXISTS (SELECT CID FROM Character(NOLOCK)   
  WHERE CID = @CID AND Level = @Level) BEGIN  
  SET @Ret = 1  
  RETURN @Ret  
 END  
  
 DECLARE @XP int  
  
 SELECT @XP = MinXP FROM Level(NOLOCK) WHERE Level = @Level  
 IF @XP IS NULL BEGIN  
  SET @Ret = 0 
  RETURN @Ret  
 END  
  
 UPDATE Character SET Level = @Level, XP = @XP WHERE CID = @CID AND DeleteFlag <> 1  
 IF (0 <> @@ERROR) OR (0 = @@ROWCOUNT) BEGIN  
  SET @Ret = 0 
  RETURN @Ret  
 END  
  
 SET @Ret = 1  
 RETURN @Ret  
GO

------------------------------------------------------------------------------

CREATE PROC spAdmWebEditCharBP
 @CID int
, @BP int
, @GMID varchar(20)
, @Ret int OUTPUT
AS
 SET NOCOUNT ON
 UPDATE Character SET BP = @BP WHERE CID = @CID
 IF 0 = @@ROWCOUNT BEGIN
  SET @Ret = 0
  RETURN @Ret
 END

 SET @Ret = 1
 RETURN @Ret
GO

------------------------------------------------------------------------------

-- 중앙은행 아이템지급  프로시져
CREATE PROC spAdmWebInsertAccountItem
 @AID int
, @ItemID int
, @Period int 
, @GMID varchar(20)
, @Ret int OUTPUT
AS
 SET NOCOUNT ON
 IF (500001 > @ItemID) OR ((@Period IS NOT NULL) AND (0 > @Period)) BEGIN
  SET @Ret = 0
  RETURN @Ret
 END

 IF NOT EXISTS (SELECT AID FROM Account(NOLOCK) WHERE AID = @AID) BEGIN
  SET @Ret = 0
  RETURN @Ret
 END

 DECLARE @RentHourPeriod int
 DECLARE @RentDate datetime
	
 IF (0 = @Period) OR (@Period IS NULL)
  SELECT @RentHourPeriod = NULL, @RentDate = NULL
 ELSE
  SELECT @RentHourPeriod = @Period, @RentDate = GETDATE()

 INSERT INTO AccountItem( AID, ItemID, RentDate, RentHourPeriod)
 VALUES (@AID, @ItemID, @RentDate, @RentHourPeriod )
 IF (0 <> @@ERROR) OR (0 = @@ROWCOUNT) BEGIN
  SET @Ret = 0
  RETURN @Ret
 END

 SET @Ret = 1
 RETURN @Ret
GO

------------------------------------------------------------------------------

-- 캐릭터 장비창 아이템지급  프로시져, CashItem은 지급할수 없음.
CREATE PROC spAdmWebInsertCharacterItem
	@CID int
,	@ItemID int
,	@Period smallint 
,	@GMID varchar(20)
,	@Ret int OUTPUT
AS
	SET NOCOUNT ON 
	IF (500000 < @ItemID) OR ((@Period IS NOT NULL) AND (0 > @Period)) BEGIN
		SET @Ret = 0
		RETURN @Ret
	END

	IF NOT EXISTS( SELECT CID FROM Character(NOLOCK) WHERE CID = @CID) BEGIN
		SET @Ret = 0
		RETURN @Ret
	END

	DECLARE @RentHourPeriod smallint
	DECLARE @RentDate datetime
	
	IF (0 = @Period) OR (@Period IS NULL)
		SELECT @RentHourPeriod = NULL, @RentDate = NULL
	ELSE
		SELECT @RentHourPeriod = @Period, @RentDate = GETDATE()

	INSERT INTO CharacterItem( CID, ItemID, RegDate, RentDate, RentHourPeriod )
	VALUES (@CID, @ItemID, GETDATE(), @RentDate, @RentHourPeriod )
	IF (0 <> @@ERROR) OR (0 = @@ROWCOUNT) BEGIN
		SET @Ret = 0
		RETURN @Ret
	END

	SET @Ret = 1
	RETURN @Ret
GO

------------------------------------------------------------------------------

-- 세트 아이템 지급 추가.
CREATE PROC spAdmWebInsertSetItem
	@UserID varchar( 20 )
,	@CSSID int
,	@RentHourPeriod smallint
,	@GMID varchar(20)
,	@Ret int OUTPUT
AS 
 SET NOCOUNT ON
  
 DECLARE @AID  int  
   
 SELECT @AID = AID FROM Account WHERE UserID = @UserID  
  
 -- 존제하는 유저인지 검사.  
 IF @AID IS NULL  
 BEGIN  
  SET @Ret = 0
  RETURN @Ret
 END  
 ELSE  
 BEGIN  
  DECLARE @RentDate  datetime     
  
  -- @RentHourPeriod값을 가지고 기간제인지 검사.  
  IF @RentHourPeriod = 0 OR @RentHourPeriod IS NULL  
  BEGIN  
   -- 기간제 아이템일 경우 영구 아이템 판매 여부 검사  
   DECLARE @RentType  TINYINT  
   DECLARE @RCSSPID  INT  
  
   SELECT @RentType = RentType FROM CashSetShop WHERE CSSID=@CSSID  
   IF @RentType = 1  
   BEGIN  
    SELECT @RCSSPID = RCSSPID FROM RentCashSetShopPrice WHERE CSSID=@CSSID AND RentHourPeriod is NULL  
    IF @RCSSPID IS NULL  
    BEGIN  
     SET @Ret = 0
     RETURN @Ret
    END  
   END  
  
   -- 일반 아이템일 경우  
   SET @RentDate = NULL  
  END  
  ELSE  
  BEGIN  
   SET @RentDate = GETDATE()  
  END  
      
  BEGIN TRAN  
  
  DECLARE curBuyCashSetItem  INSENSITIVE CURSOR  
  
  FOR  
   SELECT CSID FROM CashSetItem (NOLOCK) WHERE CSSID = @CSSID  
  FOR READ ONLY  
  
  OPEN curBuyCashSetItem   
  
  DECLARE @varCSID  int  
  DECLARE @ItemID   int  
  
  FETCH FROM curBuyCashSetItem INTO @varCSID  
  
  WHILE @@FETCH_STATUS = 0  
  BEGIN  
   SELECT @ItemID = cs.ItemID  
   FROM CashShop cs (NOLOCK)   
   WHERE cs.CSID = @varCSID   
  
   IF @ItemID IS NOT NULL  
   BEGIN  
    -- 아이템 생성.  
    INSERT INTO AccountItem(AID, ItemID, RentDate, RentHourPeriod)  
    VALUES (@AID, @ItemID, @RentDate, @RentHourPeriod)  
   END  
  
   FETCH curBuyCashSetItem  INTO @varCSID  
  END  
  
  CLOSE curBuyCashSetItem   
  DEALLOCATE curBuyCashSetItem   
  
  -- GM로그 기록.
  
  COMMIT TRAN  
  SET @Ret = 1
  RETURN @Ret
 END 
GO

------------------------------------------------------------------------------

-- 계정정보 조회  프로시져
CREATE PROC spAdmWebGetAccountInfoByAID  
	@AID int
AS  
 	SET NOCOUNT ON  
  
 	SELECT AID, UserID, Name, Age, Sex, UGradeID, RegDate  
 	FROM Account(NOLOCK)  
 	WHERE AID = @AID
GO

------------------------------------------------------------------------------

-- 캐릭터 정보 조회  프로시져 (삭제된 캐릭터 제외)
CREATE PROC spAdmWebGetLiveCharInfoByAID
 @AID int
AS
 SET NOCOUNT ON

 SELECT c.Name, c.AID, c.CID, c.RegDate, c.PlayTime, c.LastTime, 
  c.Sex, c.CharNum, c.Level, c.XP, c.BP, c.KillCount, c.DeathCount
 FROM Account a(NOLOCK) JOIN Character c(NOLOCK)
 ON a.AID = @AID AND c.AID = a.AID 
 WHERE c.DeleteFlag <> 1
GO

------------------------------------------------------------------------------

-- 캐릭터 정보 조회  프로시져 (삭제된 캐릭터 포함)
CREATE PROC spAdmWebGetAllCharInfoByAID  
 @AID int  
AS  
 SET NOCOUNT ON  
  
 SELECT c.Name, c.AID, c.CID, c.RegDate, c.PlayTime, c.LastTime
  , c.Sex, c.CharNum, c.Level, c.XP, c.BP, c.KillCount, c.DeathCount
  , c.DeleteFlag, c.DeleteName  
 FROM Account a(NOLOCK) JOIN Character c(NOLOCK)  
 ON a.AID = @AID AND c.AID = a.AID
GO

------------------------------------------------------------------------------

-- 캐릭터 삭제  프로시져
CREATE PROC spAdmWebDeleteChar
 @AID  int
, @CharNum smallint
, @CharName varchar(24)
, @GMID varchar(20)
, @Ret int OUTPUT	
AS
 SET NOCOUNT ON 

 DECLARE @CID int
 DECLARE @ErrSlot int
 DECLARE @ErrDelInfo int
 DECLARE @ErrName int

 SELECT @CID = CID FROM Character(NOLOCK) 
 WHERE AID = @AID AND Name = @CharName AND CharNum = @CharNum
 IF @CID IS NULL BEGIN 
  SET @Ret = 0
  RETURN @Ret
 END

 BEGIN TRAN
 -- 캐쉬아이템은 중앙은행으로 돌려줘야 함.
 INSERT INTO AccountItem( AID, ItemID, RentDate, RentHourPeriod, Cnt )
 SELECT @AID AS AID, ItemID, RentDate, RentHourPeriod, Cnt
 FROM CharacterItem(NOLOCK)
 WHERE CID = @CID AND ItemID > 499999
 IF 0 <> @@ERROR BEGIN 
  ROLLBACK TRAN
  SET @Ret = 0
  RETURN @Ret
 END

 DELETE CharacterItem WHERE CID = @CID
 IF 0 <> @@ERROR BEGIN 
  ROLLBACK TRAN
  SET @Ret = 0
  RETURN @Ret
 END

 UPDATE Character SET head_slot = NULL, chest_slot = NULL, hands_slot = NULL,
 legs_slot = NULL, feet_slot = NULL, fingerl_slot = NULL, 
 fingerr_slot = NULL, melee_slot = NULL, primary_slot = NULL, 
 secondary_slot = NULL, custom1_slot = NULL, custom2_slot = NULL
 WHERE CID = @CID
 SET @ErrSlot = @@ROWCOUNT

 UPDATE Character SET DeleteName = Name, DeleteFlag = 1 WHERE CID = @CID
 SET @ErrDelInfo = @@ROWCOUNT

 UPDATE Character SET Name = '' WHERE CID = @CID
 SET @ErrName = @@ROWCOUNT

 IF (0 = @ErrSlot) OR (0 = @ErrDelInfo) OR (0 = @ErrName) BEGIN
  ROLLBACK TRAN
  SET @Ret = 0
  RETURN @Ret
 END
 COMMIT TRAN
	
 SET @Ret = 1
 RETURN @Ret
GO

------------------------------------------------------------------------------

--  캐릭터 복구  프로시져 
CREATE   PROC spAdmWebUndeleteCharacter    
 @AID int    
, @CID int
, @GMID varchar(20)  
, @Ret int OUTPUT    
AS    
 SET NOCOUNT ON   
  
 IF EXISTS (SELECT LiveChar.CID FROM Character DelChar(NOLOCK) JOIN Character LiveChar(NOLOCK)
	ON DelChar.CID = @CID AND DelChar.DeleteFlag = 1 AND LiveChar.Name = DelChar.DeleteName
	WHERE LiveChar.DeleteFlag <> 1) BEGIN
  SET @Ret = 0    
  RETURN @Ret   
 END    
  
 DECLARE @CharCount int     
    
 SELECT @CharCount = COUNT(CID) FROM Character(NOLOCK) WHERE AID = @AID AND DeleteFlag <> 1    
 IF 4 > @CharCount BEGIN     
  DECLARE @FreeNum int    
  DECLARE @tb table( a int )  
  
  INSERT @tb VALUES( 0 )  
  INSERT @tb VALUES( 1 )  
  INSERT @tb VALUES( 2 )  
  INSERT @tb VALUES( 3 )  
  
  SELECT TOP 1 @FreeNum = t.a  
  FROM @tb t LEFT OUTER JOIN Character c(NOLOCK)  
  ON c.AID = @AID AND c.DeleteFlag <> 1 AND c.CharNum = t.a  
  WHERE c.CharNum IS NULL  
  
  IF @FreeNum IS NULL BEGIN    
   SET @Ret = 0    
   RETURN @Ret    
  END    
    
  BEGIN TRAN    
  UPDATE Character     
  SET Name = DeleteName, CharNum = @FreeNum, DeleteFlag = 0, DeleteName = ''
  WHERE CID = @CID AND AID = @AID AND DeleteFlag = 1 
  IF 0 = @@ROWCOUNT BEGIN    
   ROLLBACK TRAN    
   SET @Ret = 0    
   RETURN  @Ret  
  END    
  COMMIT TRAN    
  SET @Ret = 1    
  RETURN @Ret  
 END
GO


------------------------------------------------------------------------------

-- 중앙은행 아이템 삭제.
CREATE PROC spAdmWebDeleteAccountItem
	@AID int
,	@AIID int
,	@ItemID int
,	@GMID varchar(20)
,	@Ret int OUTPUT
AS
 SET NOCOUNT ON 

 IF NOT EXISTS (SELECT AID FROM Account(NOLOCK) 
 WHERE AID = @AID) BEGIN
  SET @Ret = 0
  RETURN @Ret	
 END

 DELETE AccountItem WHERE AIID = @AIID AND AID = @AID AND ItemID = @ItemID
 IF 0 <> @@ERROR BEGIN
  SET @Ret = 0
  RETURN @Ret
 END

 SET @Ret = 1
 RETURN @Ret
GO

------------------------------------------------------------------------------

-- 캐릭터 아이템 삭제.
CREATE PROC spAdmWebDeleteCharacterItem
 @CID int
, @CIID int
, @ItemID int
, @GMID varchar(20)
, @Ret int OUTPUT
AS
 SET NOCOUNT ON

 IF NOT EXISTS (SELECT CID FROM Character(NOLOCK) WHERE CID = @CID) BEGIN
  SET @Ret = 0
  RETURN @Ret
 END

 -- 삭제하려는 아이템을 착용하고 있다면 먼저 해제시쳐야 함.
 BEGIN TRAN
 UPDATE Character SET head_slot = NULL WHERE CID = @CID AND head_slot = @CIID
 UPDATE Character SET chest_slot = NULL WHERE CID = @CID AND chest_slot = @CIID
 UPDATE Character SET hands_slot = NULL WHERE CID = @CID AND hands_slot = @CIID
 UPDATE Character SET legs_slot = NULL WHERE CID = @CID AND legs_slot = @CIID
 UPDATE Character SET feet_slot = NULL WHERE CID = @CID AND feet_slot = @CIID
 UPDATE Character SET fingerl_slot = NULL WHERE CID = @CID AND fingerl_slot = @CIID
 UPDATE Character SET fingerr_slot = NULL WHERE CID = @CID AND fingerr_slot = @CIID
 UPDATE Character SET melee_slot = NULL WHERE CID = @CID AND melee_slot = @CIID
 UPDATE Character SET primary_slot = NULL WHERE CID = @CID AND primary_slot = @CIID
 UPDATE Character SET secondary_slot = NULL WHERE CID = @CID AND secondary_slot = @CIID
 UPDATE Character SET custom1_slot = NULL WHERE CID = @CID AND custom1_slot = @CIID
 UPDATE Character SET custom2_slot = NULL WHERE CID = @CID AND custom2_slot = @CIID

 DELETE CharacterItem WHERE CIID = @CIID AND CID = @CID AND ItemID = @ItemID
 IF 0 <> @@ERROR BEGIN
  ROLLBACK TRAN
  SET @Ret = 0
  RETURN @Ret
 END
 COMMIT TRAN	

 SET @Ret = 1
 RETURN @Ret
GO

---------------------------------------------------------------------------------------

CREATE TABLE AccountPenaltyLog( 
	PenaltyLogID int IDENTITY PRIMARY KEY NONCLUSTERED
,	AID int 
,	UGradeID int
,	DayLeft int
,	RegDate smalldatetime
,	GMID varchar(20) )
GO

CREATE CLUSTERED INDEX IX_AccountPenaltyLog_AID
ON AccountPenaltyLog( AID )
GO

------------------------------------------------------------------------------------------

CREATE PROC spAdmWebUpdateAccountPenaltyPeriod
	@AID int
,	@UGradeID int
,	@Period int 
,	@GMID varchar(20)
,	@Ret int OUTPUT
AS
	SET NOCOUNT ON

	IF NOT EXISTS (SELECT AID FROM Account(NOLOCK) WHERE AID = @AID) BEGIN
		SET @Ret = 0
		RETURN @Ret
	END

	IF (0 > @Period) OR (@Period IS NULL) OR (0 > @UGradeID) OR (@UGradeID IS NULL) BEGIN
		SET @Ret = 0
		RETURN @Ret
	END

	BEGIN TRAN
	UPDATE Account SET UGradeID = @UGradeID WHERE AID = @AID
	IF 0 = @@ROWCOUNT BEGIN
		ROLLBACK TRAN
		SET @Ret = 0
		RETURN @Ret
	END

	IF NOT EXISTS (SELECT AID FROM AccountPenaltyPeriod(NOLOCK) WHERE AID = @AID) BEGIN
		IF 0 < @Period BEGIN
			-- 처음 재제를 받을경우.
			INSERT INTO AccountPenaltyPeriod( AID, DayLeft ) VALUES (@AID, @Period)
			IF 0 <> @@ERROR BEGIN 
				ROLLBACK TRAN
				SET @Ret = 0
				RETURN @Ret
			END
		END
	END
	ELSE BEGIN
		IF 0 < @Period BEGIN
			-- 이미 다른 재제를 받을경우 기간만 수정함.
			UPDATE AccountPenaltyPeriod SET DayLeft = @Period WHERE AID = @AID
				IF 0 = @@ROWCOUNT BEGIN
				ROLLBACK TRAN
				SET @Ret = 0
				RETURN @Ret
			END
		END
		ELSE BEGIN
			DELETE AccountPenaltyPeriod WHERE AID = @AID
			IF 0 <> @@ERROR BEGIN
				ROLLBACK TRAN	
				SET @Ret = 0
				RETURN @Ret
			END
		END
	END

	INSERT INTO AccountPenaltyLog( AID, UGradeID, DayLeft, RegDate, GMID )
	VALUES (@AID, @UGradeID, @Period, GETDATE(), @GMID )
	IF 0 <> @@ERROR BEGIN 
		ROLLBACK TRAN
		SET @Ret = 0
		RETURN @Ret
	END
	COMMIT TRAN

	SET @Ret = 1
	RETURN @Ret
GO

-----------------------------------------------------------------------------------------------------------------

CREATE TABLE CharacterMgrType(
	CharMgrTypeID tinyint PRIMARY KEY CLUSTERED
,	Description varchar(20) )
GO

-----------------------------------------------------------------------------------------------------------------

CREATE TABLE CharacterMgrLogByGM(
	CharMgrLogID int IDENTITY PRIMARY KEY NONCLUSTERED
,	CID int FOREIGN KEY REFERENCES Character(CID) ON DELETE NO ACTION
,	CharName varchar(24)  NOT NULL
,	CharMgrTypeID tinyint FOREIGN KEY REFERENCES CharacterMgrType(CharMgrTypeID) ON DELETE NO ACTION
,	GMID varchar(20) NOT NULL
,	NewName varchar(24)
,	OrgValue int
,	NewValue int
,	RegDate smalldatetime )
GO

CREATE CLUSTERED INDEX IX_CharacterMgrLogByGM_CID
ON CharacterMgrLogByGM( CID )

CREATE NONCLUSTERED INDEX IX_CharacterMgrLogByGM_CharName
ON CharacterMgrLogByGM( CharName )

CREATE NONCLUSTERED INDEX IX_CharacterMgrLogByGM_CharMgrTypeID
ON CharacterMgrLogByGM( CharMgrTypeID )

CREATE NONCLUSTERED INDEX IX_CharacterMgrLogByGM_RegDate
ON CharacterMgrLogByGM( RegDate )
GO

-------------------------------------------------------------------------------------------------------------------

CREATE PROC spAdmWebGetClanInfoByCharName
 @CharName varchar(24)
AS
 SET NOCOUNT ON

 DECLARE @CLID int

 SELECT @CLID = cm.CLID
 FROM Character c(NOLOCK) JOIN ClanMember cm(NOLOCK)
 ON c.Name = @CharName AND cm.CID = c.CID
 IF @CLID IS NULL RETURN

 SELECT cl.CLID, cl.Name, c.Name AS 'MastName', cl.Introduction, cl.RegDate, cl.HomePage, cl.EmblemURL, cl.DeleteFlag
 FROM Clan cl(NOLOCK) JOIN Character c(NOLOCK)
 ON cl.CLID = @CLID AND cl.MasterCID = c.CID
GO

-------------------------------------------------------------------------------------------------------------------

CREATE PROC spAdmWebGetClanInfoByClanName
 @ClanName varchar(24)
AS
 SET NOCOUNT ON

 SELECT cl.CLID, cl.Name, c.Name AS 'MastName', cl.Introduction, 
  cl.RegDate, cl.HomePage, cl.EmblemURL, cl.DeleteFlag
 FROM Clan cl(NOLOCK) JOIN Character c(NOLOCK)
 ON cl.Name = @ClanName AND cl.MasterCID = c.CID
GO

-------------------------------------------------------------------------------------------------------------------

CREATE PROC spAdmWebGetClanRanknfoByCLID
 @CLID int 
AS
 SET NOCOUNT ON

 SELECT Exp, Point, TotalPoint, Wins, Losses, Ranking, LastDayRanking, 
  LastMonthRanking, RankIncrease
 FROM Clan(NOLOCK)
 WHERE CLID = @CLID
GO

-------------------------------------------------------------------------------------------------------------------

CREATE PROC spAdmWebGetClanMemberInfoByCLID
 @CLID int
AS
 SET NOCOUNT ON 

 SELECT cm.CLID, cm.Grade, a.UserID, c.Name, cm.CID, c.Level, 
  cm.ContPoint, cm.RegDate
 FROM (ClanMember cm(NOLOCK) JOIN Character c(NOLOCK)
 ON cm.CLID = @CLID AND c.CID = cm.CID) JOIN Account a( NOLOCK)
 ON a.AID = c.AID
 WHERE c.DeleteFlag <> 1
 ORDER BY cm.Grade, cm.RegDate
GO

-------------------------------------------------------------------------------------------------------------------

CREATE PROC spAdmWebChangeClanName
 @CLID int
, @NewClanName varchar(24)
, @GMID varchar(20)
, @Ret int OUTPUT
AS
 SET NOCOUNT ON 

 IF EXISTS (SELECT CLID FROM Clan(NOLOCK) 
  WHERE Name = @NewClanName AND DeleteFlag <> 1) BEGIN
  SET @Ret = 0
  RETURN @Ret
 END

 UPDATE Clan SET Name = @NewClanName 
 WHERE CLID = @CLID AND DeleteFlag <> 1
 IF 0 = @@ROWCOUNT BEGIN
  SET @Ret = 0
  RETURN @Ret
 END

 SET @Ret = 1
 RETURN @Ret
GO

-------------------------------------------------------------------------------------------------------------------

CREATE PROC spAdmWebChangeClanHomepage
 @CLID int
, @NewHomePage varchar(128)
, @GMID varchar(20)
, @Ret int OUTPUT
AS
 SET NOCOUNT ON 

 UPDATE Clan SET Homepage = @NewHomepage 
  WHERE CLID = @CLID AND DeleteFlag <> 1
 IF 0 = @@ROWCOUNT BEGIN 
  SET @Ret = 0
  RETURN @Ret
 END

 SET @Ret = 1
 RETURN @Ret
GO

-------------------------------------------------------------------------------------------------------------------

CREATE PROC spAdmWebChangeClanEXP
 @CLID int
, @NewEXP int
, @GMID varchar(20)
, @Ret int OUTPUT
AS
 SET NOCOUNT ON

 IF 0 > @NewEXP BEGIN
  SET @Ret = 0
  RETURN @Ret
 END

 UPDATE Clan SET EXP = @NewEXP 
  WHERE CLID = @CLID AND DeleteFlag <> 1
 IF 0 = @@ROWCOUNT BEGIN
  SET @Ret = 0
  RETURN @Ret
 END

 SET @Ret = 1
 RETURN @Ret
GO

-------------------------------------------------------------------------------------------------------------------

CREATE PROC spAdmWebChangeClanPoint
 @CLID int
, @NewClanPoint int
, @GMID varchar(20)
, @Ret int OUTPUT
AS
 SET NOCOUNT ON

 IF 0 > @NewClanPoint BEGIN 
  SET @Ret = 0
  RETURN @Ret
 END

 UPDATE Clan SET Point = @NewClanPoint 
  WHERE CLID = @CLID AND DeleteFlag <> 1
 IF 0 = @@ROWCOUNT BEGIN
  SET @Ret = 0
  RETURN @Ret
 END

 SET @Ret = 1
 RETURN @Ret
GO

-------------------------------------------------------------------------------------------------------------------

CREATE PROC spAdmWebChangeClanTotalPoint
 @CLID int
, @NewClanTotalPoint int
, @GMID varchar(20)
, @Ret int OUTPUT
AS
 SET NOCOUNT ON 

 IF 0 > @NewClanTotalPoint BEGIN
  SET @Ret = 0
  RETURN @Ret
 END

 UPDATE Clan SET TotalPoint = @NewClanTotalPoint 
 WHERE CLID = @CLID AND DeleteFlag <> 1
 IF 0 = @@ROWCOUNT BEGIN
  SET @Ret = 0
  RETURN @Ret
 END

 SET @Ret = 1
 RETURN @Ret
GO

-------------------------------------------------------------------------------------------------------------------

CREATE PROC spAdmWebChangeWinsLosses
 @CLID int
, @NewWins int
, @NewLosses int
, @GMID varchar(20)
, @Ret int OUTPUT
AS
 SET NOCOUNT ON

 IF (0 > @NewWins) OR (0 > @NewLosses) BEGIN
  SET @Ret = 0
  RETURN @Ret
 END

 UPDATE Clan SET Wins = @NewWins, Losses = @NewLosses 
 WHERE CLID = @CLID AND DeleteFlag <> 1
 IF 0=@@ROWCOUNT BEGIN
  SET @Ret = 0
  RETURN @Ret
 END

 SET @Ret = 1
 RETURN @Ret
GO

-------------------------------------------------------------------------------------------------------------------

CREATE TABLE ClanMemberGrade(
 GradeID int PRIMARY KEY CLUSTERED
, Grade varchar(24) NOT NULL )
GO

INSERT INTO ClanMemberGrade(GradeID, Grade)
VALUES (0, 'None')

INSERT INTO ClanMemberGrade(GradeID, Grade)
VALUES (1, 'Master')

INSERT INTO ClanMemberGrade(GradeID, Grade)
VALUES (2, 'Admin')

INSERT INTO ClanMemberGrade(GradeID, Grade)
VALUES (9, 'Member')

GO
-------------------------------------------------------------------------------------------------------------------

CREATE PROC spAdmWebChangeClanMemberGrade
 @CLID int
, @CID int
, @NewGrade int
, @GMID varchar(20)
, @Ret int OUTPUT
AS
 SET NOCOUNT ON 

 IF NOT EXISTS (SELECT GradeID FROM ClanMemberGrade(NOLOCK) 
  WHERE GradeID=@NewGrade) BEGIN
  SET @Ret=0
  RETURN @Ret
 END

 IF 1=@NewGrade BEGIN -- master duplication check.
  IF EXISTS (SELECT CID FROM ClanMember(NOLOCK) 
   WHERE CLID=@CLID AND Grade=@NewGrade) BEGIN
   SET @Ret=0
   RETURN @Ret
  END
 END

 UPDATE ClanMember SET Grade=@NewGrade WHERE CLID=@CLID AND CID=@CID
 IF 0=@@ROWCOUNT BEGIN
  SET @Ret=0
  RETURN @Ret
 END

 SET @Ret=1
 RETURN @Ret
GO

-------------------------------------------------------------------------------------------------------------------

CREATE PROC spAdmWebAddClanMember
 @CLID int
, @NewCID int
, @GMID varchar(20)
, @Ret int OUTPUT
AS
 SET NOCOUNT ON 

 IF NOT EXISTS (SELECT CID FROM Character(NOLOCK)
  WHERE CID = @NewCID AND DeleteFlag <> 1) BEGIN 
  SET @Ret = 0
  RETURN @Ret
 END 

 IF NOT EXISTS (SELECT CLID FROM Clan(NOLOCK) 
  WHERE CLID = @CLID AND DeleteFlag <> 1) BEGIN
  SET @Ret = 0
  RETURN @Ret
 END

 IF EXISTS (SELECT CMID FROM ClanMember(NOLOCK)
  WHERE CID = @NewCID) BEGIN
  SET @Ret = 0
  RETURN @Ret
 END

 INSERT INTO ClanMember(CLID, CID, Grade, RegDate, ContPoint)
 VALUES (@CLID, @NewCID, 9, GETDATE(), 0)
 IF 0 <> @@ERROR BEGIN
  SET @Ret = 0
  RETURN @Ret
 END

 SET @Ret = 1
 RETURN @Ret
GO

-------------------------------------------------------------------------------------------
  
CREATE PROC spAdmWebChangeClanIntroduction  
 @CLID int  
, @NewIntroduction varchar(1024)  
, @GMID varchar(20)
, @Ret int OUTPUT  
AS  
 SET NOCOUNT ON  
  
 UPDATE Clan SET Introduction = @NewIntroduction WHERE CLID = @CLID  
 IF 0 = @@ROWCOUNT BEGIN  
  SET @Ret = 0  
  RETURN @Ret  
 END  
  
 SET @Ret = 1  
 RETURN @Ret  
GO

-------------------------------------------------------------------------------------------

CREATE PROC spAdmWebGetCharInfoByUserID  
 @UserID varchar(20)  
AS  
 SET NOCOUNT ON  
  
 SELECT c.Name, c.AID, c.CID, c.RegDate, c.PlayTime, c.LastTime,c.Sex,  
  c.CharNum, c.Level, c.XP, c.BP, c.DeleteFlag, c.DeleteName,  
  c.KillCount, c.DeathCount  
 FROM Account a(NOLOCK) JOIN Character c(NOLOCK)  
 ON a.UserID = @UserID AND c.AID = a.AID  
 ORDER BY DeleteFlag, CharNum
GO

-------------------------------------------------------------------------------

CREATE PROC spAdmWebGetLiveCharInfoByOneCharName
 @CharName varchar(24)
AS
 SET NOCOUNT ON
 
 SELECT c2.Name, c2.CID
 FROM (Character c1(NOLOCK) JOIN Account a(NOLOCK)
 ON c1.Name = @CharName AND a.AID = c1.AID) JOIN Character c2(NOLOCK)
 ON c2.AID = a.AID
 WHERE c2.DeleteFlag <> 1
 ORDER BY c2.CharNum
GO

----------------------------------------------------------------------------

CREATE PROC spAdmWebGetAllCharInfoByOneCharName
 @CharName varchar(24)
AS
 SET NOCOUNT ON 

 SELECT c2.Name, c2.CID
 FROM (Character c1(NOLOCK) JOIN Account a(NOLOCK)
 ON c1.Name = @CharName AND a.AID = c1.AID) JOIN Character c2(NOLOCK)
 ON c2.AID = a.AID
 ORDER BY c2.DeleteFlag, c2.CharNum
GO

---------------------------------------------------------------------------------------------------------

CREATE PROC spAdmWebGetClanRankInfoByCLID  
 @CLID int   
AS  
 SELECT Exp, Point, TotalPoint, Wins, Losses, Ranking, LastDayRanking, LastMonthRanking, RankIncrease  
 FROM Clan(NOLOCK)  
 WHERE CLID = @CLID  
GO

----------------------------------------------------------------------------------
/*
CREATE     PROC [spWebItemUseLog]  
 @UserID  VARCHAR(32)  
AS  
BEGIN  
  
 DECLARE @TargetAID INT  
 SELECT @TargetAID = AID FROM Account(NOLOCK) WHERE UserID=@UserID  
  
 SELECT l.AID, l.CID, c.Name AS CharName, i.ItemID, i.Name AS ItemName, l.Date, c.DeleteName   
 FROM BringAccountItemLog l(NOLOCK), Item i(NOLOCK), Character c(NOLOCK)  
 WHERE l.AID=@TargetAID AND l.CID=c.CID AND l.ItemID=i.ItemID  
 ORDER BY  Date DESC  
END
*/

----------------------------------------------------------------------------------

CREATE PROC spAdmWebEditCharKillDeathCount
 @CID int
, @KillCount int
, @DeathCount int
, @GMID varchar(20)
, @Ret int OUTPUT
AS
 IF (0 > @KillCount) OR (0 > @DeathCount) BEGIN
  SET @Ret = 0
  RETURN @Ret
 END

 UPDATE Character SET KillCount = @KillCount, DeathCount = @DeathCount
 WHERE CID = @CID
 IF 0 = @@ROWCOUNT BEGIN
  SET @Ret = 0
  RETURN @Ret
 END

 SET @Ret = 1
 RETURN @Ret
GO

----------------------------------------------------------------------------------

CREATE PROC spAdmWebLeaveClanByCID  
 @CID int /* 탈퇴요청 캐릭터 CID */  
, @GMID varchar(20)
, @Ret int OUTPUT
AS  
 IF (@CID IS NULL) OR (@GMID IS NULL) BEGIN
  SET @Ret = 0
  RETURN @Ret
 END

 DECLARE @CLID int  
 DECLARE @MasterCID int  
  
 -- 존재하는 아이디인가?  
 SELECT @CLID = cm.CLID, @MasterCID = cl.MasterCID  
 FROM Clan cl(NOLOCK), ClanMember cm(NOLOCK)  
 WHERE cm.CID = @CID AND cl.CLID = cm.CLID  
  
 -- 클랜마스터가 아니고 클랜에 가입되 있을 경우만.  
 IF (@CID IS NULL) OR (@MasterCID = @CID) OR (@CLID IS NULL) BEGIN  
  SET @Ret = 0
  RETURN @Ret
 END  
    
 DELETE ClanMember WHERE CID = @CID  
 IF 0 <> @@ERROR  
 BEGIN  
  SET @Ret = 0
  RETURN @Ret
 END  
  
 SET @Ret = 1
 RETURN @Ret
GO  

----------------------------------------------------------------------------

CREATE PROC spAdmWebEditCharLevel
 @CID int
, @Level smallint
, @GMID varchar(20)
, @Ret int OUTPUT
AS
 SET NOCOUNT ON

 IF 1 > @Level  BEGIN
  SET @Ret = 0
  RETURN @Ret
 END

 IF EXISTS (SELECT CID FROM Character(NOLOCK) 
  WHERE CID = @CID AND Level = @Level) BEGIN
  SET @Ret = 1
  RETURN @Ret
 END

 DECLARE @XP int

 SELECT @XP = MinXP FROM Level(NOLOCK) WHERE Level = @Level
 IF @XP IS NULL BEGIN
  SET @Ret = 0
  RETURN @Ret
 END

 UPDATE Character SET Level = @Level, XP = @XP 
 WHERE CID = @CID AND DeleteFlag <> 1
 IF 0 = @@ROWCOUNT BEGIN
  SET @Ret = 0
  RETURN @Ret
 END

 SET @Ret = 1
 RETURN @Ret
GO

-------------------------------------------------------------------

CREATE PROC spAdmWebEditCharXP
 @CID int
, @XP int
, @GMID varchar(20)
, @Ret int OUTPUT
AS
 SET NOCOUNT ON

 IF 0 > @XP BEGIN
  SET @Ret = 0
  RETURN @Ret
 END

 DECLARE @MaxMinXP int
 DECLARE @Level smallint

 SELECT TOP 1 @MaxMinXP = MinXP FROM Level(NOLOCK) 
 ORDER BY MinXP DESC

 IF @MaxMinXP > @XP BEGIN
  SELECT TOP 1 @Level = Level FROM Level(NOLOCK) 
  WHERE MinXP <= @XP ORDER BY Level DESC
 END
 ELSE BEGIN
  SELECT TOP 1 @Level = Level FROM Level(NOLOCK) 
  ORDER BY Level DESC
 END

 UPDATE Character SET Level = @Level, XP = @XP 
 WHERE CID = @CID AND DeleteFlag <> 1
 IF 0 = @@ROWCOUNT BEGIN 
  SET @Ret = 0
  RETURN @Ret
 END
 
 SET @Ret = 1
 RETURN @Ret
GO

--------------------------------------------------------------------

CREATE NONCLUSTERED INDEX IX_ItemPurchaseLogByBounty_CID
ON ItemPurchaseLogByBounty(CID)

CREATE NONCLUSTERED INDEX IX_ItemPurhcaseLogByBountry_Date
ON ItemPurchaseLogByBounty(Date)

GO

------------------------------------------------------------------------------------

CREATE PROC spAdmWebGetItemList
AS
 SET NOCOUNT ON
 SELECT ItemID, Name, Slot, IsCashItem
 FROM Item(NOLOCK)
 ORDER BY ItemID
GO

------------------------------------------------------------------------------------

CREATE PROC spAdmWebGetCashSetShopList
AS
 SET NOCOUNT ON
 SELECT CSSID, Name
 FROM CashSetShop(NOLOCK)
 ORDER BY CSSID
GO
------------------------------------------------------------------------------------

CREATE PROC spAdmWebDeleteClanByCID  
 @MasterCID int /* 마스터 CID */  
AS  
 SET NOCOUNT ON
 DECLARE @CLID int  
  
 SELECT @CLID = c.CLID  
 FROM Clan c(NOLOCK)  
 WHERE c.MasterCID = @MasterCID  
  
 -- 요청 조건 검사.  
 IF (@MasterCID IS NULL) OR (@CLID IS NULL) BEGIN  
  SELECT 0 AS Ret  
  ROLLBACK TRAN  
  RETURN  
 END  

 BEGIN TRAN    
 -- Clan Member 삭제.  
 DELETE ClanMember WHERE CLID = @CLID  
 IF 0  <> @@ERROR BEGIN  
  SELECT 0 AS Ret  
  ROLLBACK TRAN  
  RETURN  
 END  
  
 -- Clan을 유효하지 않은 상태로 설정.  
 UPDATE Clan SET DeleteFlag = 1, MasterCID = NULL WHERE CLID = @CLID  
 UPDATE Clan SET DeleteName = Name WHERE CLID = @CLID  
 UPDATE Clan SET Name = NULL WHERE CLID = @CLID  
 COMMIT TRAN  
 
 SELECT 1 AS Ret  
GO

------------------------------------------------------------------------------------

CREATE PROC spAdmWebGetBlockCountryCodeList
 @Code char
AS
 SET NOCOUNT ON

 SELECT bcc.CountryCode3, bcc.RoutingURL, bcc.IsBlock, cc.CountryName
 FROM BlockCountryCode bcc(NOLOCK) JOIN CountryCode cc(NOLOCK)
 ON cc.CountryCode3 = bcc.CountryCode3
 WHERE cc.CountryName LIKE @Code + '%'
 ORDER BY CountryName ASC
GO

------------------------------------------------------------------------------------
 
CREATE PROC spAdmWebUpdateBlockCountryCode  
 @CountryCode3 char(3)  
, @RoutingURL varchar(64)  
, @IsBlock tinyint  
, @Ret int Output  
AS  
 SET NOCOUNT ON  
 UPDATE BlockCountryCode   
 SET RoutingURL = @RoutingURL , IsBlock = @IsBlock  
 WHERE CountryCode3 = @CountryCode3   
 IF 0 = @@ROWCOUNT SET @Ret = 0  
 ELSE SET @Ret = 1  
 RETURN @Ret
GO

------------------------------------------------------------------------------------

CREATE PROC spAdmWebGetCaracterMakingLog  
 @CharName varchar(24)  
AS  
 SET NOCOUNT ON  
 SELECT a.UserID, cml.AID,  cml.CharName, cml.Type, cml.Date  
 FROM Account a(nolock), CharacterMakingLog cml(nolock)   
 WHERE cml.CharName = @CharName AND a.AID = cml.AID   
 ORDER BY cml.Date DESC  
GO

------------------------------------------------------------------------------------

CREATE PROC spAdmWebAccountItemInfoByAID 
 @AID int
AS
 SET NOCOUNT ON
 SELECT ai.AIID, ai.RentHourPeriod, i.Name, i.ItemID
  , CASE ISNULL(RentDate, 0 )
    WHEN 0 THEN '0'
    ELSE (RentHourPeriod-DATEDIFF (hh, RentDate, GetDate()))  
    END AS RentRemain
  , CASE ISNULL(ai.RentDate, 0)
    WHEN 0 THEN '0'
    ELSE CAST(ai.RentDate AS varchar(24))
    END as RentDate
 FROM   AccountItem ai(NOLOCK) JOIN Item i(NOLOCK) 
 ON ai.AID = @AID AND i.ItemID = ai.ItemID
GO

--------------------------------------------------------------------------------------

CREATE PROC spAdmWebGetItemPurchaseLogByCash
 @AID int  
AS  
 SET NOCOUNT ON  
 SELECT ipl.id, a.UserID AS SenderUserID, a.UserID AS ReceiverUserID, 
  i.Name AS ItemName, ipl.Date, ipl.Cash
  , CASE ISNULL(ipl.RentHourPeriod, 0) 
   WHEN 0 THEN '0'
   ELSE CAST(ipl.RentHourPeriod AS varchar(10)) 
   END AS 'RentHourPeriod'
 FROM (Account a(NOLOCK) JOIN ItemPurchaseLogByCash ipl(NOLOCK)  
 ON a.AID = @AID AND ipl.AID = a.AID) JOIN Item i(NOLOCK)  
 ON i.ItemID = ipl.ItemID  
 ORDER BY ipl.Date DESC  
GO

--------------------------------------------------------------------------------------

CREATE PROC spAdmWebGetSetItemPurchaseLogByCash  
 @AID int  
AS  
 SET NOCOUNT ON  
 SELECT sipl.id, a.UserID AS SenderUserID, a.UserID AS ReceiverUserID
  , css.Name AS ItemName, sipl.Date, sipl.Cash  
  , CASE ISNULL(sipl.RentHourPeriod, 0)
   WHEN 0 THEN '0'
   ELSE CAST(sipl.RentHourPeriod AS varchar(10))
  END AS 'RentHourPeriod'
 FROM (Account a(NOLOCK) JOIN SetItemPurchaseLogByCash sipl(NOLOCK)  
 ON a.AID = @AID AND sipl.AID = a.AID) JOIN CashSetShop css(NOLOCK)  
 ON css.CSSID = sipl.CSSID  
 ORDER BY Date DESC  
GO

--------------------------------------------------------------------------------------

CREATE PROC spAdmWebGetCashItemPresentRecvLog
 @AID int  
AS  
 SET NOCOUNT ON  
 SELECT cpl.id, cpl.SenderUserID, a.UserID AS ReceiverUserID
  , i.Name AS ItemName, cpl.Date, cpl.Cash  
  , CASE ISNULL(cpl.RentHourPeriod, 0)
   WHEN 0 THEN '0'
   ELSE CAST(cpl.RentHourPeriod AS varchar(10))
   END AS 'RentHourPeriod'
 FROM ((Account a(NOLOCK) JOIN CashItemPresentLog cpl(NOLOCK)  
 ON a.AID = @AID AND cpl.ReceiverAID = a.AID) JOIN CashShop cs(NOLOCK)  
 ON cs.CSID = cpl.CSID) JOIN Item i(NOLOCK)  
 ON i.ItemID = cs.ItemID  
 ORDER BY cpl.Date DESC  
GO

--------------------------------------------------------------------------------------

CREATE PROC spAdmWebGetCashSetItemPresentRecvLog  
 @AID int  
AS  
 SET NOCOUNT ON  
 SELECT cpl.id, cpl.SenderUserID, a.UserID AS ReceiverUserID
  , css.Name AS ItemName, cpl.Date, cpl.Cash
  , CASE ISNULL(cpl.RentHourPeriod, 0)
    WHEN 0 THEN '0'
    ELSE CAST(cpl.RentHourPeriod AS varchar(10))
   END AS 'RentHourPeriod'
 FROM (Account a(NOLOCK) JOIN CashItemPresentLog cpl(NOLOCK)  
 ON a.AID = @AID AND cpl.ReceiverAID = a.AID) JOIN CashSetShop css(NOLOCK)  
 ON css.CSSID = cpl.CSSID  
 ORDER BY cpl.Date DESC  
GO

--------------------------------------------------------------------------------------

CREATE PROC spAdmWebGetCashItemPresentSendLog
 @AID int  
AS  
 SET NOCOUNT ON   
 SELECT cpl.id, cpl.SenderUserID, ar.UserID AS ReceiverUserID
  , i.Name AS ItemName, cpl.Date, cpl.Cash  
  , CASE ISNULL(cpl.RentHourPeriod, 0)
    WHEN 0 THEN '0'
    ELSE CAST(cpl.RentHourPeriod AS varchar(10))
   END AS 'RentHourPeriod'
 FROM (((Account a(NOLOCK) JOIN CashItemPresentLog cpl(NOLOCK)  
 ON a.AID = @AID AND cpl.SenderUserID = a.UserID) JOIN CashShop cs(NOLOCK)  
 ON cs.CSID = cpl.CSID) JOIN Item i(NOLOCK)  
 ON i.ItemID = cs.ItemID) JOIN Account ar(NOLOCK)   
 ON ar.AID = cpl.ReceiverAID  
 ORDER BY cpl.Date DESC  
GO

--------------------------------------------------------------------------------------

CREATE PROC spAdmWebGetCashSetItemPresentSendLog  
 @AID int  
AS  
 SET NOCOUNT ON   
 SELECT cpl.id, cpl.SenderUserID, a.UserID AS ReceiverUserID
  , css.Name AS SetItemName
  , cpl.Date, cpl.Cash  
  , CASE ISNULL(cpl.RentHourPeriod, 0)
    WHEN 0 THEN '0'
    ELSE CAST(cpl.RentHourPeriod AS varchar(10)) 
   END AS 'RentHourPeriod' 
 FROM (Account a(NOLOCK) JOIN CashItemPresentLog cpl(NOLOCK)  
 ON a.AID = @AID AND cpl.SenderUserID = a.UserID) JOIN CashSetShop css(NOLOCK)  
 ON css.CSSID = cpl.CSSID  
 ORDER BY cpl.Date DESC  
GO

---------------------------------------------------------------------------------------

CREATE FUNCTION inet_aton (@IP VARCHAR(15))
RETURNS BIGINT
AS
BEGIN
	DECLARE @A BIGINT, @B BIGINT, @C BIGINT, @D BIGINT
	DECLARE @iBegin INT, @iEnd INT
	
	SELECT @iBegin=1
	SELECT @iEnd=CHARINDEX('.', @IP)
	SELECT @A=CAST(SUBSTRING(@IP, @iBegin, @iEnd-@iBegin) AS BIGINT)
	
	SELECT @iBegin=@iEnd+1
	SELECT @iEnd=CHARINDEX('.', @IP, @iBegin)
	SELECT @B=CAST(SUBSTRING(@IP, @iBegin, @iEnd-@iBegin) AS BIGINT)
	
	SELECT @iBegin=@iEnd+1
	SELECT @iEnd=CHARINDEX('.', @IP, @iBegin)
	SELECT @C=CAST(SUBSTRING(@IP, @iBegin, @iEnd-@iBegin) AS BIGINT)
	
	SELECT @iBegin=@iEnd+1
	SELECT @iEnd=CHARINDEX('.', @IP, @iBegin)
	SELECT @D=CAST(SUBSTRING(@IP, @iBegin, 15) AS BIGINT)
	
	DECLARE @IPNumber BIGINT
	SELECT @IPNumber=@A*16777216+@B*65536+@C*256+@D
	
	RETURN @IPNumber
END

------------------------------------------------------------------------------------

CREATE PROC spUpdateLocatorStatus
 @LocatorID int
, @RecvCount int
, @SendCount int
, @BlockCount int
, @DuplicatedCount int
AS 
 SET NOCOUNT ON 
 UPDATE LocatorStatus 
 SET RecvCount = @RecvCount, SendCount = @SendCount, 
  BlockCount = @BlockCount, DuplicatedCount = @DuplicatedCount,
  LastUpdatedTime = GETDATE()
 WHERE LocatorID = @LocatorID
GO

-------------------------------------------------------------------

CREATE PROC spGetIPtoCountryList  
AS  
 SELECT IPFrom, IPTo, CountryCode3   
 FROM IPtoCountry(NOLOCK)  
 ORDER BY IPFrom  
GO

-------------------------------------------------------------------

CREATE   PROC [spWebCheckRegisteredUser]  
 @UserID VARCHAR(20),  
 @Ret int Output  
AS  
 SET NOCOUNT ON  
 DECLARE @AID INT  
 SELECT @AID = AID FROM Account(NOLOCK) WHERE UserID = @UserID  
 IF @@ERROR <> 0 BEGIN  
  SET @Ret = 0  
  RETURN @Ret -- 디비장애  
 END  
  
 IF @AID IS NULL BEGIN  
  SET @Ret = -1  
  RETURN @Ret  -- 미가입자  
 END  
   
 SET @Ret = 1   
 RETURN @Ret -- 가입자 확인  
GO

-------------------------------------------------------------------

 CREATE    PROC [spWebInsertAccount]   
 @UserID varchar(20)  
, @Password varchar(20)  
, @Cert tinyint  
, @Name varchar(30)  
, @Age smallint  
, @Country char(3)  
, @Sex tinyint  
, @Email varchar(50)=NULL  
, @Ret int OutPut  
AS  
 SET NOCOUNT ON  
 DECLARE @AIDIdent int  
  
 BEGIN TRAN  
 INSERT INTO Account (UserID, Cert, Name, Age, Sex, UGradeID, PGradeID, RegDate, Email,  Country)  
 VALUES (@UserID, @Cert, @Name, @Age, @Sex, 0, 0, GETDATE(), @Email,  @Country)  
 IF @@ERROR <> 0 BEGIN  
  ROLLBACK TRAN  
  SET @Ret = 0  
  RETURN @Ret   
 END  
  
 SET @AIDIdent = @@IDENTITY  
 INSERT INTO login(UserID, AID, Password)  
 VALUES (@UserID, @AIDIdent, @Password)  
 IF @@ERROR <> 0 BEGIN  
  ROLLBACK TRAN  
  SET @Ret = 0  
  RETURN @Ret   
 END  
 COMMIT TRAN  
  
 SET @Ret = 1  
 RETURN @Ret  
GO

-------------------------------------------------------------------

 CREATE    PROC [spWebUpdateAccount]     
 @UserID varchar(20)    
, @Password varchar(20)=NULL    
, @Cert tinyint    
, @Name  varchar(30)    
, @Age smallint    
, @Country char(3)    
, @Sex tinyint    
, @Email varchar(50)=NULL    
, @Ret int OutPut    
AS    
 SET NOCOUNT ON    
 BEGIN TRAN    
 UPDATE Account SET  Cert = @Cert, Name = @Name, Age = @Age, Sex = @Sex, Email = @Email,     
  Country = @Country    
 WHERE UserID = @UserID    
 IF 0 = @@ROWCOUNT BEGIN    
  ROLLBACK TRAN    
  SET @Ret = 0    
  RETURN @Ret     
 END    
    
 IF (@Password <> '') AND (@Password IS NOT NULL) BEGIN    
  UPDATE  login SET Password = @Password    
  WHERE UserID = @UserID    
  IF 0 = @@ROWCOUNT BEGIN    
   ROLLBACK TRAN    
   SET @Ret = 0    
   RETURN @Ret     
  END    
 END    
  
 COMMIT TRAN    
    
 SET @Ret = 1    
 RETURN @Ret  
GO

--------------------------------------------------------------------------------

CREATE PROC spAdmWebGetCashShopList
AS
 SET NOCOUNT ON
  SELECT cs.CSID, i.Name, i.Slot, cs.Opened, cs.NewItemOrder,
  cs.CashPrice, cs.WebImgName, ISNULL(cs.RentType, 0) AS 'RentType'
 FROM CashShop cs(NOLOCK) JOIN Item i(NOLOCK)
 ON i.ItemID = cs.ItemID 
GO

---------------------------------------------------------------------------------

CREATE PROC spAdmWebInsertCashShopItem    
 @ItemID int    
, @Opened tinyint    
, @CashPrice int    
, @WebImgName varchar(64)    
, @RentType tinyint    
, @Ret int OUTPUT    
AS    
 SET NOCOUNT ON    
 IF (@ItemID IS NULL) OR (500000 > @ItemID) OR (@Opened IS NULL)  
  OR (@CashPrice IS NULL) BEGIN    
  SET @Ret = 0    
  RETURN @Ret    
 END    
  
 declare @csid int  
  
 select @csid = max(csid) + 1 from CashShop(nolock)   
    
 INSERT INTO CashShop(csid,  ItemID, Opened, CashPrice, WebImgName, RegDate, RentType )    
 VALUES (@csid, @ItemID, @Opened, @CashPrice, @WebImgName, GETDATE(), @RentType)    
 IF 0 <> @@ERROR BEGIN    
  SET @Ret = 0    
  RETURN @Ret    
 END    
     
 SET @Ret = @csid  
 RETURN @Ret    
GO


---------------------------------------------------------------------------------------

CREATE PROC spAdmWebInsertRentCashShopPrice  
 @CSID int  
, @RentHourPeriod int  
, @CashPrice int  
, @Ret int OUTPUT  
AS  
 SET NOCOUNT ON  
  
 IF (@CSID IS NULL) OR (@CashPrice IS NULL) BEGIN  
  SET @Ret = 0  
  RETURN @Ret  
 END  

 IF 0 = @RentHourPeriod SET @RentHourPeriod = NULL
  
 INSERT INTO RentCashShopPrice(CSID, RentHourPeriod, CashPrice)  
 VALUES (@CSID, @RentHourPeriod, @CashPrice)  
 IF 0 <> @@ERROR BEGIN  
  SET @Ret = 0  
  RETURN @Ret  
 END  
 SET @Ret = 1  
 RETURN @Ret  
GO
-------------------------------------------------------------------------------------------

CREATE PROC spAdmWebDeleteRentCashShopPrice
 @RCSPID int
, @CSID int
, @Ret int OUTPUT
AS
 SET NOCOUNT ON
 DELETE RentCashShopPrice WHERE RCSPID = @RCSPID AND CSID = @CSID
 IF 0 <> @@ERROR BEGIN
  SET @Ret = 0
  RETURN @Ret
 END
 SET @Ret = 1
 RETURN @Ret
GO

---------------------------------------------------------------------------------------------

CREATE PROC spAdmWebUpdateCashShopItem  
 @CSID int  
, @Opened tinyint  
, @CashPrice int  
, @WebImgName varchar(64)  
, @RentType tinyint
, @Ret int OUTPUT  
AS  
 UPDATE CashShop   
 SET Opened = @Opened, CashPrice = @CashPrice, WebImgName = @WebImgName,
  RentType = @RentType
 WHERE CSID = @CSID  
 IF 0 = @@ROWCOUNT BEGIN  
  SET @Ret = 0  
  RETURN @Ret  
 END  
   
 SET @Ret = 1  
 RETURN @Ret  
GO

------------------------------------------------------------------------------------------------

CREATE PROC spAdmWebDeleteCashShopItem
 @CSID int
, @Ret int OUTPUT
AS
 SET NOCOUNT ON 

 BEGIN TRAN
 DELETE CashShop WHERE CSID = @CSID
 IF (0 <> @@ERROR) OR (0 = @@ROWCOUNT) BEGIN
  ROLLBACK TRAN
  SET @Ret = 0
  RETURN @Ret 
 END

 DELETE RentCashShopPrice WHERE CSID = @CSID
 IF 0 <> @@ERROR BEGIN
  ROLLBACK TRAN
  SET @Ret = 0
  RETURN @Ret
 END 
 COMMIT TRAN

 SET @Ret = 1
 RETURN @Ret
GO

---------------------------------------------------------------------------------------------------------

CREATE PROC spAdmWebInsertCashSetShopItem  
 @Name varchar(64)  
, @ResSex tinyint  
, @ResLevel int  
, @Weight int  
, @Description varchar(1024)  
, @Opened tinyint  
, @CashPrice int  
, @WebImgName varchar(64)  
, @RentType tinyint  
, @Ret int OUTPUT  
AS  
 SET NOCOUNT ON   
 IF (@Name IS NULL) OR (@ResSex IS NULL) OR (@ResLevel IS NULL)   
  OR (@Weight IS NULL) OR (@Description IS NULL) OR (@Opened IS NULL)  
  OR (@CashPrice IS NULL) OR (@WebImgName IS NULL) BEGIN  
  SET @Ret = 0  
  RETURN @Ret  
 END  
  
 declare @cssid int  
 select @cssid = max(cssid) + 1 from CashSetShop(nolock)  
  
 INSERT INTO CashSetShop(cssid, Name, ResSex, ResLevel, Weight, Description, Opened,  
  CashPrice, WebImgName, RentType, RegDate)  
 VALUES (@cssid, @Name, @ResSex, @ResLevel, @Weight, @Description, @Opened,  
  @CashPrice, @WebImgName, @RentType, GETDATE())  
 IF 0 <> @@ERROR BEGIN  
  SET @Ret = 0  
  RETURN @Ret  
 END  
  
 SET @Ret = @cssid  
 RETURN @Ret  
GO


----------------------------------------------------------------------------------------

CREATE PROC spAdmWebUpdateCashSetShopItem  
 @CSSID int  
, @Name varchar(64)
, @ResSex tinyint  
, @ResLevel int  
, @Weight int  
, @Description varchar(1024)
, @Opened tinyint  
, @CashPrice int  
, @WebImgName varchar(64)  
, @RentType tinyint
, @Ret int OUTPUT  
 AS  
 SET NOCOUNT ON  
 IF (@CSSID IS NULL) OR (@ResSex IS NULL) OR (@Weight IS NULL)  
  OR (@Opened IS NULL) OR (@Description IS NULL ) OR (@CashPrice IS NULL)
  OR (@WebImgName IS NULL) OR (@RentType IS NULL) OR (@Name IS NULL) BEGIN  
  SET @Ret = 0  
  RETURN @Ret  
 END  
  
 UPDATE CashSetShop  
 SET ResSex = @ResSex, ResLevel = @ResLevel, Weight = @Weight,   
  Description = @Description, Opened = @Opened, CashPrice = @CashPrice,   
  WebImgName = @WebImgName, RentType = @RentType, Name = @Name
 WHERE CSSID = @CSSID  
 IF 0 = @@ROWCOUNT BEGIN  
  SET @Ret = 0  
  RETURN   
 END  
  
 SET @Ret = 1  
 RETURN @Ret  
GO

----------------------------------------------------------------------------------------------

CREATE PROC spAdmWebInsertOneCashSetItem
 @CSSID int
, @CSID int
, @Ret int OUTPUT
AS
 SET NOCOUNT ON
 IF (@CSSID IS NULL) OR (@CSID IS NULL) BEGIN
  SET @Ret = 0
  RETURN @Ret
 END

 INSERT INTO CashSetItem(CSSID, CSID) VALUES (@CSSID, @CSID)
 IF 0 <> @@ERROR BEGIN
  SET @Ret = 0
  RETURN @Ret
 END
 
 SET @Ret = 1
 RETURN @Ret
GO

-------------------------------------------------------------------------------------------

CREATE PROC spAdmWebDeleteOneCashSetItem
 @CSSID int
, @CSID int
, @Ret int OUTPUT
AS 
 SET NOCOUNT ON
 DELETE CashSetItem WHERE CSSID = @CSSID AND CSID = @CSID
 IF (0 <> @@ERROR) BEGIN
  SET @Ret = 0
  RETURN @Ret
 END
 SET @Ret = 1
 RETURN @Ret
GO

------------------------------------------------------------------------------------------

CREATE PROC spAdmWebInsertRentCashSetShopPrice  
 @CSSID int  
, @RentHourPeriod int  
, @CashPrice int  
, @Ret int OUTPUT  
AS  
 SET NOCOUNT ON  
 IF (@CSSID IS NULL) OR (@CashPrice IS NULL) BEGIN  
  SET @Ret = 0  
  RETURN @Ret  
 END  

 IF 0 = @RentHourPeriod SET @RentHourPeriod = NULL
  
 INSERT INTO RentCashSetShopPrice(CSSID, RentHourPeriod, CashPrice)  
 VALUES (@CSSID, @RentHourPeriod, @CashPrice)  
 IF 0 <> @@ERROR BEGIN  
  SET @Ret = 0  
  RETURN @Ret  
 END  
  
 SET @Ret = 1  
 RETURN @Ret  
GO

-----------------------------------------------------------------------------------------------

CREATE PROC spAdmWebDeleteRentCashSetShopPrice
 @RCSSPID int
, @CSSID int
, @Ret int OUTPUT
AS
 SET NOCOUNT ON
 DELETE RentCashSetShopPrice WHERE RCSSPID = @RCSSPID AND CSSID = @CSSID
 IF 0 <> @@ERROR BEGIN
  SET @Ret = 0
  RETURN @Ret
 END

 SET @Ret = 1
 RETURN @Ret
GO

-----------------------------------------------------------------------------------------------

CREATE PROC spAdmWebDeleteCashSetShopItem
 @CSSID int
, @Ret int OUTPUT
AS
 SET NOCOUNT ON
 DELETE CashSetShop WHERE CSSID = @CSSID
 IF 0 <> @@ERROR BEGIN
  SET @Ret = 0
  RETURN
 END

 SET @Ret = 1
 RETURN @Ret
GO

-------------------------------------------------------------------------------------------------

CREATE PROC spAdmWebUpdateCashShopNewItem
 @NewOrder int
, @CSID int
, @CSSID int
, @IsSetItem int
, @CategoryID int
, @Ret int OUTPUT
AS
 SET NOCOUNT ON

 DECLARE @Category varchar(12)
 SELECT @Category = Description FROM CashShopNewItemCategory(NOLOCK)
 WHERE CategoryID = @CategoryID

 IF 0 = @IsSetItem BEGIN
  UPDATE CashShopNewItem 
  SET Category = @Category, NewOrder = @NewOrder, IsSetItem = @IsSetItem,
   CSID = @CSID, CSSID = @CSSID, Slot = ist.Description, Name = i.Name,
   ResSex = i.ResSex, ResLevel = i.ResLevel, CashPrice = cs.CashPrice, 
   WebImgName = cs.WebImgName, RegDate = cs.RegDate
  FROM (Item i(NOLOCK) JOIN CashShop cs(NOLOCK)
  ON cs.CSID = @CSID AND i.ItemID = cs.ItemID) 
   JOIN ItemSlotType ist(NOLOCK) ON ist.SlotType = i.Slot
  WHERE NewOrder = @NewOrder
  IF 0 = @@ROWCOUNT BEGIN
   SET @Ret = 0
   RETURN @Ret
  END
 END
 ELSE IF 1 = @IsSetItem BEGIN
  UPDATE CashShopNewItem
  SET Category = @Category, NewOrder = @NewOrder, IsSetItem = @IsSetItem,
   CSID = @CSID, CSSID = @CSSID, Slot = ist.Description, Name = css.Name,
   ResSex = css.ResSex, ResLevel = css.ResLevel, CashPrice = css.CashPrice,
   WebImgName = css.WebImgName, RegDate = css.RegDate
  FROM CashSetShop css(NOLOCK) JOIN ItemSlotType ist(NOLOCK)
  ON css.CSSID = @CSSID AND ist.SlotType = 10
  WHERE NewOrder = @NewOrder
  IF 0 = @@ROWCOUNT BEGIN
   SET @Ret = 0
   RETURN @Ret
  END
 END

 SET @Ret = 1
 RETURN @Ret

GO

---------------------------------------------------------------------------------------------------------

CREATE PROC [spAdmWebItemUseLog]  
 @UserID  VARCHAR(32)  
AS  
BEGIN  
 SET NOCOUNT ON 
 DECLARE @TargetAID INT  
 SELECT @TargetAID = AID FROM Account(NOLOCK) WHERE UserID=@UserID  
  
 SELECT l.AID, l.CID, c.Name AS CharName, i.ItemID, i.Name AS ItemName, l.Date, c.DeleteName   
 FROM BringAccountItemLog l(NOLOCK), Item i(NOLOCK), Character c(NOLOCK)  
 WHERE l.AID=@TargetAID AND l.CID=c.CID AND l.ItemID=i.ItemID  
 ORDER BY  Date DESC  
END
GO

----------------------------------------------------------------------------------------------------------

SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO

/* 최대값 구하는 함수 */
CREATE FUNCTION fnGetMax
	(@n1 int, 
	 @n2 int)
RETURNS int
AS
BEGIN
RETURN (CASE WHEN @n1 > @n2 THEN @n1 ELSE @n2 END)
END

GO
SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

--------------------------------------


SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO

/* 최소값 구하는 함수 */
CREATE  FUNCTION fnGetMin
	(@n1 int, 
	 @n2 int)
RETURNS int
AS
BEGIN
RETURN (CASE WHEN @n1 < @n2 THEN @n1 ELSE @n2 END)
END

GO
SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

-----------------------------------------------------------------------------------------

CREATE PROC spAdmWebGetAccountJoinStatistics
 @StartDate smalldatetime
, @EndDate smalldatetime
AS
 SET NOCOUNT ON 

 SELECT  convert(char(10), RegDate, 120) as Date ,count(AID) as Count
 FROM Account(nolock)  
 WHERE RegDate between convert(datetime, @StartDate) and convert(datetime, @EndDate)
 GROUP BY convert(char(10), RegDate, 120)
GO

-------------------------------------------------------------------------------------------

CREATE PROC spAdmWebGetQuestItemInfo
 @CID int
AS
 SET NOCOUNT ON 
 SELECT CID, Name, QuestItemInfo 
 FROM Character(NOLOCK)
 WHERE CID = @CID
GO

---------------------------------------------------------------------------------------------

CREATE PROC spAdmWebUpdateQuestItemInfo
 @CID int
, @QuestItemInfo binary(292)
AS
 SET NOCOUNT ON 
 UPDATE Character
 SET QuestItemInfo = @QuestItemInfo
 WHERE CID = @CID
GO

-----------------------------------------------------------------------------------------------

CREATE PROC spAdmWebGetUniqueQuestItemInfo
 @CID int
AS
 SET NOCOUNT ON 

 SELECT qi.Name, qgl.StartTime, qgl.EndTime
 FROM QuestGameLog qgl(NOLOCK), QUniqueItemLog qul(NOLOCK), QuestItem qi(NOLOCK)
 WHERE qgl.ID = qul.QGLID AND qul.QIID = qi.QIID AND qul.CID = @CID
 ORDER BY qgl.StartTime DESC
GO

--------------------------------------------------------------------------------------------------------------------------------

CREATE TABLE ServerLogStorage(
 id int IDENTITY PRIMARY KEY CLUSTERED
, ServerID smallint NOT NULL
, PlayerCount int NOT NULL
, GameCount int NOT NULL
, BlockCount int NOT NULL
, NonBlockCount int NOT NULL
, Time smalldatetime NOT NULL )

CREATE NONCLUSTERED INDEX IX_ServerLogStorage_Time
ON ServerLogStorage(Time)

----------------------------------------------------------------------------

CREATE PROC spWebGetClanAdsBoardList  
AS  
 SET NOCOUNT ON  
 SELECT Seq, Userid, Subject, RegDate, ReadCount, Recommend, CommentCount  
 FROM ClanAdsBoard(NOLOCK)  
 ORDER BY Thread DESC  
GO

----------------------------------------------------------------------------

CREATE PROC spAdmWebGetRentPeriodDayList
AS
 SET NOCOUNT ON
 SELECT  Day FROM RentPeriodDay(NOLOCK) ORDER BY Day
GO

----------------------------------------------------------------------------

create proc spGetItemList
 @ItemType int -- 0:any 1:melee 2:range 3:amor 4:special
, @Page int
, @PageCount int output
, @PageSize int
, @ItemSex tinyint -- 0:common 1:male 2:female
, @ItemLevel int -- max level 0:any
, @ItemName varchar(256)
, @RecordCount int output
, @Ret int output
as
 set nocount on

 declare @sql varchar(8000)
 declare @sql_param nvarchar(128)
 declare @sql_ShopItemCount nvarchar(4000)
 declare @ItemTypeWhere varchar(256)
 declare @PageSizeWhere varchar(256)
 declare @ItemSexWhere varchar(256)
 declare @ItemLevelWhere varchar(256)
 declare @ItemNameWhere varchar(256)
 declare @rowcnt int
 declare @itemcnt int
 declare @show_page_size int

 if (0 > @ItemType) or (4 < @ItemType) begin
  set @Ret = -1
  return @Ret
 end

 set @ItemTypeWhere = ''
 set @PageSizeWhere = ''
 set @ItemSexWhere = ''
 set @ItemLevelWhere = ''
 set @ItemNameWhere = ''

 if 1 = @ItemType begin
  set @ItemTypeWhere = 'and i.Slot = 1 '
 end
 else if 2 = @ItemType begin
  set @ItemTypeWhere = 'and i.Slot = 2 '
 end
 else if 3 = @ItemType begin
  set @ItemTypeWhere = 'and (i.Slot = 4 or i.Slot = 5 or i.Slot = 6 or
 i.Slot = 7 or i.Slot = 8) '
 end
 else if 4 = @ItemType begin
  set @ItemTypeWhere = 'and (i.SlotType = 3 or i.SlotType = 10 or i.SlotType = 0) '
 end

 if 1 = @ItemSex begin
  set @ItemSexWhere = 'and i.ResSex = 1 '
 end
 else if 2 = @ItemSex begin
  set @ItemSexWhere = 'and i.ResSex = 2'
 end

 if 0 < @ItemLevel begin
  set @ItemLevelWhere = 'and  i.ResLevel <= ' + cast(@ItemLevel as char(2)) + ' '
 end

 if @itemName is not null begin
  set @ItemNameWhere = 'and i.Name like ''%' + @ItemName + '%'''
 end

 set @sql_ShopItemCount = ' 
  select @itemcnt = count(cs.csid) from item i(nolock), cashshop cs(nolock)
  where i.itemid = cs.itemid and cs.opened = 1 '
  + @ItemTypeWhere
  + @ItemSexWhere
  + @ItemLevelWhere
  + @ItemNameWhere + ' 
  if( 0 < (@itemcnt % @PageSize) )
   set @PageCount = (@itemcnt / @PageSize) + 1
  else
   set @PageCount = @itemcnt / @PageSize '

-- select @pagecount as pagecount, @itemcnt as itemcount, @pagesize as pagesize '

 set @sql_param = '@PageCount int output, @itemcnt int output , @PageSize int'
 exec sp_executesql @sql_ShopItemCount, @sql_param, @PageCount output, @itemcnt output, @PageSize

 if (0 = @page) or (@page > @PageCount) begin
  set @Ret = -2
  return @Ret
 end

 set @RecordCount = @itemcnt

--  exec (  'select cs.csid, i.itemid, i.name, i.ressex, i.reslevel from item i(nolock), cashshop cs(nolock)
--   where i.itemid = cs.itemid and cs.opened = 1 '
--   + @ItemTypeWhere
--   + @ItemSexWhere
--   + @ItemLevelWhere
--   + @ItemNameWhere + ' order by cs.csid desc'  )

 set @rowcnt = @page * @pagesize

 if @itemcnt < (@page * @pagesize)
  set @show_page_size = @itemcnt % @pagesize
 else
  set @show_page_size = @pagesize

-- select @show_page_size as 'show page size', @itemcnt as 'item count', @page * @pagesize as 'total size'

 set @sql = '
  declare @csid table(id int)

  set rowcount ' + cast(@rowcnt as varchar(128)) + '

  insert into @csid(id) 
  select cs.csid from item i(nolock), cashshop cs(nolock)
  where i.itemid = cs.itemid and cs.opened = 1 '  
  + @ItemTypeWhere
  + @ItemSexWhere
  + @ItemLevelWhere
  + @ItemNameWhere
  + ' order by cs.csid

  set rowcount ' + cast(@show_page_size as varchar(128)) + ' 

  select t.*
  from
  (
   select top ' + cast(@show_page_size as varchar(128)) + ' 
   cs.CSID, i.Name, i.Slot, cs.CashPrice as Cash, cs.WebImgName
    , i.ResSex, i.ResLevel, i.Weight, i.Description, cs.RegDate
    , cs.NewItemOrder, cs.RentType
   from cashshop cs(nolock), @csid c, item i(nolock)
   where cs.csid = c.id and cs.opened = 1 and i.itemid = cs.itemid
   order by cs.csid desc
  ) as t
  order by t.csid'

 exec (@sql)

 set @Ret = 1
 return @Ret
go


-----------------------------------------------------------------------------------------------

CREATE PROC spInsertLocatorLog  
 @LocatorID int  
, @CountryCode3 varchar(3)  
, @Count int   
AS  
 SET NOCOUNT ON   
 INSERT INTO LogDB.game.LocatorLog(LocatorID, CountryCode3, Count, RegDate)  
 VALUES (@LocatorID, @CountryCode3, @Count, GETDATE())  
GO

----------------------------------------------------------------------------

create proc spGetSetItemList
 @ItemType int -- 0:any 1:melee 2:range 3:amor 4:special
, @Page int
, @PageCount int output
, @PageSize int
, @ItemSex tinyint -- 0:common 1:male 2:female
, @ItemLevel int -- max level 0:any
, @ItemName varchar(256)
, @RecordCount int output
, @Ret int output
as
 set nocount on

 declare @sql varchar(8000)
 declare @sql_param nvarchar(128)
 declare @sql_SetShopItemCount nvarchar(4000)
 declare @PageSizeWhere varchar(256)
 declare @ItemSexWhere varchar(256)
 declare @ItemLevelWhere varchar(256)
 declare @ItemNameWhere varchar(256)
 declare @rowcnt int
 declare @itemcnt int
 declare @show_page_size int

 if (0 > @ItemType) or (4 < @ItemType) begin
  set @Ret = -1
  return @Ret
 end

 set @PageSizeWhere = ''
 set @ItemSexWhere = ''
 set @ItemLevelWhere = ''
 set @ItemNameWhere = ''

 if 1 = @ItemSex begin
  set @ItemSexWhere = 'and css.ResSex = 1 '
 end
 else if 2 = @ItemSex begin
  set @ItemSexWhere = 'and css.ResSex = 2'
 end

 if 0 < @ItemLevel begin
  set @ItemLevelWhere = 'and  css.ResLevel <= ' + cast(@ItemLevel as char(2)) + ' '
 end

 if @itemName is not null begin
  set @ItemNameWhere = 'and css.Name like ''%' + @ItemName + '%'''
 end

 set @sql_SetShopItemCount = ' 
  select @itemcnt = count(css.cssid) from cashsetshop css(nolock)
  where css.opened = 1 '
  + @ItemSexWhere
  + @ItemLevelWhere
  + @ItemNameWhere + ' 
  if( 0 < (@itemcnt % @PageSize) )
   set @PageCount = (@itemcnt / @PageSize) + 1
  else
   set @PageCount = @itemcnt / @PageSize '

-- select @pagecount as pagecount, @itemcnt as itemcount, @pagesize as pagesize '

 set @sql_param = '@PageCount int output, @itemcnt int output , @PageSize int'
 exec sp_executesql @sql_SetShopItemCount, @sql_param, @PageCount output, @itemcnt output, @PageSize

 if (0 = @page) or (@page > @PageCount) begin
  set @Ret = -2
  return @Ret
 end

 set @RecordCount = @itemcnt
 set @rowcnt = @page * @pagesize

 if @itemcnt < (@page * @pagesize)
  set @show_page_size = @itemcnt % @pagesize
 else
  set @show_page_size = @pagesize

 select @show_page_size as 'show page size', @itemcnt as 'item count', @page * @pagesize as 'total size'

 set @sql = '
  declare @cssid table(id int)

  set rowcount ' + cast(@rowcnt as varchar(128)) + '

  insert into @cssid(id) 
  select css.cssid from cashsetshop css(nolock) where css.opened = 1 '  
  + @ItemSexWhere
  + @ItemLevelWhere
  + @ItemNameWhere
  + ' order by css.cssid

  set rowcount ' + cast(@show_page_size as varchar(128)) + ' 

  select t.*
  from
  (
   select top ' + cast(@show_page_size as varchar(128)) + ' 
    css.CSSID, css.Name, css.CashPrice as Cash, css.WebImgName, 
    css.ResSex, css.ResLevel, css.Weight, css.Description, css.RegDate,
    css.NewItemOrder as IsNewItem, css.RentType
   from cashsetshop css(nolock), @cssid cs
   where css.cssid = cs.id and css.opened = 1
   order by css.cssid desc
  ) as t
  order by t.cssid'

 exec (@sql)

 set @Ret = 1
 return @Ret
go

------------------------------------------------------------------------------------------------

CREATE  PROC [spWinTheClanGame]  
 @WinnerCLID  int,  
 @LoserCLID  int,  
 @IsDrawGame  tinyint,  
 @WinnerPoint  int,  
 @LoserPoint  int,  
 @WinnerClanName  varchar(24),  
 @LoserClanName  varchar(24),  
 @RoundWins  tinyint,  
 @RoundLosses  tinyint,  
 @MapID   tinyint,  
 @GameType  tinyint,  
 @WinnerMembers  varchar(110),  
 @LoserMembers  varchar(110)  
AS  
 SET NOCOUNT ON -- 추가.  
  
 IF @IsDrawGame = 0 BEGIN  
  -- 이긴팀 Wins+1  
  UPDATE Clan SET Wins=Wins+1, Point=Point+@WinnerPoint, TotalPoint=TotalPoint+@WinnerPoint WHERE CLID=@WinnerCLID  
  -- 진팀 Losses+1  
  UPDATE Clan SET Losses=Losses+1, Point= dbo.fnGetMax(0, Point+(@LoserPoint)) WHERE CLID=@LoserCLID  
--  UPDATE Clan SET Point=0 WHERE CLID=@LoserCLID AND Point<0  
  
  -- 전적 로그를 남긴다.  
  INSERT INTO ClanGameLog(WinnerCLID, LoserCLID, WinnerClanName, LoserClanName, RoundWins, RoundLosses, MapID, GameType, RegDate, WinnerMembers, LoserMembers, WinnerPoint, LoserPoint)  
  VALUES (@WinnerCLID, @LoserCLID, @WinnerClanName, @LoserClanName, @RoundWins, @RoundLosses, @MapID, @GameType, GETDATE(), @WinnerMembers, @LoserMembers, @WinnerPoint, @LoserPoint)  
 END  
 ELSE  
  UPDATE Clan SET Draws=Draws+1 WHERE CLID=@WinnerCLID OR CLID=@LoserCLID  
go  

----------------------------------------------------------------------------

create  proc spRegularUpdateDeleteClan
as
 set nocount on

 declare @DelClanID table( clid int )

 begin tran
 insert into @DelClanID
 select CLID from Clan(nolock) where DeleteFlag = 2
 if (0 <> @@ERROR) or (0 = @@ROWCOUNT) begin
  rollback tran
  return
 end

 delete ClanMember 
 from @DelClanID dci, ClanMember cm(nolock)
 where cm.CLID = dci.CLID
 if (0 <> @@ERROR) begin
  rollback tran
  return
 end

 update Clan
 set MasterCID = null, DeleteFlag = 1, DeleteName = Name, Name = null
 from @DelClanID dci, Clan c(nolock)
 where c.CLID = dci.CLID
 if (0 <> @@ERROR) OR (0 = @@ROWCOUNT) begin
  rollback tran
  return
 end
 
 commit tran

GO

----------------------------------------------------------------------

CREATE PROC spRegularTranslateServerLog  
AS   
 SET NOCOUNT ON  
  
 DECLARE @StartTime char(16)  
 DECLARE @EndTime char(16)  
  
 SET @StartTime = CONVERT(char(13), DATEADD(hh, -1, GETDATE()), 120) + ':00'  
 SET @EndTime = CONVERT(char(13), GETDATE(), 120) + ':00'  
  
 INSERT INTO LogDB.dbo.ServerLogStorage(ServerID  
  , PlayerCount, GameCount, BlockCount, NonBlockCount  
  , Time)  
 SELECT ServerID, PlayerCount, GameCount, BlockCount, NonBlockCount, Time  
 FROM ServerLog(NOLOCK)  
 WHERE ServerID < 200 AND Time >= @StartTime AND Time < @EndTime  
 ORDER BY ServerID, Time  
go

----------------------------------------------------------------------

CREATE PROC spIPFltGetCustomIP  
 @IP varchar(15)  
AS  
 SET NOCOUNT ON  
 DECLARE @TmpIP bigint  
  
 SET @TmpIP = GunzDB.game.inet_aton( @IP )  
  
 SELECT IPFrom, IPTo, IsBlock, Comment, RegDate   
 FROM CustomIP(NOLOCK)          
 WHERE IPFrom <= @TmpIP AND IPTo >= @TmpIP  
go

-------------------------------------------------------

SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO

ALTER  FUNCTION inet_aton (@IP VARCHAR(15))
RETURNS BIGINT
AS
BEGIN
	DECLARE @A BIGINT, @B BIGINT, @C BIGINT, @D BIGINT
	DECLARE @iBegin INT, @iEnd INT
	
	SELECT @iBegin=1
	SELECT @iEnd=CHARINDEX('.', @IP)
	SELECT @A=CAST(SUBSTRING(@IP, @iBegin, @iEnd-@iBegin) AS BIGINT)
	
	SELECT @iBegin=@iEnd+1
	SELECT @iEnd=CHARINDEX('.', @IP, @iBegin)
	SELECT @B=CAST(SUBSTRING(@IP, @iBegin, @iEnd-@iBegin) AS BIGINT)
	
	SELECT @iBegin=@iEnd+1
	SELECT @iEnd=CHARINDEX('.', @IP, @iBegin)
	SELECT @C=CAST(SUBSTRING(@IP, @iBegin, @iEnd-@iBegin) AS BIGINT)
	
	SELECT @iBegin=@iEnd+1
	SELECT @iEnd=CHARINDEX('.', @IP, @iBegin)
	SELECT @D=CAST(SUBSTRING(@IP, @iBegin, 15) AS BIGINT)
	
	DECLARE @IPNumber BIGINT
	SELECT @IPNumber=@A*16777216+@B*65536+@C*256+@D
	
	RETURN @IPNumber
END

GO
SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

-----------------------------------------------------------------------

SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO

ALTER  FUNCTION inet_ntoa (@IP bigint)
 RETURNS varchar(15)
AS
BEGIN
 DECLARE @NumIP bigint
 DECLARE @a int
 DECLARE @b int
 DECLARE @c int
 DECLARE @d int

 SET @NumIP = @IP

 SET @a = @NumIP / 16777216
 SET @NumIP = @NumIP % 16777216

 SET @b = @NumIP / 65536
 SET @NumIP = @NumIP % 65536

 SET @c = @NumIP / 256
 SET @NumIP = @NumIP % 256

 SET @d = @NumIP

 RETURN CAST(@a AS varchar(3)) + '.' + CAST(@b AS varchar(3)) + '.' +
  CAST(@c AS varchar(3)) + '.' + CAST(@d AS varchar(3))
END


GO
SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

--------------------------------------------

CREATE PROC spIPFltGetIPtoCountry  
 @IP char(15)  
AS  
 SET NOCOUNT ON  
 DECLARE @IPNumber BIGINT          
 SET @IPNumber = GunzDB.game.inet_aton( @IP )  
          
 SELECT IPFrom, IPTo, CountryCode3 FROM IPtoCountry(NOLOCK)          
 WHERE IPFrom <= @IPNumber AND IPTo >= @IPNumber          
go

--------------------------------------------

  
CREATE PROC spAdmWebGetConnectLogInfo  
 @AID int  
, @IP nvarchar(16)  
, @StartDate smalldatetime  
, @EndDate smalldatetime  
AS   
 SET NOCOUNT ON  
  
 DECLARE @LogTable varchar(32)  
 DECLARE @LogTablePrev varchar(32)  
 DECLARE @SQL nvarchar(4000)  
 DECLARE @Where nvarchar(1024)  
 DECLARE @SqlPrmDef nvarchar(1024)  
 DECLARE @Order nvarchar(21)  
  
-- 시작날짜의 달과 끝날짜의 달이 다를경우 ConnLog와 ConnLog_xxxxxx테이블에서 조회후 Union  
 IF CONVERT(char(7), @StartDate, 102) <> CONVERT(char(7), @EndDate, 102) BEGIN  
    SET @LogTable = 'LogDB.dbo.ConnLog'   
    SET @LogTablePrev = 'LogDB.dbo.ConnLog_' + CAST(DATEPART(yy, @StartDate) as varchar(4))   
   + REPLACE(str(CAST(DATEPART(mm, @StartDate) as varchar(2)),2), ' ', 0)  
 END  
  
-- 시작날짜의 달과 현재날짜의 달이 다를경우 지난달 로그기록 테이블에서 조회 (ConnLog_xxxxxx)  
-- 그 외의 경우는 ConnLog 테이블에서 조회  
 ELSE  IF CONVERT(char(7), @StartDate, 102) <> CONVERT(char(7), GETDATE(), 102) BEGIN  
  SET @LogTable = 'LogDB.dbo.ConnLog_' + CAST(DATEPART(yy, @StartDate) as varchar(4))   
   + REPLACE(str(CAST(DATEPART(mm, @EndDate) as varchar(2)),2), ' ', 0)  
 END  
 ELSE BEGIN  
  SET @LogTable = 'LogDB.dbo.ConnLog'  
 END   
  
 IF NOT EXISTS (SELECT * FROM LogDB.INFORMATION_SCHEMA.TABLES   
  WHERE TABLE_NAME = SUBSTRING(@LogTable, 11, 14) AND TABLE_TYPE = 'BASE TABLE')   
  RETURN  
  
 SET @LogTable = @LogTable + ' as cl'   
  
  
IF (@LogTablePrev  IS NOT NULL) BEGIN  
   IF NOT EXISTS (SELECT * FROM LogDB.INFORMATION_SCHEMA.TABLES   
        WHERE TABLE_NAME = SUBSTRING(@LogTablePrev, 11, 14) AND TABLE_TYPE = 'BASE TABLE')   
   RETURN  
   SET @LogTablePrev = @LogTablePrev + ' as cl'   
END  
   
  
 SET @SQL = 'SELECT cl.AID, a.UserID, CAST(cl.IPPart1 as varchar(3)) + ' + '''' + '.' + ''''   
  + ' + CAST(cl.IPPart2 as varchar(3)) + ' + '''' + '.' + ''''  
  + ' + CAST(cl.IPPart3 as varchar(3)) + ' + '''' + '.' + ''''  
  + ' + CAST(cl.IPPart4 as varchar(3)) as AccessIP , cl.Time as ' + '''' + 'ConnectionTime' + ''''   
  + ' FROM ' + @LogTable + ', TestDB.dbo.Account a(NOLOCK) '   
  
 SET @Order = 'ORDER BY cl.Time DESC'  
 SET @IP = @IP + '%'  
  
 IF (@AID IS NOT NULL) AND (@IP IS NOT NULL) BEGIN  
  SELECT '1'  
  SET @Where = 'WHERE cl.AID = @AID AND a.AID = cl.AID AND CAST(cl.IPPart1 as nvarchar(3)) + ' + '''' + '.' + ''''   
  + ' + CAST(cl.IPPart2 as nvarchar(3)) + ' + '''' + '.' + ''''  
  + ' + CAST(cl.IPPart3 as nvarchar(3)) + ' + '''' + '.' + ''''  
  + ' + CAST(cl.IPPart4 as nvarchar(3)) LIKE ' + '''' + @IP + ''''   
  + ' AND cl.Time >= @StartDate AND cl.Time <= @EndDate '   
  SET @SqlPrmDef = '@AID int, @IP nvarchar(16), @StartDate smalldatetime, @EndDate smalldatetime'  
  SET @SQL = @SQL + @Where  
 END  
 ELSE IF(@AID IS NOT NULL) AND (@IP IS NULL) BEGIN  
  SELECT '2'  
  SET @Where = 'WHERE cl.AID = @AID AND a.AID = cl.AID AND  cl.Time >= @StartDate AND cl.Time <= @EndDate '  
  SET @SqlPrmDef = '@AID int, @StartDate smalldatetime, @EndDate smalldatetime'  
  SET @SQL = @SQL + @Where   
 END  
 ELSE IF(@AID IS NULL) AND (@IP IS NOT NULL) BEGIN  
  SELECT '3'  
  SET @Where = 'WHERE (CAST(cl.IPPart1 as nvarchar(3)) + ' + '''' + '.' + ''''   
  + ' + CAST(cl.IPPart2 as nvarchar(3)) + ' + '''' + '.' + ''''  
  + ' + CAST(cl.IPPart3 as nvarchar(3)) + ' + '''' + '.' + ''''  
  + ' + CAST(cl.IPPart4 as nvarchar(3))) LIKE ' + '''' + @IP + ''''   
  + ' AND a.AID = cl.AID  AND cl.Time >= @StartDate AND cl.Time <= @EndDate '   
  SET @SqlPrmDef = '@IP nvarchar(16), @StartDate smalldatetime, @EndDate smalldatetime'  
  SET @SQL = @SQL + @Where   
 END  
  
IF (@LogTablePrev IS NOT NULL) BEGIN  
   SET @SQL = @SQL + ' UNION ALL ' + REPLACE(@SQL, 'LogDB.dbo.ConnLog as cl', @LogTablePrev)  
END  
  
SET @SQL = @SQL + @Order  
  
EXEC sp_executesql @SQL, @SqlPrmDef, @IP, @StartDate, @EndDate
GO

--------------------------------------------

create proc spCheckDuplicateCharName   
 @Name varchar(24)  
as
 set nocount on  
 select top 1 cid from character(nolock) where deleteflag <> 1 and name = @Name  
go

--------------------------------------------

create proc spGetCIDbyCharName
 @Name varchar(24)
as
 set nocount on
 select cid from character(nolock) where name = @Name
go

--------------------------------------------

create proc spGetCharNameByCID
 @CID int
as 
 set nocount on
 select name from character(nolock) where CID = @CID
go

--------------------------------------------

USE GunzDB;
GO

IF OBJECT_ID('spResetAccountHackingBlock') IS NOT NULL
 DROP PROC spResetAccountHackingBlock;
GO

CREATE PROC spResetAccountHackingBlock
 @AID INT
, @HackingType TINYINT
AS
BEGIN
 SET NOCOUNT ON

 UPDATE Account
 SET HackingType = @HackingType
 WHERE AID = @AID
END
GO

--------------------------------------------

USE GunzDB
GO

IF OBJECT_ID('spDeleteAccount') IS NOT NULL
 DROP PROC spDeleteAccount
GO

CREATE PROC spDeleteAccount
 @UserID varchar(20)
AS
BEGIN
 SET NOCOUNT ON

 DECLARE @AID int
 DECLARE @DeleteName varchar(40)

 SELECT @AID = AID FROM Account(NOLOCK) WHERE UserID = @UserID
 IF @AID IS NULL BEGIN
  SELECT (-1) AS 'Ret'
  RETURN 
 END

 SET @DeleteName = CAST(NEWID() as varchar(40))

 BEGIN TRAN

 UPDATE Account
 SET UserID = CAST(@DeleteName AS varchar(20))
 WHERE AID = @AID
 IF (0 <> @@ERROR) OR (0 = @@ROWCOUNT) BEGIN
  ROLLBACK TRAN
  SELECT (-2) AS 'Ret'
  RETURN 
 END

 INSERT INTO AccountDeleteLog(AID, UserID, DeleteDate)
 VALUES(@AID, @UserID, GETDATE())
 IF (0 <> @@ERROR) OR (0 = @@ROWCOUNT) BEGIN
  ROLLBACK TRAN
  SELECT (-3) AS 'Ret'
  RETURN 
 END

 COMMIT TRAN

 SELECT 1 'Ret'
 
END
GO

-------------------------------------------------------------------------------

 create proc spUpdateAccountLastLogoutTime    
 @AID int    
as  
begin    
 set nocount on    
    
 update Account set LastLogoutTime = getdate() where AID = @AID    
end  
GO

-------------------------------------------------------------------------------

 CREATE  PROC [spSelectCharItem2]    
 @CID  int    
AS    
BEGIN  
 SET NOCOUNT ON  
  
 SELECT CIID, ItemID, (RentHourPeriod*60) - (DateDiff(n, RentDate, GETDATE())) AS RentPeriodRemainder  
  , ISNULL(RentHourPeriod, 0) as 'RentHourPeriod'  
 FROM CharacterItem (nolock)    
 WHERE CID=@CID ORDER BY CIID    
END  

GO

-------------------------------------------------------------------------------

 CREATE    PROC [spBuyBountyItem2]     
 @CID  INT    
,  @ItemID  INT    
, @Price  INT      
, @RentHourPeriod INT     
AS      
SET NOCOUNT ON      
BEGIN      
 DECLARE @OrderCIID int      
 DECLARE @Bounty INT      
      
 BEGIN TRAN      
  -- 잔액검사      
  SELECT @Bounty=BP FROM Character(NOLOCK) WHERE CID=@CID      
  IF @Bounty IS NULL OR @Bounty < @Price      
  BEGIN      
   ROLLBACK TRAN      
   RETURN 0      
  END      
      
  -- Bounty 감소      
  UPDATE Character SET BP=BP-@Price WHERE CID=@CID      
  IF 0 = @@ROWCOUNT      
  BEGIN      
   ROLLBACK TRAN      
   RETURN (-1)      
  END      
      
  -- Item 추가      
  INSERT INTO CharacterItem (CID, ItemID, RegDate, RentDate, RentHourPeriod)     
  Values (@CID, @ItemID, GETDATE(), GETDATE(), @RentHourPeriod)      
  IF 0 <> @@ERROR      
  BEGIN      
   ROLLBACK TRAN      
   RETURN (-1)      
  END      
      
  SELECT @OrderCIID = @@IDENTITY      
        
  -- Item 구매로그 추가      
  INSERT INTO ItemPurchaseLogByBounty (ItemID, CID, Date, Bounty, CharBounty, Type)      
  VALUES (@ItemID, @CID, GETDATE(), @Price, @Bounty, '구입')      
  IF 0 <> @@ERROR BEGIN      
   ROLLBACK TRAN      
   RETURN (-1)      
  END      
      
  SELECT @OrderCIID as ORDERCIID      
 COMMIT TRAN      
      
 RETURN 1      
END      
GO  


------------------------------------------------------------------


CREATE PROC spRegularUpdateClanRanking
AS
BEGIN
	CREATE TABLE #clan_rank
	(
		rank INT IDENTITY
		, clan_id INT
	);

	INSERT INTO @clan_rank(clan_id)
	SELECT clid
	FROM clan(NOLOCK)
	WHERE deleteflag = 0 AND ((wins <> 0) OR (Losses <> 0))
	ORDER BY Point DESC, Wins DESC, Lossess DESC

	UPDATE clan 
	SET Ranking = cr.rank
	FROM @clan_rank cr
	WHERE clid = cr.clan_id

	TRUNCATE TABLE @clan_rank
END


--------------------------------------------------------------------

CREATE PROC spRegularUpdateClanRankIncrease
AS
BEGIN
	DECLARE @LowestRank INT;
	SELECT TOP 1 @LowestRank = Ranking
	FROM Clan WITH (NOLOCK)
	WHERE DeleteFlag = 0 AND Ranking > 0
	ORDER BY ranking DESC;

	IF @LowestRank IS NULL SELECT @LowestRank = 0;

	UPDATE Clan
	SET RankIncrease=(LastDayRanking - Ranking)
	WHERE DeleteFlag = 0 AND Ranking > 0
		AND LastDayRanking <> 0;

	UPDATE Clan
	SET RankIncrease = @LowestRank - Ranking
	WHERE DeleteFlag = 0 AND Ranking > 0
		AND LastDayRanking = 0;

	UPDATE Clan
	SET LastDayRanking = Ranking
	WHERE DeleteFlag = 0 AND Ranking > 0
END


--------------------------------------------------------------------


CREATE PROC spRegularClearDeletedCharItem
AS
BEGIN
	SET NOCOUNT ON;
	DELETE CharacterItem
	WHERE CIID IN
	(
		SELECT TOP 10000 CIID
		FROM CharacterItem ci(NOLOCK)
		WHERE ci.CID IS NULL
		ORDER BY CIID
	);
END


--------------------------------------------------------------------


CREATE PROC spRegularClearFriendList
AS
BEGIN
	SET NOCOUNT ON;

	DELETE FROM Friend
	WHERE id IN
	(
		SELECT TOP 10000 id
		FROM Friend(NOLOCK)
		WHERE DeleteFlag = 1
	);
END


--------------------------------------------------------------------


CREATE PROC spClearZombiItem  
AS  
BEGIN  
 SET NOCOUNT ON;  
  
 DECLARE @citem TABLE   
 (  
  CIID INT  
  , CID INT  
 );  
   
 DECLARE @id INT  
  , @Start INT  
  , @End INT  
  , @StartDate DATETIME  
  , @DeletedRowCount INT  
  , @DeleleteCount INT;  
  
 SET @DeleleteCount = 100;  
  
 SELECT TOP 1 @id = id, @Start = Start, @End = (Start + @DeleleteCount) - 1, @StartDate = GETDATE()  
 FROM LogClearZombiItem  
 ORDER BY id DESC;  
  
  
 INSERT INTO @citem(CIID, CID)  
 SELECT CIID, CID  
 FROM CharacterItem WITH (NOLOCK)   
 WHERE CIID BETWEEN @Start AND @End;  
   
  
 DELETE CharacterItem  
 WHERE CIID IN  
  (  
   SELECT t1.CIID  
   FROM  
   (  
    SELECT ci.CIID, c.DeleteName  
    FROM Character c WITH (NOLOCK), @citem ci  
    WHERE c.CID = ci.CID  
     AND c.DeleteFlag = 1  
   ) t1  
   , (  
    SELECT cl.CharName  
    FROM CharacterMakingLog cl WITH (NOLOCK)  
    WHERE cl.Date < DATEADD(yy, -1, GETDATE())  
     AND Type = '삭제'  
   ) t2  
   WHERE t1.DeleteName = t2.CharName  
  )  
  AND CIID BETWEEN @Start AND @End  
  
 SET @DeletedRowCount = @@ROWCOUNT  
  
 UPDATE LogClearZombiItem  
 SET StartDate = @StartDate, EndDate = GETDATE(), DeleteCount = @DeletedRowCount  
 WHERE id = @id;  
  
 -- 다음 작업용.  
 IF 1000 < (SELECT TOP 1 CIID - @Start FROM CharacterItem(NOLOCK) ORDER BY CIID DESC)  
 BEGIN  
  -- 아직 작업할 양이 충분 하다면.  
  INSERT INTO LogClearZombiItem(Start) VALUES (@End + 1);  
 END  
 ELSE  
 BEGIN  
  -- 남은 양이 얼마 없으면 다시 처음부터 시작 한다.  
  INSERT INTO LogClearZombiItem(Start) VALUES (1);  
 END  
END  